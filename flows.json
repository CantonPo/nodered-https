[
    {
        "id": "6644fe4b3a079d9d",
        "type": "tab",
        "label": "B1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a40ecd06d6aa773b",
        "type": "tab",
        "label": "B2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "01214dc77e323413",
        "type": "tab",
        "label": "Añadir maquinas y sensores",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d306f8b3fbbeafc0",
        "type": "tab",
        "label": "Dashboard INTRAZA ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d86c19fe420220cb",
        "type": "tab",
        "label": "BASE de Máquina",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "ed400993171a9574",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "f3cc59f6be2a2cbb",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "becc16f661278b7f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.0.212",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "1000",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "db098622d12e3ccf",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "992d20f01ead1c82",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "6340ebd9bc6725bc",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "dea4e4fbac5320d2",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "43dfc19c76857242",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "ef2957c8d850098f",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "a37a3849b7f3b4a7",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "a9add4c80545d711",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "f77b20d7fe4fac7e",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "03aad83f47b0994b",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "c8a90c18751f1055",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "97a6e9024b359cd8",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "fb2f4bd808f32358",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "3094b4ea293acf56",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "04bebdf006098b08",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "21973dff64b29491",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "79f2b97c9f6b823b",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#4B7930",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#4B7930",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#6db046",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#4b7930",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e80fedd83379cd8e",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5cc4ba892a3b4c47",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "ab7514247e8cc290",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "48418b79.0f5834",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "726d9136608dff7f",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1,
        "disabled": true,
        "hidden": false
    },
    {
        "id": "f8644eb4bb4e45d8",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ae0627bc.f9d238",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "07cfbc8ee42dd5ab",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "628bf375918b1274",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "66e4f614876eac83",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "0339bd120b3d955f",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "cbdd5b7b14fee907",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "f89e41e9ff4eacf3",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "dc6ea3ade4e8435f",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "47be784383d33c55",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "2223bc8d59b2792d",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "432e30f00e79c3bd",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "818ff8c4f04508ec",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "dec8e605fccc6d46",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "23064f8e05311e16",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "5f1345235bbe7073",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "84d092fed12d8860",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "6521d05d04b880db",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "5cd32181df7e4703",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "80b3b05d0b2f1776",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "38aebb25c94b6a26",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "e2d8b27344f1afd3",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "f36260e4e1a0e9f0",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "b5a750b41f816160",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "803c05704ebf788f",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "2a8aa34254a98a6c",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "0c90786233fee651",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "5f13f93de333b6c7",
        "type": "ui_tab",
        "name": "Audio",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9ce0eebdec7971aa",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "fb5a7aab98415dfa",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "7b88eecbcac1faff",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "830e4cdbd6bdb27d",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "94e886df46065eb9",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "e6df29c30aa15b69",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "1e7321115ec5186e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "71c39ad69ffd1cbb",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "acd1b7f5a4033253",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "f867b44c78f3fa64",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "b9f12dc82f731e61",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "3efd327c63088aaf",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "d00cb98b071b4f57",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "f3ccfa634b10dea4",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "51c10fc35de7c422",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "2e6dfd968a0c0f1e",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "00df6723f13d18e4",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "c12c2a340e8f0a14",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "7631d40cc8906437",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "19c8e58db4193185",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "ac22a4113915950a",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "08370d25f3daba2e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "f4455159da3a9a1e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "163b8b761060712c",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "ab801ef7b9090da1",
        "type": "ui_group",
        "name": "Estado Actual B2",
        "tab": "e80fedd83379cd8e",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": true,
        "className": "fondo"
    },
    {
        "id": "618e54da2107d61a",
        "type": "ui_group",
        "name": "Estado Actual LP1",
        "tab": "e80fedd83379cd8e",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": true,
        "className": "fondo"
    },
    {
        "id": "0765e94ad12d62fb",
        "type": "ui_group",
        "name": "AÑADIR MÁQUINAS Y SENSORES",
        "tab": "ab7514247e8cc290",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": true,
        "className": "fondo"
    },
    {
        "id": "0578c059ce449df6",
        "type": "ui_group",
        "name": "INFORMES ",
        "tab": "5cc4ba892a3b4c47",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": "fondo"
    },
    {
        "id": "91fa393d74f1e74e",
        "type": "ui_group",
        "name": "Autoclave",
        "tab": "e80fedd83379cd8e",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": true,
        "className": "fondo"
    },
    {
        "id": "7cbc255ec4c7a235",
        "type": "ui_group",
        "name": "MAQUINARIA",
        "tab": "5cc4ba892a3b4c47",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": true,
        "className": "fondo"
    },
    {
        "id": "dfb4a60f.d788f8",
        "type": "ui_group",
        "name": "Data Export",
        "tab": "48418b79.0f5834",
        "order": 1,
        "disp": true,
        "width": "12"
    },
    {
        "id": "f873b4966058ce11",
        "type": "ui_group",
        "name": "",
        "tab": "726d9136608dff7f",
        "order": 1,
        "disp": false,
        "width": "28",
        "collapse": false,
        "className": ""
    },
    {
        "id": "069773552026ae62",
        "type": "ui_group",
        "name": "ESTADOS",
        "tab": "5cc4ba892a3b4c47",
        "order": 3,
        "disp": true,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "eb2e79d6.b2c8a",
        "type": "ui_group",
        "name": "Default",
        "tab": "ae0627bc.f9d238",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "be6968868880ad62",
        "type": "ui_group",
        "name": "Exportacion de datos",
        "tab": "07cfbc8ee42dd5ab",
        "order": 1,
        "disp": true,
        "width": "25",
        "collapse": false,
        "className": ""
    },
    {
        "id": "13203d441a699d87",
        "type": "ui_group",
        "name": "Default",
        "tab": "ab7514247e8cc290",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "80dba3ac576c2921",
        "type": "ui_group",
        "name": "Audio",
        "tab": "5f13f93de333b6c7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2e0bd6b64b95e6d9",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "eed9e54ea64775f5",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "8c296d361a2e461f",
        "type": "MySQLdatabase",
        "name": "",
        "host": "localhost",
        "port": "3306",
        "db": "alucoat",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "90f9495e6d74d976",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "b8803959a4f15d99",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "INT_MAQUINA3",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "5e50ea301ef59e1e",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "ebc7bb7d172943c7",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "50ecf19ed9f62777",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "d0c623f83a2342c1",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "817cf61527182c93",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "7fad2b99fd835e78",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "00640c35537385ed",
        "type": "MySQLdatabase",
        "name": "LC01",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "INT_LC01",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "76990f5322af4aa7",
        "type": "MySQLdatabase",
        "name": "Interia",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Interia",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "586d41d4e756d01b",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "6de03fff6ef0a108",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "INT_MAQUINA3",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "42c7f734fe3a0311",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "d4fce8fc59d5074c",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "b3304781a7e6b8c0",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "c649488448a459e3",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "3884ca98487bdc69",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "6b7d2edf3b98bd47",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "961c5bc8ad7d2f43",
        "type": "MySQLdatabase",
        "name": "LC01",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "INT_LC01",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "223a40cfeff184cc",
        "type": "MySQLdatabase",
        "name": "Interia",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Interia",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "5cf681f51069400f",
        "type": "MySQLdatabase",
        "name": "RECEPCIÓN",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "INT_RECEPCION",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "af74a16878273c1f",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.105.10.11",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "100",
        "timeout": "2000",
        "name": "CONTROL B1",
        "vartable": [
            {
                "addr": "DB299,BYTE1565",
                "name": "VELOCIDADB1C"
            },
            {
                "addr": "DB302,BYTE1029",
                "name": "ONOFFB1C"
            },
            {
                "addr": "DB303,BYTE1029",
                "name": "CORTEDESBOB1C"
            },
            {
                "addr": "DB304,BYTE1029",
                "name": "CORTEBOBIB1C"
            }
        ]
    },
    {
        "id": "4dd47afaed49386d",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.105.10.21",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "100",
        "timeout": "2000",
        "name": "CONTROL B2",
        "vartable": [
            {
                "addr": "DB300,BYTE266",
                "name": "VELOCIDADB2C"
            },
            {
                "addr": "DB300,BYTE285",
                "name": "ONOFFB2C"
            },
            {
                "addr": "DB300,BYTE271",
                "name": "CORTES1DESBOB2C"
            },
            {
                "addr": "DB300,BYTE269",
                "name": "CORTES2DESBOB2C"
            },
            {
                "addr": "DB300,BYTE275",
                "name": "CORTEI1DESBOB2C"
            },
            {
                "addr": "DB300,BYTE273",
                "name": "CORTEI2DESBOB2C"
            },
            {
                "addr": "DB300,BYTE279",
                "name": "CORTES1BOBIB2C"
            },
            {
                "addr": "DB300,BYTE277",
                "name": "CORTES2BOBIB2C"
            }
        ]
    },
    {
        "id": "1cbe9a2b6d305765",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.105.10.21",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "2000",
        "name": "SENSORES B2 ",
        "vartable": [
            {
                "addr": "DB300,S10.50",
                "name": "VELOCIDADB2_VELOCIDADB2"
            },
            {
                "addr": "DB300,BYTE285",
                "name": "ONOFFB2_ONOFFB2"
            },
            {
                "addr": "DB300,BYTE270",
                "name": "CORTES1DESBOB2_CORTES1DESBOB2"
            },
            {
                "addr": "DB300,BYTE268",
                "name": "CORTES2DESBOB2_CORTES2DESBOB2"
            },
            {
                "addr": "DB300,BYTE274",
                "name": "CORTEI1DESBOB2_CORTEI1DESBOB2"
            },
            {
                "addr": "DB300,BYTE272",
                "name": "CORTEI2DESBOB2_CORTEI2DESBOB2"
            },
            {
                "addr": "DB300,BYTE278",
                "name": "CORTES1BOBIB2_CORTES1BOBIB2"
            },
            {
                "addr": "DB300,BYTE276",
                "name": "CORTES2BOBIB2_CORTES2BOBIB2"
            }
        ]
    },
    {
        "id": "2046b68c2698214f",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.105.10.11",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "2000",
        "name": "SENSORES B1",
        "vartable": [
            {
                "addr": "DB302,BYTE1028",
                "name": "ONOFFB1_ONOFFB1"
            },
            {
                "addr": "DB303,BYTE1028",
                "name": "CORTEDESBOB1_CORTEDESBOB1"
            },
            {
                "addr": "DB304,BYTE1028",
                "name": "CORTEBOBIB1_CORTEBOBIB1"
            },
            {
                "addr": "DB299,S1308.6",
                "name": "VELOCIDADB1_VELOCIDADB1"
            }
        ]
    },
    {
        "id": "5e6939e8b17c96a8",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------------*ESCRITURA EN GENERAL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2020,
        "y": 700,
        "wires": []
    },
    {
        "id": "1c26921c4670f273",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "e327734a2c80dd97",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = 'B1'\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "8a691545c1e67df7"
            ]
        ]
    },
    {
        "id": "8a691545c1e67df7",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 320,
        "wires": []
    },
    {
        "id": "8846260b3347ac44",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1220,
        "wires": [
            [
                "4b71a490678cb99a"
            ]
        ]
    },
    {
        "id": "59d589b9a6369b16",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1220,
        "wires": [
            [
                "2498858f7cde3f43"
            ],
            [
                "8846260b3347ac44"
            ]
        ]
    },
    {
        "id": "4b71a490678cb99a",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1220,
        "wires": [
            [
                "42b4677d8b127839"
            ],
            [
                "935b4ab67c9de5ac"
            ]
        ]
    },
    {
        "id": "50921080c5a6276f",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LOOP DEVOLUCION O ERROR",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1160,
        "wires": [
            [
                "20ff7fd1def9ee9a"
            ]
        ]
    },
    {
        "id": "20ff7fd1def9ee9a",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<12){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "59d589b9a6369b16"
            ]
        ]
    },
    {
        "id": "935b4ab67c9de5ac",
        "type": "delay",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2600,
        "y": 1260,
        "wires": [
            [
                "20ff7fd1def9ee9a"
            ]
        ]
    },
    {
        "id": "2498858f7cde3f43",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1160,
        "wires": [
            [
                "ddc06c787df7caa5"
            ]
        ]
    },
    {
        "id": "096c54b63911e885",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Definir_MaxSensor",
        "func": "/*Este nodo declara la variable de flow MaxSensores para conocer\ncuantos sensores hay definidos en la máquina\n*/\nvar valor = Object.values(msg.payload);\nflow.set('MaxSensor',valor['0']);\nmsg.payload = flow.get('MaxSensor');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "93937e63f424a3d3",
                "b910a5f1c894dc9e"
            ]
        ]
    },
    {
        "id": "93937e63f424a3d3",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "Numero de sensores1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 460,
        "wires": []
    },
    {
        "id": "1b81010ffcf560ea",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Buscar Numero de sensores",
        "func": "/*Este nodo consulta la tabla Sensores para saber cuántas\nentradas existen en la tabla, siendo cada una de ellas\nun sensor\n*/\n\nmsg.topic = \"SELECT COUNT(*) FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "e2b419ac926f9d06"
            ]
        ]
    },
    {
        "id": "72bc197dcef2f2f9",
        "type": "split",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2070,
        "y": 460,
        "wires": [
            [
                "096c54b63911e885"
            ]
        ]
    },
    {
        "id": "755a57df13e8c984",
        "type": "trigger",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1390,
        "y": 300,
        "wires": [
            [
                "e327734a2c80dd97",
                "1b81010ffcf560ea"
            ]
        ]
    },
    {
        "id": "c31c67a4d0306c3a",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "FechaHora",
        "func": "/*Declara la valiable FechaHora que contiene la fecha y hora \nque será utilizada en el flow\n*/\nvar now = new Date(); \nvar año = now.getFullYear();\nvar mes = now.getMonth()+1; \nvar dia = now.getDate();\nvar hora = now.getHours();\nvar minuto = now.getMinutes();\nvar segundo = now.getSeconds(); \n\n\nif(mes.toString().length == 1) {\n    mes = '0'+mes;\n}\n\nif(dia.toString().length == 1) {\n    dia = '0'+dia;\n} \n\nif(hora.toString().length == 1) {\n    hora = '0'+hora;\n}\n\nif(minuto.toString().length == 1) {\n    minuto = '0'+minuto;\n    \n}\n\nif(segundo.toString().length == 1) {\n    segundo = '0'+segundo;\n} \n\n\nvar FechaHoralocal = año+'-'+mes+'-'+dia+' '+hora+':'+minuto+':'+segundo;\nflow.set('FechaHora',FechaHoralocal);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "e83a59a775494ecf",
        "type": "rbe",
        "z": "6644fe4b3a079d9d",
        "name": "Block unless value changes",
        "func": "deadband",
        "gap": "0",
        "start": "1",
        "inout": "out",
        "septopics": true,
        "property": "payload['ORDEN_LECTURA_general']",
        "topi": "topic",
        "x": 2460,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "a7b99f4f5414e89d",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "EscrituraErrorCiclo",
        "func": "/*Este nodo se encarga de notificar que ha habido un error\ndurante el proceso de escritura, resultando en que el PLC\nno recibió la orden de setear la variable OrdenLectura a 0 y\ntuvo que avanzar de manera automática tras esperar la orden\ndurante 60 segundos sin resultado\n*/\nflow.set('ERROR_CICLO', msg.payload['ERROR_CICLO']);\n\nif (flow.get('ERROR_CICLO') == 1) {\n    msg.topic = \"INSERT INTO \" + flow.get('DBname') + \".General (error_ciclo) VALUES ('\";\n    msg.topic += flow.get('ERROR_CICLO') + \"');\";\n\n    msg.topic = msg.topic;\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1280,
        "wires": [
            [
                "e2a45cf28a60b55e"
            ]
        ]
    },
    {
        "id": "4a8a925ba7738295",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Cantidad de producciones?",
        "func": "flow.set('CantidadProducciones',msg.payload['CantidadProducciones']);\nmsg.payload = flow.get('CantidadProducciones');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "d6305f2fa64b0a28",
                "56e7ace245e20f15"
            ]
        ]
    },
    {
        "id": "d6305f2fa64b0a28",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "CONSULTA3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 560,
        "wires": []
    },
    {
        "id": "6aa24fa519710817",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Buscar info los sensores",
        "func": "/*Este nodo realiza un Query para obtener la informacion\ndel nombre de cada sensor para declararlos como variables de\nflow y que puedan ser utilizados en el apartado de *Escritura en Sensores*\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "134c7dad202a4c30"
            ]
        ]
    },
    {
        "id": "c723601508c0470a",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Declaracion de sensores",
        "func": "// Este nodo guarda el nombre de cada sensor en una variable de flujo para ser utilizada en este flujo\n\n// Obtener el valor actual de 'i' de la variable de flujo (si 'i' no está definida, se asumirá inicialmente como 0)\nvar i = flow.get('i') || 0;\n\n// Obtener el array de sensores del mensaje de entrada\nvar array = Object.values(msg.payload);\n\n// Iterar a través de cada sensor hasta el número máximo de sensores definido en 'MaxSensor'\nfor (; i < flow.get('MaxSensor') && i < array.length; i++) {\n    // Guardar el objeto sensor actual en una variable de flujo con un nombre único\n    flow.set('Sensor' + (i + 1), array[i].Sensor);\n}\n\n// Guardar el valor actual de 'i' en la variable de flujo\nflow.set('i', i);\n\n// Devolver el mensaje de entrada sin cambios\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 520,
        "wires": [
            [
                "a417e136ca44ea4b",
                "2ea370749815f5cc"
            ]
        ]
    },
    {
        "id": "a417e136ca44ea4b",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "CONSULTA2(ARRAY) SENSORES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 520,
        "wires": []
    },
    {
        "id": "bcbcb3fd888740c4",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------------*DATOS DE MAQUINA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de cada máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 830,
        "y": 440,
        "wires": []
    },
    {
        "id": "fbe2e7150f9c9b9d",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "Consultas de informacion necesaria para el programa",
        "info": "",
        "x": 1740,
        "y": 380,
        "wires": []
    },
    {
        "id": "08445b46e6f6df7b",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "INSTRUCCIONES ------ POR FAVOR LEER PARA CORRECTA CONFIGURACIÓN DEL FLOW",
        "info": "INFORMACION PARA CONFIGURAR EL FLOW DE MAQUINA:\n\nCuando se quiera configurar este flow por primera vez el usuario debe editar 3 nodos:\n\n-`Definir_Maquina`: Se debe asignar a la variable Nombre el nombre que tenga nuestra máquina. (var Nombre = 'Nombre de la máquina')\n\n-`Definir_SQL`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo Connection. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro servidor de base de datos los campos Server, Port, Username y Password.\n\n-`Definir_PLC`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo PLC. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro PLC los campos Adress y Port bajo la pestaña Connection. Además, en la pestaña Variables debemos declarar la dirección y nombre de cada una de nuestras variables.\n\n`IMPORTANTE`: Recordar que el nombre que demos a las variables de sensores deben ser iguales que los otorgados a estos mismos sensores en las variables de sensor del flow `Añadir máquinas y sensores`",
        "x": 850,
        "y": 380,
        "wires": []
    },
    {
        "id": "e9421930bf267def",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "DEFINIR",
        "info": "",
        "x": 1960,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "0ce36ace8601419c",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "DEFINIR",
        "info": "",
        "x": 1620,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "430db6ae37547994",
        "type": "delay",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "a7b99f4f5414e89d"
            ]
        ]
    },
    {
        "id": "97e511c9a18b809a",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Update Fin",
        "func": "msg.topic = \"UPDATE \" + flow.get('DBname') + \".General \";\nmsg.topic += \"SET Fin = '\" + flow.get('FechaHora') + \"';\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 920,
        "wires": [
            [
                "63fc80afea5ad6e7"
            ]
        ]
    },
    {
        "id": "0951f898a54c243d",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "REVISAR DELAY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 900,
        "wires": []
    },
    {
        "id": "4d81bb66aac2b607",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "27c4fea3f4fc6b89",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "2212db7a7ba08e6d",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "82e3aa324a5d233b",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "aed88b6cc1278ecb",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "COMPROBACION ULTIMA FILA",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".General ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "aaad799a98d4514a",
                "a9cc5da84f54c9cb"
            ]
        ]
    },
    {
        "id": "0a0735d18ef0b5f0",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "COMPARACION DE ARRAYS",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocal = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducido',arrayIntroducidolocal);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1100,
        "wires": [
            [
                "50921080c5a6276f"
            ]
        ]
    },
    {
        "id": "a9cc5da84f54c9cb",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ca9841dbf6c85ed5",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "func": "\nvar signals = flow.get(\"Signals\");\n\nfor(var j =0;j <flow.get(\"NumSignals\");j++){\n    \n    flow.set(String(signals[j]),msg.payload[String(signals[j])]);\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 640,
        "wires": [
            [
                "6b158c75ac2c51a7"
            ]
        ]
    },
    {
        "id": "6b158c75ac2c51a7",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 640,
        "wires": []
    },
    {
        "id": "96f2555d521f964d",
        "type": "split",
        "z": "6644fe4b3a079d9d",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1940,
        "y": 760,
        "wires": [
            [
                "0ccefae9f537fea3"
            ]
        ]
    },
    {
        "id": "0ccefae9f537fea3",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 760,
        "wires": [
            [
                "b7af7edde0a9d4b5"
            ]
        ]
    },
    {
        "id": "37c0b057b801e249",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "set variables auxiliares",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"Objeto\",msg.payload);\nflow.set(\"NumSignals\",Object.keys(flow.get(\"Objeto\")).length);\nflow.set(`j`,0);\nflow.set(\"PredefinedSignalsArray\",new Array(flow.get(\"NumSignals\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "96f2555d521f964d"
            ]
        ]
    },
    {
        "id": "b7af7edde0a9d4b5",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "f6323e1bbff054a1",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "CONSULTA4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1280,
        "wires": []
    },
    {
        "id": "b910a5f1c894dc9e",
        "type": "link out",
        "z": "6644fe4b3a079d9d",
        "name": "Numero de Sensores",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 460,
        "wires": []
    },
    {
        "id": "2ea370749815f5cc",
        "type": "link out",
        "z": "6644fe4b3a079d9d",
        "name": "Info de los Sensores OBJECT",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 520,
        "wires": []
    },
    {
        "id": "56e7ace245e20f15",
        "type": "link out",
        "z": "6644fe4b3a079d9d",
        "name": "Cantidad de Producciones Number",
        "mode": "link",
        "links": [],
        "x": 2595,
        "y": 560,
        "wires": []
    },
    {
        "id": "65fe4be05c4c8bfc",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "REVISAR",
        "info": "UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1; : msg.topic : string[93]\n\"UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1;\"",
        "x": 1500,
        "y": 920,
        "wires": []
    },
    {
        "id": "b560ccb45ad22a48",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "INSERT EN GENERAL",
        "func": "var signals = flow.get(\"Signals\");\nvar objeto = flow.get(\"Objeto\");\nvar dbName = flow.get(\"DBname\");\nvar fechaHora = flow.get(\"FechaHora\");\n\n// Construir la consulta SQL de inserción\nvar topic = \"INSERT INTO `\" + dbName + \"`.`General` VALUES (\";\n\n// Agregar la fecha y hora\ntopic += \"'\" + fechaHora + \"', \";\n\n// Agregar la primera señal\nvar firstSignal = signals[0];\nvar firstValor = objeto[firstSignal];\nif (typeof firstValor === 'string') {\n    topic += \"'\" + firstValor + \"'\";\n} else {\n    topic += firstValor;\n}\n\n// Agregar coma\ntopic += \", \";\n\n// Iterar a través del resto de las señales y construir los valores de la inserción\nfor (var k = 1; k < signals.length; k++) {\n    var signal = signals[k];\n\n    // Obtener el valor correspondiente del objeto\n    var valor = objeto[signal];\n\n    // Agregar el valor a la consulta SQL\n    if (typeof valor === 'string') {\n        // Si es una cadena, agregar comillas simples alrededor del valor\n        topic += \"'\" + valor + \"'\";\n    } else {\n        // De lo contrario, agregar el valor directamente\n        topic += valor;\n    }\n\n    // Agregar coma si no es el último valor\n    if (k < signals.length - 1) {\n        topic += \", \";\n    }\n}\n\n// Cerrar paréntesis de la consulta SQL de inserción\ntopic += \")\";\n\n// return the SQL query\nreturn {\n    topic: topic\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 980,
        "wires": [
            [
                "0951f898a54c243d",
                "26366ee06d8cda58"
            ]
        ]
    },
    {
        "id": "b77178c0fb382b10",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "OVERRIDE DE O.L POR SENSOR",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "4ce88e462572bce1",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "info": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "x": 2490,
        "y": 1060,
        "wires": []
    },
    {
        "id": "42b4677d8b127839",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "ORDEN_LECTURA_G(OK)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=2;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1220,
        "wires": [
            [
                "04f8fa45af8d924d",
                "433c695722076069"
            ]
        ]
    },
    {
        "id": "d258f88774183994",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "REVISAR",
        "info": "",
        "x": 2360,
        "y": 380,
        "wires": []
    },
    {
        "id": "b2abc9620d2d5a12",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3440,
        "y": 1060,
        "wires": []
    },
    {
        "id": "afe89d9b7924b5ed",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "4243e05d80662a2e",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1720,
        "wires": [
            [
                "0fa28f2971bd34e0"
            ]
        ]
    },
    {
        "id": "46c3f4da016c6859",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1720,
        "wires": [
            [
                "6f1c9e05589125ca"
            ],
            [
                "4243e05d80662a2e"
            ]
        ]
    },
    {
        "id": "0fa28f2971bd34e0",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1720,
        "wires": [
            [],
            [
                "8f81f8b7effb6368"
            ]
        ]
    },
    {
        "id": "1f983c10cf470145",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "i for loop",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1660,
        "wires": [
            [
                "4a338ca3401cb716"
            ]
        ]
    },
    {
        "id": "4a338ca3401cb716",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<4){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1720,
        "wires": [
            [
                "46c3f4da016c6859"
            ]
        ]
    },
    {
        "id": "8f81f8b7effb6368",
        "type": "delay",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2590,
        "y": 1720,
        "wires": [
            [
                "4a338ca3401cb716"
            ]
        ]
    },
    {
        "id": "6f1c9e05589125ca",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1660,
        "wires": [
            [
                "2fda553c83a62bd0"
            ]
        ]
    },
    {
        "id": "28c83f2c3309b95c",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "23843af85a9c30b9",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "65b812a97e1d839c",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "4e2c51ea70ead841",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "2fdfacafe45b98bf",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Control ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            [
                "15872a024ee794ba"
            ]
        ]
    },
    {
        "id": "4be37a20114762da",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "ArraysParaComparar",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocalcontrol = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducidocontrol',arrayIntroducidolocalcontrol);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1600,
        "wires": [
            [
                "1f983c10cf470145"
            ]
        ]
    },
    {
        "id": "ed2f1783f67159fa",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1910,
        "y": 1640,
        "wires": [
            [
                "46c3f4da016c6859"
            ]
        ]
    },
    {
        "id": "67c79a5551bce187",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------------*ESCRITURA EN CONTROL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2040,
        "y": 1340,
        "wires": []
    },
    {
        "id": "9259123bd70bf7d0",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "ESCRITURA EN LA TABLA DE CONTROL",
        "func": "// Obtener el payload del mensaje\nlet data = msg.payload;\n\n// Verificar si el payload es un string y convertirlo a objeto JSON\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\n// Inicializar un array para almacenar las consultas SQL\nlet sqlQueries = [];\n\n// Iterar sobre cada clave en el objeto de datos\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        // Construir la consulta SQL con una tabla estática y claves como columnas\n        let query = `INSERT INTO INT_maquina1.control (${key}) VALUES (\"${value}\")`;\n        sqlQueries.push(query);\n    }\n}\n\n// Devolver las consultas generadas en el payload del mensaje\nmsg.topic = sqlQueries.join(';');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1480,
        "wires": [
            [
                "21f3c792fe6eab38"
            ]
        ]
    },
    {
        "id": "dcff023dec203e2b",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "-----------------ORDEN------------",
        "func": "// Función para reordenar las variables dentro del paquete\nfunction reordenarPaquete(paquete) {\n    // Define el orden deseado de las variables\n    const ordenDeseado = [\"1LOTE\", \"2RECETA\", \"3PROCESO\", \"4FASE\",  \"5OPERARIO\", \"zAVANCE_MANUAL\", \"zABORTAR\", flow.get(\"Adicional1\"), flow.get(\"Adicional2\"), flow.get(\"Adicional3\"), flow.get(\"Adicional4\"), flow.get(\"Adicional5\"), flow.get(\"Adicional5\"), flow.get(\"Adicional6\"), flow.get(\"Adicional7\"), flow.get(\"Adicional8\"), flow.get(\"Adicional9\"), flow.get(\"Adicional10\"), flow.get(\"Adicional11\"), flow.get(\"Adicional12\"), flow.get(\"Adicional13\"), flow.get(\"Adicional14\"), flow.get(\"Adicional15\"), \"zerror_ciclo\"];\n\n    // Crea un nuevo objeto para almacenar las variables reordenadas\n    let paqueteOrdenado = {};\n\n    // Itera sobre el orden deseado\n    ordenDeseado.forEach(variable => {\n        // Verifica si la variable está presente en el paquete recibido\n        if (paquete.hasOwnProperty(variable)) {\n            // Agrega la variable al paquete ordenado\n            paqueteOrdenado[variable] = paquete[variable];\n        }\n    });\n\n    // Devuelve el paquete ordenado\n    return paqueteOrdenado;\n}\n\n// Llama a la función de reordenamiento con el paquete recibido como argumento\nmsg.payload= reordenarPaquete(msg.payload);\n\n// Devuelve el mensaje con el paquete ordenado\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "37c0b057b801e249",
                "755a57df13e8c984",
                "6aa24fa519710817",
                "4a8a925ba7738295",
                "c31c67a4d0306c3a",
                "430db6ae37547994",
                "ca9841dbf6c85ed5",
                "1c5cab1db4f716ef",
                "a5f1b63633bc7bb3"
            ]
        ]
    },
    {
        "id": "875855e4ce58cc68",
        "type": "json",
        "z": "6644fe4b3a079d9d",
        "name": "Envio del señales de control a la BDD",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 1480,
        "wires": [
            [
                "9259123bd70bf7d0"
            ]
        ]
    },
    {
        "id": "21f3c792fe6eab38",
        "type": "split",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2050,
        "y": 1440,
        "wires": [
            [
                "063c5190772c8388"
            ]
        ]
    },
    {
        "id": "94163e56888bf7ce",
        "type": "json",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2230,
        "y": 1440,
        "wires": [
            [
                "5ddde8363c2c9358",
                "0d47d45c9dfb17d1"
            ]
        ]
    },
    {
        "id": "0d47d45c9dfb17d1",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "REV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 1420,
        "wires": []
    },
    {
        "id": "113c059f5f915137",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "ORDEN_LECTURA_G(KO)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=3;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1160,
        "wires": [
            [
                "04f8fa45af8d924d"
            ]
        ]
    },
    {
        "id": "a519bc32a49b0ed0",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------ENTRADAS SIEMENS PLC------------------------------------------------------------------",
        "info": "\nEMAIL: \"~+TIEMPO,102.00;LITROS,204.00;HORAS:,1580.00\"",
        "x": 420,
        "y": 900,
        "wires": []
    },
    {
        "id": "da4d2ebff0da9bb6",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "Inserciones de sensores con O.L Independiente",
        "info": "",
        "x": 1840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "60657bb1dfc1b33b",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "Inserciones de sensores con O.L General de Sensores",
        "info": "",
        "x": 2500,
        "y": 1800,
        "wires": []
    },
    {
        "id": "f20de2560c56b219",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1610,
        "y": 2060,
        "wires": [
            [
                "5fd902da183ae8e2"
            ]
        ]
    },
    {
        "id": "5fd902da183ae8e2",
        "type": "json",
        "z": "6644fe4b3a079d9d",
        "name": "ORDEN_LECTURA_tipo = \"2\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2470,
        "y": 2060,
        "wires": [
            [
                "35fcdd969347df4c",
                "bf33bd66a35247e4"
            ]
        ]
    },
    {
        "id": "35fcdd969347df4c",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO int_maquina1.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1980,
        "wires": [
            [
                "59617a84034c9cc3"
            ]
        ]
    },
    {
        "id": "59617a84034c9cc3",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1920,
        "wires": [
            [
                "89089c36135aaa61"
            ]
        ]
    },
    {
        "id": "89089c36135aaa61",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "CHECK O.L.",
        "func": "\nif (flow.get(\"ORDEN_LECTURA_sensores\") !== 1) {\n    node.warn('La orden de Lectura General de Sensores está apagada');\n} else {\n    \n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1860,
        "wires": [
            [
                "1ea1d40dc03d458a"
            ]
        ]
    },
    {
        "id": "cff7a8eeb79c23c3",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "debug sensores ind",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "bf33bd66a35247e4",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "debug sensores gnral",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 1960,
        "wires": []
    },
    {
        "id": "a32bd15d836b4b69",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "TIPO_LECTURA_Sensores",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1350,
        "y": 1960,
        "wires": [
            [
                "2be2505b9c442178"
            ],
            [
                "f20de2560c56b219"
            ],
            [
                "7d2edf07863d44b4"
            ]
        ]
    },
    {
        "id": "dfe94a2f23201377",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "set O.L. EMAIL S1C",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4f561e75cba4cef2",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "dfe94a2f23201377"
            ]
        ]
    },
    {
        "id": "991501ef5b7f15c5",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "set O.L. EMAIL D1C",
        "func": "\nflow.set(\"D1C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "74320dcce1d451cc",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "991501ef5b7f15c5"
            ]
        ]
    },
    {
        "id": "83de92ebf212b384",
        "type": "template",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "a471c1fc699e6fa7"
            ]
        ]
    },
    {
        "id": "a471c1fc699e6fa7",
        "type": "rbe",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "dfe94a2f23201377"
            ]
        ]
    },
    {
        "id": "40a58c1203ee3c61",
        "type": "websocket in",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "83de92ebf212b384"
            ]
        ]
    },
    {
        "id": "ba741982ebecd214",
        "type": "template",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "df70f4a5e43c1c72"
            ]
        ]
    },
    {
        "id": "df70f4a5e43c1c72",
        "type": "rbe",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "991501ef5b7f15c5"
            ]
        ]
    },
    {
        "id": "eaa298b680aac0d2",
        "type": "websocket in",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "ba741982ebecd214"
            ]
        ]
    },
    {
        "id": "433c695722076069",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "¿O.L EMAIL?",
        "func": "if (flow.get(\"CONTROL_EMAIL\") === 1) {\n   \n    // Continuar el flujo si el valor es 1\n    msg.payload =1 \n return msg;\n \n} else {\n    // Bloquear ejecución enviando un mensaje de error\n    node.error(\"EMAIL EN PROCESO\", msg);\n    return null; // Detener el flujo\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3660,
        "y": 520,
        "wires": [
            [
                "b9a58f93a2074fc8"
            ]
        ]
    },
    {
        "id": "cf7980324bb36df0",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "991501ef5b7f15c5"
            ]
        ]
    },
    {
        "id": "90b5ec300fd80334",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "dfe94a2f23201377"
            ]
        ]
    },
    {
        "id": "7d2edf07863d44b4",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "BLOCK \"0\"",
        "func": "msg.payload=node.warn(\"Lectura de Sensores Apagada\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "04f37995ef93e303",
        "type": "split",
        "z": "6644fe4b3a079d9d",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1660,
        "y": 1380,
        "wires": [
            [
                "846ef8a2bb9b9661"
            ]
        ]
    },
    {
        "id": "846ef8a2bb9b9661",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Declaracion Señales DE CONTROL",
        "func": "var CSignals = msg.signals;\n\nvar CSignalsLocal = flow.get(\"ControlSignalsArray\");\n\nCSignalsLocal[flow.get('j1')]=CSignals;\n\nflow.set('j1',flow.get('j1')+1);\n\nif(flow.get(\"j1\")==flow.get(\"NumSignalsControl\")){\n    flow.set(\"CSignals\",CSignalsLocal);\n}\n\nmsg.payload = msg.CSignals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1380,
        "wires": [
            [
                "6cde0ba99b32cb79"
            ]
        ]
    },
    {
        "id": "d75782c5181ab4da",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "set variables de control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j1`,0);\nflow.set(\"ControlSignalsArray\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1380,
        "wires": [
            [
                "04f37995ef93e303"
            ]
        ]
    },
    {
        "id": "6cde0ba99b32cb79",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j1\") == flow.get(\"NumSignalsControl\")) {\n    msg.payload = flow.get(\"ObjetoControl\");\n\n    var signals = flow.get(\"CSignals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignalsControl\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "99af9ac380f7bd49",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "set  TIPO O.L. SENSORES (GENERAL) ",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "491324f9434881c9",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 80,
        "wires": [
            [
                "99af9ac380f7bd49"
            ]
        ]
    },
    {
        "id": "509e829f6f4966a9",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "set O.L. GENERAL",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0e6799c0104069fb",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "509e829f6f4966a9"
            ]
        ]
    },
    {
        "id": "8bc4aaa1f9543b60",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "set  TIPO O.L. SENSORES (INDIVIDUAL)",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "560f024355de44b6",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "8bc4aaa1f9543b60"
            ]
        ]
    },
    {
        "id": "063c5190772c8388",
        "type": "split",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2190,
        "y": 1400,
        "wires": [
            [
                "94163e56888bf7ce"
            ]
        ]
    },
    {
        "id": "02529dfdec6a616e",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SELECT LAST ROW",
        "func": "var controlemail= flow.get(\"CONTROL_EMAIL\");\nif (controlemail===1){\nmsg.topic= \"SELECT * FROM INT_\"+flow.get (\"Maquina\")+\".General ORDER BY 'FechaHora' DESC LIMIT 1;\";\nreturn msg;}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 980,
        "wires": [
            [
                "1c8be258ee60b3a6"
            ]
        ]
    },
    {
        "id": "745bae6bab3b16e6",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "DEFINIR ADICIONALES",
        "props": [
            {
                "p": "Adicional1",
                "v": "MATRICULA",
                "vt": "str"
            },
            {
                "p": "Adicional3",
                "v": "CONDUCTOR",
                "vt": "str"
            },
            {
                "p": "Adicional4",
                "v": "PROVEEDOR",
                "vt": "str"
            },
            {
                "p": "Adicional5",
                "v": "LITROS",
                "vt": "str"
            },
            {
                "p": "Adicional6",
                "v": "DESTINO",
                "vt": "str"
            },
            {
                "p": "Adicional7",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional8",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional9",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional10",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional11",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional12",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional13",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional14",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional15",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 670,
        "y": 640,
        "wires": [
            [
                "ba60af3a569cc54b"
            ]
        ]
    },
    {
        "id": "ba60af3a569cc54b",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"Adicional1\", msg.Adicional1);\nflow.set(\"Adicional2\", msg.Adicional2);\nflow.set(\"Adicional3\", msg.Adicional3);\nflow.set(\"Adicional4\", msg.Adicional4);\nflow.set(\"Adicional5\", msg.Adicional5);\nflow.set(\"Adicional6\", msg.Adicional6);\nflow.set(\"Adicional7\", msg.Adicional7);\nflow.set(\"Adicional8\", msg.Adicional8);\nflow.set(\"Adicional9\", msg.Adicional9);\nflow.set(\"Adicional10\", msg.Adicional10);\nflow.set(\"Adicional11\", msg.Adicional11);\nflow.set(\"Adicional12\", msg.Adicional12);\nflow.set(\"Adicional13\", msg.Adicional13);\nflow.set(\"Adicional14\", msg.Adicional14);\nflow.set(\"Adicional15\", msg.Adicional15);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "2be2505b9c442178",
        "type": "json",
        "z": "6644fe4b3a079d9d",
        "name": "ORDEN_LECTURA_tipo = \"1\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1650,
        "y": 1840,
        "wires": [
            [
                "b4a0ac88c596e7f6"
            ]
        ]
    },
    {
        "id": "b4a0ac88c596e7f6",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO INT_B1.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1728.183349609375,
        "y": 1915.88330078125,
        "wires": [
            [
                "6df26375be9c3d3c"
            ]
        ]
    },
    {
        "id": "8c8341e32d75a9eb",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_B1\\.(\\w+)\\s*\\(/i);\n\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1860,
        "wires": [
            [
                "b8d241a474d72cff",
                "e792f67eb21325f2"
            ]
        ]
    },
    {
        "id": "6df26375be9c3d3c",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1868.183349609375,
        "y": 2015.88330078125,
        "wires": [
            [
                "8c8341e32d75a9eb"
            ]
        ]
    },
    {
        "id": "ee64d37e5f783fc0",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1720,
        "y": 2880,
        "wires": [
            [
                "1922a0f596664012"
            ]
        ]
    },
    {
        "id": "8288856374d86e9a",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1960,
        "wires": [
            [
                "41ee1fc1fb8451d3"
            ]
        ]
    },
    {
        "id": "b9a58f93a2074fc8",
        "type": "json",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 4310,
        "y": 200,
        "wires": [
            [
                "6f29c17f9986275b"
            ]
        ]
    },
    {
        "id": "6f29c17f9986275b",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SELECT",
        "func": "var Lote = flow.get(\"1LOTE\");\nvar Maquina = flow.get(\"DBname\");\n\n// Asegurarse de que Lote se concatene como string con comillas simples\nvar query = \"SELECT 4FASE, LITROS, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM \" + Maquina + \".General WHERE 1LOTE = '\" + Lote + \"';\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4440,
        "y": 200,
        "wires": [
            [
                "0d7263af03615c18"
            ]
        ]
    },
    {
        "id": "c9c532cdf89574a3",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Template Correo E ",
        "func": "// Recupera el contenido del payload\nlet content = flow.get(\"CONTENIDO_EMAIL\");\nlet RECETA = flow.get(\"RECETA\") || \"No disponible\";\nvar LOTE = flow.get(\"1LOTE\") || \"No disponible\";\nvar FASE = flow.get(\"4FASE\") || \"No disponible\";\nvar OPERARIO = flow.get(\"5OPERARIO\") || \"No disponible\";\nvar PROCESO = flow.get(\"3PROCESO\") || \"No disponible\";\nvar PROVEEDOR = flow.get(\"PROVEEDOR\") || \"No disponible\";\nvar MATRICULA = flow.get(\"MATRICULA\") || \"No disponible\";\nvar CONDUCTOR = flow.get(\"CONDUCTOR\") || \"No disponible\";\nvar DESTINO = flow.get(\"DESTINO\") || \"No disponible\";\nvar Registro = msg.payload;  // El payload ya debe contener el JSON parseado.\n\n// Verifica que el contenido de Registro sea un array y construye una tabla\nlet registroTable = \"\";\n\nif (Array.isArray(Registro)) {\n    registroTable = `\n        <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse;\">\n            <thead>\n                <tr>\n                    <th>FASE</th>\n                    <th>LITROS</th>\n                    <th>Fecha y Hora</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${Registro.map(reg => `\n                    <tr>\n                        <td>${reg['4FASE'] || \"No disponible\"}</td>\n                        <td>${reg.LITROS}</td>\n                        <td>${reg.Fechahora}</td>\n                    </tr>`).join('')}\n            </tbody>\n        </table>\n    `;\n} else {\n    registroTable = `<p>No se encontraron registros válidos.</p>`;\n}\n\n// Crea la lista HTML a partir de las partes de content\nlet items = content.split(';').map(item => `<li>${item.trim()}</li>`).join('\\n');\n\n// Arma el contenido HTML completo con la tabla\nmsg.payload = `\n    <html>\n        <body>\n            <h1>Alerta de Trazabilidad:</h1>\n            <p>En este documento puede encontrar los datos de la línea: ${flow.get(\"Maquina\")}</p>\n            <ul>\n                <li>Lote: ${LOTE}</li>\n                <li>Proceso: ${PROCESO}</li>\n                <li>Proveedor: ${PROVEEDOR}</li>\n                <li>Matricula: ${MATRICULA}</li>\n                <li>Conductor: ${CONDUCTOR}</li>\n                <li>Operario: ${OPERARIO}</li>\n                <li>Destino: ${DESTINO}</li>\n            </ul>\n            <h2>Registros:</h2>\n            ${registroTable}\n            <img src=\"cid:miImagen\" alt=\"Imagen Incrustada\" />\n        </body>\n    </html>\n`;\n\n// Especifica que se trata de contenido HTML\nmsg.html = msg.payload;\n\n// Configura el mensaje\nmsg.to = \"breixoherrera1@gmail.com, jadeudero@grupointegra.com.es\";\nmsg.topic = \"Datos de la línea Recepción. Lote:\" +flow.get(\"1LOTE\");\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\", // Cambia esto por el nombre de tu imagen\n        path: \"/home/intboxes/Documents/Logo.jpg\", // Cambia esto por la ruta a tu imagen\n        cid: \"miImagen\"  // cid debe coincidir con el del HTML\n    }\n];\n\n// Envía el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5070,
        "y": 200,
        "wires": [
            [
                "855afe58f623ebd5",
                "13c215441c894b23"
            ]
        ]
    },
    {
        "id": "ff2603708871a569",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Conversion a JSON String",
        "func": "// Verifica si el payload es un string y lo convierte a JSON\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (error) {\n        node.error(\"El payload no es un JSON válido: \" + error);\n        return;\n    }\n}\n\n// Retorna el mensaje con el payload convertido\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4840,
        "y": 200,
        "wires": [
            [
                "c9c532cdf89574a3"
            ]
        ]
    },
    {
        "id": "06ccec07e294ce8e",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "fe9924e6e5772826"
            ]
        ]
    },
    {
        "id": "fe9924e6e5772826",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "ENVIO DE EMAIL",
        "func": "\nflow.set(\"CONTROL_EMAIL\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "66315db44ef454be",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "----------------------------------------NOTIFICACIONES----------------------------------------",
        "info": "",
        "x": 4720,
        "y": 40,
        "wires": []
    },
    {
        "id": "126d3c95cd5b4687",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "NOTIFICACIONES DE TRAZABILIDAD POR EMAIL.",
        "info": "",
        "x": 4680,
        "y": 120,
        "wires": []
    },
    {
        "id": "13c215441c894b23",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "CONFIRMACION AL PLC",
        "func": "msg.payload = 2;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5090,
        "y": 240,
        "wires": [
            [
                "829d5abeb5aa1e11"
            ]
        ]
    },
    {
        "id": "0560fff76dfa3bb6",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "ORDEN DE LECTURA GENERAL BLOCK",
        "func": "// Obtener los valores de las variables de flujo\nconst ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nconst latenciaOrdenLectura = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 1\nif (ordenLectura === 1) {\n    // Si ORDEN_LECTURA_general es 1, verificar la latencia\n    if (latenciaOrdenLectura === 1) {\n        // Si la latencia es 1, bloquear la ejecución\n        node.error(\"LATENCIA_ORDEN_LECTURA_general es 1, bloqueo de flujo\", msg);\n        return null; // Detener el flujo\n    } else {\n        // Si la latencia no es 1 (Es = 0), continuar el flujo\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n        return msg;\n    }\n} else {\n    // Si ORDEN_LECTURA_general no es 1, bloquear la ejecución\n    node.error(\"ORDEN_LECTURA_general no es 1, bloqueo de flujo\", msg);\n    return null; // Detener el flujo\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 860,
        "wires": [
            [
                "b560ccb45ad22a48"
            ]
        ]
    },
    {
        "id": "1c5cab1db4f716ef",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Check Latencia",
        "func": "// Obtener el valor de ORDEN_LECTURA_general\nvar ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 0 o 2\nif (ordenLectura === 0 || ordenLectura === 2) {\n    // Si es 0 o 2, establecer la latencia en el valor actual de ORDEN_LECTURA_general\n    flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 0);\n    return msg;\n}else{\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 860,
        "wires": [
            [
                "0560fff76dfa3bb6"
            ]
        ]
    },
    {
        "id": "cac2ac78e5dafbe7",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------------*GESTION DE TABLA DE LOTES*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2080,
        "y": 2800,
        "wires": []
    },
    {
        "id": "040d33ec35eeac11",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "--------------------------------------------------------------------OVERRIDES------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 40,
        "wires": []
    },
    {
        "id": "2653ace86163d983",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "ENVÍO Y CONFIRMACIÓN",
        "info": "",
        "x": 5390,
        "y": 120,
        "wires": []
    },
    {
        "id": "75b4076319217144",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "ACTIVACIÓN DE ENVÍO DE NOTIFICACIONES",
        "info": "",
        "x": 3680,
        "y": 420,
        "wires": []
    },
    {
        "id": "b7307f3f5d1e0663",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "-------------------------DECLARACIÓN DE ADICIONALES GENERALES---------------------------------",
        "info": "",
        "x": 840,
        "y": 580,
        "wires": []
    },
    {
        "id": "41c4946cd46d3351",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1020,
        "wires": []
    },
    {
        "id": "4bd3112e38939b56",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1140,
        "wires": []
    },
    {
        "id": "e2903aa26651c31d",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1320,
        "wires": []
    },
    {
        "id": "b3e7731cb976d496",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7789766a5240ac93",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1900,
        "wires": []
    },
    {
        "id": "cce93343eb54ea12",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 2020,
        "wires": []
    },
    {
        "id": "2cb4a93d4f0ecb36",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 2280,
        "wires": [
            [
                "537defe1fb605eb0"
            ],
            [
                "ed841a343ea07ecd"
            ]
        ]
    },
    {
        "id": "414b66b46d57cc85",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Escritura en Tabla de Sensor",
        "func": "/*Este nodo prepara el Query para almacenar la información\ndel sensor proveniente del PLC en su lugar correspondiente.\nEsto solo se procesa si la orden de lectura de este sensor\nse encuentra activa\n*/\nmsg.payload = flow.get('Objeto');\n\nif (flow.get('NumSensor') <= flow.get('MaxSensor') && msg.payload[ + flow.get('Sensor' + flow.get('NumSensor'))] == true) {\n    var tableName = flow.get('Sensor' + flow.get('NumSensor'));\n    var datetime = flow.get('FechaHora');\n    var value = msg.payload[flow.get('NumSensor')];\n    var dbName = flow.get('DBname');\n      \n   var topic = \"INSERT INTO \" + dbName + \".\" + tableName + \" (FechaHora, Unidad) VALUES ('\" + datetime + \"', '\" + value + \"');\";\n   \n\n    msg.queryCompresion = \"SELECT Valor FROM \" + flow.get('DBname') + \".\" + tableName + \" ORDER BY FechaHora DESC LIMIT 1;\";\n\n    msg.topic = topic;\n    flow.set(\"queryValor\", msg.topic);\n    msg.payload = 0;\n    return msg;\n} else {\n    msg.payload = 1;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 2240,
        "wires": [
            [
                "d6a783660f3ba55e",
                "f708fbc9165f6d3f",
                "49d642c155a8c44e"
            ]
        ]
    },
    {
        "id": "f708fbc9165f6d3f",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "912e402fcc12994d",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Inicializacion del loop",
        "func": "/*Este nodo inicializa las variables necesarias para ciclar\nla información de cada uno de los sensores y escribirla en \nla tabla correspondiente en la BD de la máquina\n*/\n\nflow.set('NumSensor',1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2200,
        "wires": [
            [
                "414b66b46d57cc85",
                "55f3d28ec693876f"
            ]
        ]
    },
    {
        "id": "d6a783660f3ba55e",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 2380,
        "wires": [
            [
                "46d6e22a102d50cb"
            ],
            [
                "ed841a343ea07ecd"
            ]
        ]
    },
    {
        "id": "ed841a343ea07ecd",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "loop",
        "func": "if(flow.get('NumSensor')<flow.get('MaxSensor')){\n    flow.set('NumSensor',flow.get('NumSensor')+1);\n    msg.payload = flow.get('NumSensor');\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 2380,
        "wires": [
            [
                "414b66b46d57cc85"
            ]
        ]
    },
    {
        "id": "02d20d9b0d930be5",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------------*ESCRITURA EN LAS TABLAS DE SENSOR Y ASIGNACIÓN DE ID*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "a5f1b63633bc7bb3",
        "type": "delay",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 2200,
        "wires": [
            [
                "912e402fcc12994d"
            ]
        ]
    },
    {
        "id": "49d642c155a8c44e",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "3b21987de72cca96",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Check Valores iguales",
        "func": "//recuperamos el valor de la ultima medida del sensor y lo comparamos con el que estamos a punto de introducir\n//si estos valores coinciden, en lugar de seguir con la escritura saltamos una iteracion en el loop\nmsg.payload = msg.payload[0];\nmsg.payload = msg.payload[\"Valor\"];\nflow.set(\"ValorPrevio\", msg.payload);\n\nmsg.payload = flow.get(\"Objeto\");\nvar sensorKey = 'Sensor' + flow.get('NumSensor');\nmsg.payload = msg.payload[sensorKey];\nflow.set(\"ValorActual\", msg.payload);\n\nif (flow.get(\"ValorPrevio\") !== flow.get(\"ValorActual\")) {\n    msg.topic = \"INSERT INTO \" + flow.get(\"DBname\") + \".Tabla (Valor) VALUES ('\" + flow.get(\"ValorActual\") + \"');\";\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 2220,
        "wires": [
            [
                "2cb4a93d4f0ecb36",
                "9ad9dca9571ee0fd"
            ]
        ]
    },
    {
        "id": "46d6e22a102d50cb",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Bypass compresion",
        "func": "if (flow.get(\"ModoCompresion\") == 1) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2380,
        "wires": [
            [
                "e0ebf6dcc05827cb"
            ]
        ]
    },
    {
        "id": "e0ebf6dcc05827cb",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2470,
        "y": 2380,
        "wires": [
            [
                "22ea767a65e2d919"
            ],
            [
                "537defe1fb605eb0"
            ]
        ]
    },
    {
        "id": "9ad9dca9571ee0fd",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "COMPRESSION",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 2220,
        "wires": []
    },
    {
        "id": "55f3d28ec693876f",
        "type": "link out",
        "z": "6644fe4b3a079d9d",
        "name": "INFO SENSOR TEXT",
        "mode": "link",
        "links": [],
        "x": 2215,
        "y": 2200,
        "wires": []
    },
    {
        "id": "62a381d0e97839fd",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 730,
        "y": 1240,
        "wires": [
            [
                "52fed79c478e3dd5"
            ]
        ]
    },
    {
        "id": "52fed79c478e3dd5",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"ORDEN_LECTURA_general\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "5141a21f5b0210db",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1030,
        "y": 1320,
        "wires": [
            [
                "d6d36aac9394971e"
            ]
        ]
    },
    {
        "id": "d6d36aac9394971e",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"CONTROL_EMAIL\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "e709edfd14cbfd50",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "POR FASE",
        "func": "// Obtener el estado de la variable '4FASE' del flow\nvar estado = flow.get(\"4FASE\");\n\n// Obtener el estado previo del bloqueo (si ya fue detectado)\nvar Latencia = flow.get(\"bloqueado\") || false;\n\nif (estado === \"Preparacion a reposo\" && !Latencia) {\n    // Si se encuentra \"Preparacion a reposo\" y no está bloqueado, enviar msg.payload\n    msg.payload = \"Estado detectado: Preparacion a reposo\";\n    \n    // Bloquear el envío de más mensajes\n    flow.set(\"bloqueado\", true);\n    \n    return msg;\n} else if (estado !== \"Preparacion a reposo\" && Latencia) {\n    // Si el estado ya no es \"Preparacion a reposo\", desbloquear el envío\n    flow.set(\"bloqueado\", false);\n}\n\nreturn null; // No se envía ningún mensaje si no cumple las condiciones\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3650,
        "y": 620,
        "wires": [
            [
                "b9a58f93a2074fc8"
            ]
        ]
    },
    {
        "id": "e8317da8d0fcad1a",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3400,
        "y": 480,
        "wires": [
            [
                "e709edfd14cbfd50",
                "61e4c0743cea6b51"
            ]
        ]
    },
    {
        "id": "61e4c0743cea6b51",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "function 99",
        "func": "flow.set(\"bloqueado\", false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3390,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "7091dd382b69bebf",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------------RESPUESTA ERROR DE CICLO--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2070,
        "y": 2580,
        "wires": []
    },
    {
        "id": "ef97926986cb7a66",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "COMPROBACIÓN DE ERROR DE CICLO",
        "func": "// Aqui se revisa si el error de ciclo e encuentra activo cuando no se está leyendo y se pone a 0 en el PLC.\nvar errorciclo = flow.get(\"zerror_ciclo\");\nvar OL = flow.get(\"ORDEN_LECTURA_general\");\nif(errorciclo === 1 && OL === 0 ){\nmsg.payload = 1\n}else{\nreturn msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 2660,
        "wires": [
            [
                "77b9c9ad946dad4e"
            ]
        ]
    },
    {
        "id": "ae32e2401732d884",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Modo Compresion",
        "func": "flow.set(\"ModoCompresion\",msg.payload);\nmsg.payload = \"Modo Compresion Status=\"+flow.get(\"ModoCompresion\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2480,
        "wires": [
            [
                "afd4a066d57f7cbf"
            ]
        ]
    },
    {
        "id": "3d8b70882679f1da",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1670,
        "y": 2460,
        "wires": [
            [
                "ae32e2401732d884"
            ]
        ]
    },
    {
        "id": "7512dbaa61204613",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1670,
        "y": 2500,
        "wires": [
            [
                "ae32e2401732d884"
            ]
        ]
    },
    {
        "id": "afd4a066d57f7cbf",
        "type": "debug",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 2480,
        "wires": []
    },
    {
        "id": "1922a0f596664012",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "ORDEN_LECTURA_LOTE(ok)",
        "func": "// Obtener las variables necesarias de flujo\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\nvar OPERARIO = flow.get(\"5OPERARIO\"); // Asegurarse de que \"5OPERARIO\" es una variable válida de flujo\nvar LOTEC = flow.get(\"LOTEC\");\n\n// Reset de latencia si LOTEC es 0, 2 o 4\nif (LOTEC === 0 || LOTEC === 2 || LOTEC === 4) {  \n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 0);\n    latencia = 0;  // Actualizamos la latencia para asegurarnos de que el cambio se refleje\n}\n\n// Orden para iniciar el lote (LOTEC = 1)\nif (LOTEC === 0 && latencia === 0) {\n    msg.payload = 2;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de inicio del lote y el operario\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET FechaInicioLote = CURRENT_TIMESTAMP, \n                     5OPERARIO = '${OPERARIO}' \n                 ORDER BY FechaInicioLote DESC \n                 LIMIT 1;`;\n}\n\n// Orden para finalizar el lote (LOTEC = 3)\nif (LOTEC === 3 && latencia === 0) {\n    msg.payload = 4;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de finalización del lote\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET FechaFinLote = CURRENT_TIMESTAMP \n                 ORDER BY FechaInicioLote DESC \n                 LIMIT 1;`;\n}\n\n// Devolver el mensaje con el payload y el topic\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2880,
        "wires": [
            [
                "01bbb40a98437adb"
            ]
        ]
    },
    {
        "id": "908b239ca014ad38",
        "type": "s7 in",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "endpoint": "",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "dcff023dec203e2b",
                "ef97926986cb7a66"
            ]
        ]
    },
    {
        "id": "4ae454e8b3d95aa3",
        "type": "s7 in",
        "z": "6644fe4b3a079d9d",
        "endpoint": "af74a16878273c1f",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1380,
        "wires": [
            [
                "d75782c5181ab4da"
            ]
        ]
    },
    {
        "id": "04f8fa45af8d924d",
        "type": "s7 out",
        "z": "6644fe4b3a079d9d",
        "endpoint": "",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 3750,
        "y": 1200,
        "wires": []
    },
    {
        "id": "829d5abeb5aa1e11",
        "type": "s7 out",
        "z": "6644fe4b3a079d9d",
        "endpoint": "",
        "variable": "CONTROL_EMAIL",
        "name": "",
        "x": 5370,
        "y": 240,
        "wires": []
    },
    {
        "id": "77b9c9ad946dad4e",
        "type": "s7 out",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "endpoint": "",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 2110,
        "y": 2660,
        "wires": []
    },
    {
        "id": "855afe58f623ebd5",
        "type": "e-mail",
        "z": "6644fe4b3a079d9d",
        "server": "grupointegra-com-es.correoseguro.dinaserver.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Envio Email",
        "x": 5390,
        "y": 200,
        "wires": []
    },
    {
        "id": "e2b419ac926f9d06",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 460,
        "wires": [
            [
                "72bc197dcef2f2f9",
                "6aa24fa519710817"
            ]
        ]
    },
    {
        "id": "134c7dad202a4c30",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 520,
        "wires": [
            [
                "c723601508c0470a"
            ]
        ]
    },
    {
        "id": "63fc80afea5ad6e7",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 920,
        "wires": [
            [
                "b560ccb45ad22a48"
            ]
        ]
    },
    {
        "id": "aaad799a98d4514a",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 1040,
        "wires": [
            [
                "0a0735d18ef0b5f0"
            ]
        ]
    },
    {
        "id": "ddc06c787df7caa5",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1160,
        "wires": [
            [
                "113c059f5f915137"
            ]
        ]
    },
    {
        "id": "e2a45cf28a60b55e",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1280,
        "wires": [
            [
                "f6323e1bbff054a1"
            ]
        ]
    },
    {
        "id": "15872a024ee794ba",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1900,
        "y": 1540,
        "wires": [
            [
                "4be37a20114762da"
            ]
        ]
    },
    {
        "id": "2fda553c83a62bd0",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "5ddde8363c2c9358",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1500,
        "wires": [
            [
                "2fdfacafe45b98bf"
            ]
        ]
    },
    {
        "id": "26366ee06d8cda58",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1940,
        "y": 980,
        "wires": [
            [
                "aed88b6cc1278ecb",
                "02529dfdec6a616e"
            ]
        ]
    },
    {
        "id": "41ee1fc1fb8451d3",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2160,
        "y": 1900,
        "wires": [
            [
                "1cf3b81263658cb0"
            ]
        ]
    },
    {
        "id": "1ea1d40dc03d458a",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2660,
        "y": 1860,
        "wires": [
            [
                "bf33bd66a35247e4"
            ]
        ]
    },
    {
        "id": "1c8be258ee60b3a6",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2500,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "01bbb40a98437adb",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2400,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "0d7263af03615c18",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4620,
        "y": 200,
        "wires": [
            [
                "ff2603708871a569"
            ]
        ]
    },
    {
        "id": "537defe1fb605eb0",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2970,
        "y": 2380,
        "wires": [
            [
                "ed841a343ea07ecd"
            ]
        ]
    },
    {
        "id": "22ea767a65e2d919",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2570,
        "y": 2260,
        "wires": [
            [
                "3b21987de72cca96"
            ]
        ]
    },
    {
        "id": "01e98808836cd073",
        "type": "s7 in",
        "z": "6644fe4b3a079d9d",
        "endpoint": "2046b68c2698214f",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 140,
        "y": 1960,
        "wires": [
            [
                "a32bd15d836b4b69",
                "755a57df13e8c984",
                "37c0b057b801e249",
                "6f0158e30e903646",
                "177e5b7c3422bee3",
                "c16b10605b8e1b18",
                "1b2a090fb75c6d67",
                "44fc4a8f90f5e2f7"
            ]
        ]
    },
    {
        "id": "08f0bfc0dae80e04",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------------*ENVÍO A SIGA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2020,
        "y": 3020,
        "wires": []
    },
    {
        "id": "c16b10605b8e1b18",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "CHECK ON/OFF",
        "func": "var onoff = flow.get(\"ONOFFB1C\");\nvar onoff0 = flow.get(\"onoff0\");\n\n// Si el valor de \"onoff\" ha cambiado\nif (onoff !== onoff0) {\n    // Actualizamos el valor de \"onoff0\" con el nuevo valor de \"onoff\"\n    flow.set(\"onoff0\", onoff);\n    \n    // Establecemos el mensaje dependiendo del nuevo estado\n    msg.onoff = onoff;  // Devuelve 1 o 0 según el valor de \"onoff\"\n    \n    return msg;  // Solo se devuelve el mensaje si hay un cambio\n} else {\n    // No se hace nada si no hay cambio en el valor\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3160,
        "wires": [
            [
                "97540e76329a3449"
            ]
        ]
    },
    {
        "id": "177e5b7c3422bee3",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "CHECK CORTEDESBOB1",
        "func": "\nvar cortedesbo = flow.get(\"CORTEDESBOB1C\");\nvar cortedesbo0 = flow.get(\"cortedesbo0\");\n\nif (cortedesbo == 1 && cortedesbo !== cortedesbo0) {\n    flow.set(\"cortedesbo0\", cortedesbo);\n    \n    return msg;\n} else \n    if (cortedesbo !== cortedesbo0) {\n        flow.set(\"cortedesbo0\", cortedesbo);\n\n        }else\n        {\n    return null // No se envía mensaje si no hay cambio en la fase\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 3120,
        "wires": [
            [
                "c981ca86eef677b8"
            ]
        ]
    },
    {
        "id": "6f0158e30e903646",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "CHECK CORTEBOBIB1",
        "func": "\nvar cortebobi = flow.get(\"CORTEBOBIB1C\");\nvar cortebobi0 = flow.get(\"cortebobi0\");\n\nif (cortebobi == 1 && cortebobi !== cortebobi0) {\n    flow.set(\"cortebobi0\", cortebobi);\n    \n    return msg;\n} else \n    if (cortebobi !== cortebobi0) {\n        flow.set(\"cortebobi0\", cortebobi);\n\n        }else\n        {\n    return null // No se envía mensaje si no hay cambio en la fase\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 3080,
        "wires": [
            [
                "2dacf641212a7c2d"
            ]
        ]
    },
    {
        "id": "2dacf641212a7c2d",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "ENVIO CORTE BOBI",
        "func": "msg.payload = [\n    {\n        \"sensorname\": \"CORTEBOBIB1\",\n        \"datetime\": new Date().toISOString(), // Captura la fecha y hora actual en formato ISO 8601\n        \"value\": 1,\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3080,
        "wires": [
            [
                "9b75d324f9ee67ee"
            ]
        ]
    },
    {
        "id": "c981ca86eef677b8",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "ENVIO CORTE DESBO ",
        "func": "msg.payload = [\n    {\n        \"sensorname\": \"CORTEDESBOB1\",\n        \"datetime\": new Date().toISOString(), // Captura la fecha y hora actual en formato ISO 8601\n        \"value\": 1,\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3120,
        "wires": [
            [
                "9b75d324f9ee67ee"
            ]
        ]
    },
    {
        "id": "3e6b06764fd9b063",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SEND ON",
        "func": "\nmsg.payload = [\n    {\n        \"sensorname\": \"ONOFFB1\",\n        \"datetime\": new Date().toISOString(),\n        \"value\": 1,\n    }\n];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 3160,
        "wires": [
            [
                "9b75d324f9ee67ee"
            ]
        ]
    },
    {
        "id": "1b2a090fb75c6d67",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "CHECK VELOCIDADB1",
        "func": "var ONOFF = flow.get(\"ONOFFB1_ONOFFB1\");\nvar velocidadb1 = flow.get(\"VELOCIDADB1C\");\n\nif (velocidadb1 == 1 && ONOFF != 0) {\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 3200,
        "wires": [
            [
                "111c413e2a7a82bc"
            ]
        ]
    },
    {
        "id": "111c413e2a7a82bc",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SEND VELOCIDADB1",
        "func": "var velocidadB1 = flow.get(\"VELOCIDADB1_VELOCIDADB1\")\nmsg.payload = [\n    {\n        \"sensorname\": \"VELOCIDADB1\",\n        \"datetime\": new Date().toISOString(), // Captura la fecha y hora actual en formato ISO 8601\n        \"value\": velocidadB1,\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "9b75d324f9ee67ee",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Prepare TOKEN",
        "func": "var TOKEN = flow.get(\"TOKEN\");\n//var TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXh0b1BsYW5vIjoiQjFfT05PRkYiLCJpYXQiOjE3NDA0MTY2MzZ9.YJtjHLR5QrwIErex-3dbYDB8bWX42IHWaJHaEe7w4KU\";\nvar URL = flow.get(\"esiga\");\n\n //Asegurar que URL no tenga comillas adicionales\n if (typeof URL === \"string\") {\n    URL = URL.replace(/^['\"]+|['\"]+$/g, ''); \n    }\n\nmsg.method = 'POST';\nmsg.url = URL;\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + TOKEN  \n};\n\nvar dataToSend = msg.payload;\nmsg.payload = dataToSend;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 3180,
        "wires": [
            [
                "9eaae994a6a60e9a"
            ]
        ]
    },
    {
        "id": "9eaae994a6a60e9a",
        "type": "json",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2550,
        "y": 3220,
        "wires": [
            [
                "58362fc198ef0ea4"
            ]
        ]
    },
    {
        "id": "858326928c68fd25",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": " {\"sensorname\": \"ONOFFB1\", \"value\": 1, \"datetime\": \"2025-03-05 10:14:22\"}",
        "payloadType": "json",
        "x": 2550,
        "y": 3140,
        "wires": [
            [
                "9b75d324f9ee67ee"
            ]
        ]
    },
    {
        "id": "44fc4a8f90f5e2f7",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SET TIPO",
        "func": "flow.set(\"TIPO_LECTURA_Sensores\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "97540e76329a3449",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "onoff",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1890,
        "y": 3160,
        "wires": [
            [
                "3e6b06764fd9b063"
            ],
            [
                "fcb1959c934a72e9"
            ]
        ]
    },
    {
        "id": "fcb1959c934a72e9",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SEND OFF",
        "func": "\nmsg.payload = [\n    {\n        \"sensorname\": \"ONOFFB1\",\n        \"datetime\": new Date().toISOString(),\n        \"value\": 0,\n    }\n];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 3200,
        "wires": [
            [
                "9b75d324f9ee67ee"
            ]
        ]
    },
    {
        "id": "58362fc198ef0ea4",
        "type": "https-node",
        "z": "6644fe4b3a079d9d",
        "name": "HTTPS",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "db098622d12e3ccf",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2720,
        "y": 3220,
        "wires": [
            [
                "c81f7385cb87ff16"
            ]
        ]
    },
    {
        "id": "f41043e2e484d266",
        "type": "http in",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "url": "/setupB1",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 1700,
        "y": 3500,
        "wires": [
            [
                "ab28f3dab277d50b",
                "1e9786c03d802136"
            ]
        ]
    },
    {
        "id": "ab28f3dab277d50b",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SET TOKEN SIGA",
        "func": "flow.set(\"TOKEN\", msg.payload);  // Guardar el token en el contexto de flujo\n\n// Devolver una respuesta de confirmación\nmsg.payload = { \n    success: true, \n    message: \"Token almacenado correctamente\" \n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3500,
        "wires": [
            []
        ]
    },
    {
        "id": "c572fb0f0e169652",
        "type": "http response",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1680,
        "y": 3540,
        "wires": []
    },
    {
        "id": "509637af7f8c55cf",
        "type": "comment",
        "z": "6644fe4b3a079d9d",
        "name": "------------------------------------------------------------------------*SETUP*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`PROCESAR EL TOKEN RECIBIDO'\n    ",
        "x": 1960,
        "y": 3440,
        "wires": []
    },
    {
        "id": "70f87fef45bb0310",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "REV1",
        "func": "flow.set(\"REV\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "c81f7385cb87ff16",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "REV2",
        "func": "flow.set(\"REV2\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2770,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "f0d891ab30034555",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "OLD",
        "func": "// Obtener el objeto de solicitud\nvar payload = msg.payload;\n\n// Extraer la información de la solicitud\nvar token = payload.Token;   // Token\nvar query = payload.ESIGA;   // Query\n\n// Si no se proporcionan query ni token, no hacemos nada\nif (token && !query) {\n    msg.topic = `INSERT INTO INT_B1.VSIGA (token) VALUES ('${token}')`;\n} else if (!token && query) {\n    // Si solo se proporciona query, se inserta solo query\n    msg.topic = `INSERT INTO INT_B1.VSIGA (query) VALUES ('${query}')`;\n} else if (token && query) {\n    // Si tanto token como query están presentes, se insertan ambos\n    msg.topic = `INSERT INTO INT_B1.VSIGA (query, token) VALUES ('${query}', '${token}')`;\n} else {\n    // Si ni token ni query están presentes, podemos manejar este caso de forma diferente si es necesario\n    // Por ejemplo, podrías enviar un mensaje de error o similar.\n    return null;\n}\n\n// Devolver el mensaje con la consulta SQL\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3580,
        "wires": [
            []
        ]
    },
    {
        "id": "0d66b0c3b9aaa647",
        "type": "mysql",
        "z": "6644fe4b3a079d9d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2280,
        "y": 3500,
        "wires": [
            [
                "c572fb0f0e169652",
                "db5ae513be9ef62d",
                "70f87fef45bb0310"
            ]
        ]
    },
    {
        "id": "1e9786c03d802136",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Ajuste de Variables desde SIGA",
        "func": "// Obtener el objeto de solicitud\nvar payload = msg.payload;\n\n// Extraer la información de la solicitud\nvar token = payload.Token;   // Token\nvar esiga = payload.ESIGA;   // Query\n\n// Si no se proporcionan query ni token, no hacemos nada\nif (token && !esiga) {\n    // Si solo se proporciona token, intentamos insertar o actualizar\n    msg.topic = `INSERT INTO INT_B1.VSIGA (token) VALUES ('${token}') ON DUPLICATE KEY UPDATE token = '${token}'`;\n} else if (!token && esiga) {\n    // Si solo se proporciona query, intentamos insertar o actualizar\n    msg.topic = `INSERT INTO INT_B1.VSIGA (esiga) VALUES ('${esiga}') ON DUPLICATE KEY UPDATE esiga = '${esiga}'`;\n} else if (token && esiga) {\n    // Si tanto token como query están presentes, intentamos insertar o actualizar\n    msg.topic = `INSERT INTO INT_B1.VSIGA (esiga, token) VALUES ('${esiga}', '${token}') ON DUPLICATE KEY UPDATE esiga = '${esiga}', token = '${token}'`;\n} else {\n    // Si ni token ni query están presentes, podemos manejar este caso de forma diferente si es necesario\n    return null;\n}\n\n// Devolver el mensaje con la consulta SQL\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3540,
        "wires": [
            [
                "0d66b0c3b9aaa647",
                "d752e26e2fa1502d"
            ]
        ]
    },
    {
        "id": "589bb69c95e4d589",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{ \"Token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXh0b1BsYW5vIjoiQjFfT05PRkYiLCJpYXQiOjE3NDA0MTY2MzZ9.YJtjHLR5QrwIErex-3dbYDB8bWX42IHWaJHaEe7w4KU\", \"ESIGA\": \"https://sigafactorydes.aliberico.com/apisignals/sensors\" }",
        "payloadType": "json",
        "x": 1690,
        "y": 3600,
        "wires": [
            [
                "1e9786c03d802136"
            ]
        ]
    },
    {
        "id": "db5ae513be9ef62d",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Almacenamiento de Variables",
        "func": "// Obtener el resultado de la consulta SQL (suponiendo que el resultado está en msg.payload)\nvar resultado = msg.payload;\n\n// Si el resultado tiene datos (es decir, una fila fue devuelta)\nif (resultado.length > 0) {\n    // Guardamos los valores de 'esiga' y 'token' en variables de flujo\n    flow.set(\"esiga\", resultado[0].esiga);\n    flow.set(\"TOKEN\", resultado[0].token);\n    // Opcionalmente, podrías devolver los valores para usarlos en otro nodo\n    msg.payload = {\n        esiga: resultado[0].esiga,\n        token: resultado[0].token\n    };\n} else {\n    // Si no se obtuvo ninguna fila, puedes manejarlo aquí (por ejemplo, enviar un mensaje de error)\n    msg.payload = \"No se encontraron resultados\";\n}\n\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "d752e26e2fa1502d",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "SELECT CHECK",
        "func": "msg.topic= \"SELECT esiga, token FROM INT_B1.VSIGA ORDER BY fecha DESC LIMIT 1;\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 3580,
        "wires": [
            [
                "0d66b0c3b9aaa647"
            ]
        ]
    },
    {
        "id": "3d62ac23bb08044d",
        "type": "inject",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "props": [
            {
                "p": "TIMESTAMP",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2140,
        "y": 3620,
        "wires": [
            [
                "d752e26e2fa1502d"
            ]
        ]
    },
    {
        "id": "9cc458106a4ad05d",
        "type": "switch",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 2930,
        "y": 1900,
        "wires": [
            [
                "6aa290e2315038cd"
            ],
            [
                "8f123f28bcf4ebca"
            ],
            [
                "ee661bb3a0d3d404"
            ],
            [
                "8c7d840df136db29"
            ]
        ]
    },
    {
        "id": "941e8a9215e607c0",
        "type": "s7 out",
        "z": "6644fe4b3a079d9d",
        "endpoint": "af74a16878273c1f",
        "variable": "CORTEBOBIB1C",
        "name": "",
        "x": 3330,
        "y": 1840,
        "wires": []
    },
    {
        "id": "b0ad49553979dd76",
        "type": "s7 out",
        "z": "6644fe4b3a079d9d",
        "endpoint": "af74a16878273c1f",
        "variable": "CORTEDESBOB1C",
        "name": "",
        "x": 3360,
        "y": 1880,
        "wires": []
    },
    {
        "id": "aaeba62576483535",
        "type": "s7 out",
        "z": "6644fe4b3a079d9d",
        "endpoint": "af74a16878273c1f",
        "variable": "ONOFFB1C",
        "name": "",
        "x": 3350,
        "y": 1920,
        "wires": []
    },
    {
        "id": "0271ab1db1c679b7",
        "type": "s7 out",
        "z": "6644fe4b3a079d9d",
        "endpoint": "af74a16878273c1f",
        "variable": "VELOCIDADB1C",
        "name": "",
        "x": 3390,
        "y": 1960,
        "wires": []
    },
    {
        "id": "1cf3b81263658cb0",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "Response",
        "func": "// Obtener la consulta SQL de msg.topic\nvar query = msg.topic;\n\n// Identificar la tabla afectada a partir de la consulta SQL (en este caso, un INSERT)\nif (query.includes('ONOFFB1')) {\n    msg.payload = 3;  // Si la tabla es ONOFFB1, devolver 1\n} else if (query.includes('VELOCIDADB1')) {\n    msg.payload = 4;  // Si la tabla es VELOCIDADB1, devolver 2\n} else if (query.includes('CORTEDESBOB1')) {\n    msg.payload = 2;  // Si la tabla es CORTEDESBOB1, devolver 3\n} else if (query.includes('CORTEBOBIB1')) {\n    msg.payload = 1;  // Si la tabla es CORTEBOBIB1, devolver 4\n} else {\n    msg.payload = -1; // Si no es ninguna de las tablas mencionadas, devolver un valor por defecto\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2660,
        "y": 1900,
        "wires": [
            [
                "9cc458106a4ad05d"
            ]
        ]
    },
    {
        "id": "b8d241a474d72cff",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "REV3",
        "func": "flow.set(\"REV3\",msg.topic)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "6aa290e2315038cd",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1900,
        "wires": [
            [
                "941e8a9215e607c0"
            ]
        ]
    },
    {
        "id": "8f123f28bcf4ebca",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1900,
        "wires": [
            [
                "b0ad49553979dd76"
            ]
        ]
    },
    {
        "id": "ee661bb3a0d3d404",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1900,
        "wires": [
            [
                "aaeba62576483535"
            ]
        ]
    },
    {
        "id": "8c7d840df136db29",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1900,
        "wires": [
            [
                "0271ab1db1c679b7"
            ]
        ]
    },
    {
        "id": "e792f67eb21325f2",
        "type": "function",
        "z": "6644fe4b3a079d9d",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_B1\\.(\\w+)\\s*\\(/i);\n\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1920,
        "wires": [
            [
                "41ee1fc1fb8451d3"
            ]
        ]
    },
    {
        "id": "eca3c6765b3d2b02",
        "type": "delay",
        "z": "6644fe4b3a079d9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2180,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "a4e2693cc698a2e2",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------------*ESCRITURA EN GENERAL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2020,
        "y": 700,
        "wires": []
    },
    {
        "id": "27f787348ecefc3e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "22ded02acdd07d4e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = 'B2'\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "83bebdf0280131b5"
            ]
        ]
    },
    {
        "id": "83bebdf0280131b5",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 320,
        "wires": []
    },
    {
        "id": "6e53ccb61eaa3a40",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1220,
        "wires": [
            [
                "71e9812651808568"
            ]
        ]
    },
    {
        "id": "733cf1f61a117f8a",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1220,
        "wires": [
            [
                "3ab264c058aae3f9"
            ],
            [
                "6e53ccb61eaa3a40"
            ]
        ]
    },
    {
        "id": "71e9812651808568",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1220,
        "wires": [
            [
                "975a34b6e672521e"
            ],
            [
                "4615abf5700969ad"
            ]
        ]
    },
    {
        "id": "02dca760d49d9566",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LOOP DEVOLUCION O ERROR",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1160,
        "wires": [
            [
                "23616c14b5208117"
            ]
        ]
    },
    {
        "id": "23616c14b5208117",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<12){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "733cf1f61a117f8a"
            ]
        ]
    },
    {
        "id": "4615abf5700969ad",
        "type": "delay",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2600,
        "y": 1260,
        "wires": [
            [
                "23616c14b5208117"
            ]
        ]
    },
    {
        "id": "3ab264c058aae3f9",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1160,
        "wires": [
            [
                "2ad09f09d6c39016"
            ]
        ]
    },
    {
        "id": "41faaab1e16567ec",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Definir_MaxSensor",
        "func": "/*Este nodo declara la variable de flow MaxSensores para conocer\ncuantos sensores hay definidos en la máquina\n*/\nvar valor = Object.values(msg.payload);\nflow.set('MaxSensor',valor['0']);\nmsg.payload = flow.get('MaxSensor');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "c7e0a10fe7772f73",
                "08d3864fbe2e6c7b"
            ]
        ]
    },
    {
        "id": "c7e0a10fe7772f73",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "Numero de sensores1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 460,
        "wires": []
    },
    {
        "id": "ee38a16e3d061e34",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Buscar Numero de sensores",
        "func": "/*Este nodo consulta la tabla Sensores para saber cuántas\nentradas existen en la tabla, siendo cada una de ellas\nun sensor\n*/\n\nmsg.topic = \"SELECT COUNT(*) FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "79679ff3b3a8f3ba"
            ]
        ]
    },
    {
        "id": "87e49a25636d70bd",
        "type": "split",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2070,
        "y": 460,
        "wires": [
            [
                "41faaab1e16567ec"
            ]
        ]
    },
    {
        "id": "1c7126d44b7dcc4d",
        "type": "trigger",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1390,
        "y": 300,
        "wires": [
            [
                "22ded02acdd07d4e",
                "ee38a16e3d061e34"
            ]
        ]
    },
    {
        "id": "68679569d971eda8",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "FechaHora",
        "func": "/*Declara la valiable FechaHora que contiene la fecha y hora \nque será utilizada en el flow\n*/\nvar now = new Date(); \nvar año = now.getFullYear();\nvar mes = now.getMonth()+1; \nvar dia = now.getDate();\nvar hora = now.getHours();\nvar minuto = now.getMinutes();\nvar segundo = now.getSeconds(); \n\n\nif(mes.toString().length == 1) {\n    mes = '0'+mes;\n}\n\nif(dia.toString().length == 1) {\n    dia = '0'+dia;\n} \n\nif(hora.toString().length == 1) {\n    hora = '0'+hora;\n}\n\nif(minuto.toString().length == 1) {\n    minuto = '0'+minuto;\n    \n}\n\nif(segundo.toString().length == 1) {\n    segundo = '0'+segundo;\n} \n\n\nvar FechaHoralocal = año+'-'+mes+'-'+dia+' '+hora+':'+minuto+':'+segundo;\nflow.set('FechaHora',FechaHoralocal);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "122fff49ebb979ab",
        "type": "rbe",
        "z": "a40ecd06d6aa773b",
        "name": "Block unless value changes",
        "func": "deadband",
        "gap": "0",
        "start": "1",
        "inout": "out",
        "septopics": true,
        "property": "payload['ORDEN_LECTURA_general']",
        "topi": "topic",
        "x": 2460,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "18a5b2f8adb145ea",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "EscrituraErrorCiclo",
        "func": "/*Este nodo se encarga de notificar que ha habido un error\ndurante el proceso de escritura, resultando en que el PLC\nno recibió la orden de setear la variable OrdenLectura a 0 y\ntuvo que avanzar de manera automática tras esperar la orden\ndurante 60 segundos sin resultado\n*/\nflow.set('ERROR_CICLO', msg.payload['ERROR_CICLO']);\n\nif (flow.get('ERROR_CICLO') == 1) {\n    msg.topic = \"INSERT INTO \" + flow.get('DBname') + \".General (error_ciclo) VALUES ('\";\n    msg.topic += flow.get('ERROR_CICLO') + \"');\";\n\n    msg.topic = msg.topic;\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1280,
        "wires": [
            [
                "44f73b4efa1b9bce"
            ]
        ]
    },
    {
        "id": "fa39124e1b909b6d",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Cantidad de producciones?",
        "func": "flow.set('CantidadProducciones',msg.payload['CantidadProducciones']);\nmsg.payload = flow.get('CantidadProducciones');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "4b7bc4e686f022a5",
                "b301c38871ad0e6a"
            ]
        ]
    },
    {
        "id": "4b7bc4e686f022a5",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "CONSULTA3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 560,
        "wires": []
    },
    {
        "id": "ac8c4b97594cc26e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Buscar info los sensores",
        "func": "/*Este nodo realiza un Query para obtener la informacion\ndel nombre de cada sensor para declararlos como variables de\nflow y que puedan ser utilizados en el apartado de *Escritura en Sensores*\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "148cd17d59260efc"
            ]
        ]
    },
    {
        "id": "cf356f36f6a668fc",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Declaracion de sensores",
        "func": "// Este nodo guarda el nombre de cada sensor en una variable de flujo para ser utilizada en este flujo\n\n// Obtener el valor actual de 'i' de la variable de flujo (si 'i' no está definida, se asumirá inicialmente como 0)\nvar i = flow.get('i') || 0;\n\n// Obtener el array de sensores del mensaje de entrada\nvar array = Object.values(msg.payload);\n\n// Iterar a través de cada sensor hasta el número máximo de sensores definido en 'MaxSensor'\nfor (; i < flow.get('MaxSensor') && i < array.length; i++) {\n    // Guardar el objeto sensor actual en una variable de flujo con un nombre único\n    flow.set('Sensor' + (i + 1), array[i].Sensor);\n}\n\n// Guardar el valor actual de 'i' en la variable de flujo\nflow.set('i', i);\n\n// Devolver el mensaje de entrada sin cambios\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 520,
        "wires": [
            [
                "1b3f1607a8792a16",
                "a275b88d9f6a40a1"
            ]
        ]
    },
    {
        "id": "1b3f1607a8792a16",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "CONSULTA2(ARRAY) SENSORES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 520,
        "wires": []
    },
    {
        "id": "e887c7d23d3c08ca",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------------*DATOS DE MAQUINA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de cada máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 830,
        "y": 440,
        "wires": []
    },
    {
        "id": "e32a6842dc67c77f",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "Consultas de informacion necesaria para el programa",
        "info": "",
        "x": 1740,
        "y": 380,
        "wires": []
    },
    {
        "id": "4409f29ee58f966c",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "INSTRUCCIONES ------ POR FAVOR LEER PARA CORRECTA CONFIGURACIÓN DEL FLOW",
        "info": "INFORMACION PARA CONFIGURAR EL FLOW DE MAQUINA:\n\nCuando se quiera configurar este flow por primera vez el usuario debe editar 3 nodos:\n\n-`Definir_Maquina`: Se debe asignar a la variable Nombre el nombre que tenga nuestra máquina. (var Nombre = 'Nombre de la máquina')\n\n-`Definir_SQL`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo Connection. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro servidor de base de datos los campos Server, Port, Username y Password.\n\n-`Definir_PLC`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo PLC. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro PLC los campos Adress y Port bajo la pestaña Connection. Además, en la pestaña Variables debemos declarar la dirección y nombre de cada una de nuestras variables.\n\n`IMPORTANTE`: Recordar que el nombre que demos a las variables de sensores deben ser iguales que los otorgados a estos mismos sensores en las variables de sensor del flow `Añadir máquinas y sensores`",
        "x": 850,
        "y": 380,
        "wires": []
    },
    {
        "id": "04214f6a2ae3bddb",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "DEFINIR",
        "info": "",
        "x": 1960,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "82654af8ca7d57e6",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "DEFINIR",
        "info": "",
        "x": 1620,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "145968c3f895a4fa",
        "type": "delay",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "18a5b2f8adb145ea"
            ]
        ]
    },
    {
        "id": "b5055cd64f144b11",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Update Fin",
        "func": "msg.topic = \"UPDATE \" + flow.get('DBname') + \".General \";\nmsg.topic += \"SET Fin = '\" + flow.get('FechaHora') + \"';\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 920,
        "wires": [
            [
                "012d18884d40141c"
            ]
        ]
    },
    {
        "id": "786adef4c178e456",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "REVISAR DELAY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 900,
        "wires": []
    },
    {
        "id": "941cd031fb99b126",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "99a0b7ae489a7dee",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "5a7942948671d109",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "226ca89a90e8a751",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "5537a9087ce8f813",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "COMPROBACION ULTIMA FILA",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".General ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "81943925d61b1af5",
                "0b739fdb7cad6b79"
            ]
        ]
    },
    {
        "id": "64e9585ee6cb806e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "COMPARACION DE ARRAYS",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocal = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducido',arrayIntroducidolocal);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1100,
        "wires": [
            [
                "02dca760d49d9566"
            ]
        ]
    },
    {
        "id": "0b739fdb7cad6b79",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d8f2eb13e8531c6d",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "func": "\nvar signals = flow.get(\"Signals\");\n\nfor(var j =0;j <flow.get(\"NumSignals\");j++){\n    \n    flow.set(String(signals[j]),msg.payload[String(signals[j])]);\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 640,
        "wires": [
            [
                "f112aee535f17fdf"
            ]
        ]
    },
    {
        "id": "f112aee535f17fdf",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 640,
        "wires": []
    },
    {
        "id": "af1cabf0dbdab604",
        "type": "split",
        "z": "a40ecd06d6aa773b",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1940,
        "y": 760,
        "wires": [
            [
                "51aebf1fa503e09e"
            ]
        ]
    },
    {
        "id": "51aebf1fa503e09e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 760,
        "wires": [
            [
                "24ca2ea1a534e3ab"
            ]
        ]
    },
    {
        "id": "81b4716e7b2497a8",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "set variables auxiliares",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"Objeto\",msg.payload);\nflow.set(\"NumSignals\",Object.keys(flow.get(\"Objeto\")).length);\nflow.set(`j`,0);\nflow.set(\"PredefinedSignalsArray\",new Array(flow.get(\"NumSignals\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "af1cabf0dbdab604"
            ]
        ]
    },
    {
        "id": "24ca2ea1a534e3ab",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "ae47a9c2ec4f048d",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "CONSULTA4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1280,
        "wires": []
    },
    {
        "id": "08d3864fbe2e6c7b",
        "type": "link out",
        "z": "a40ecd06d6aa773b",
        "name": "Numero de Sensores",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 460,
        "wires": []
    },
    {
        "id": "a275b88d9f6a40a1",
        "type": "link out",
        "z": "a40ecd06d6aa773b",
        "name": "Info de los Sensores OBJECT",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 520,
        "wires": []
    },
    {
        "id": "b301c38871ad0e6a",
        "type": "link out",
        "z": "a40ecd06d6aa773b",
        "name": "Cantidad de Producciones Number",
        "mode": "link",
        "links": [],
        "x": 2595,
        "y": 560,
        "wires": []
    },
    {
        "id": "b53bbd52436c24de",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "REVISAR",
        "info": "UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1; : msg.topic : string[93]\n\"UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1;\"",
        "x": 1500,
        "y": 920,
        "wires": []
    },
    {
        "id": "3a1a8ea594b0eef8",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "INSERT EN GENERAL",
        "func": "var signals = flow.get(\"Signals\");\nvar objeto = flow.get(\"Objeto\");\nvar dbName = flow.get(\"DBname\");\nvar fechaHora = flow.get(\"FechaHora\");\n\n// Construir la consulta SQL de inserción\nvar topic = \"INSERT INTO `\" + dbName + \"`.`General` VALUES (\";\n\n// Agregar la fecha y hora\ntopic += \"'\" + fechaHora + \"', \";\n\n// Agregar la primera señal\nvar firstSignal = signals[0];\nvar firstValor = objeto[firstSignal];\nif (typeof firstValor === 'string') {\n    topic += \"'\" + firstValor + \"'\";\n} else {\n    topic += firstValor;\n}\n\n// Agregar coma\ntopic += \", \";\n\n// Iterar a través del resto de las señales y construir los valores de la inserción\nfor (var k = 1; k < signals.length; k++) {\n    var signal = signals[k];\n\n    // Obtener el valor correspondiente del objeto\n    var valor = objeto[signal];\n\n    // Agregar el valor a la consulta SQL\n    if (typeof valor === 'string') {\n        // Si es una cadena, agregar comillas simples alrededor del valor\n        topic += \"'\" + valor + \"'\";\n    } else {\n        // De lo contrario, agregar el valor directamente\n        topic += valor;\n    }\n\n    // Agregar coma si no es el último valor\n    if (k < signals.length - 1) {\n        topic += \", \";\n    }\n}\n\n// Cerrar paréntesis de la consulta SQL de inserción\ntopic += \")\";\n\n// return the SQL query\nreturn {\n    topic: topic\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 980,
        "wires": [
            [
                "786adef4c178e456",
                "20f1be56a574cfa3"
            ]
        ]
    },
    {
        "id": "d6eab31ad21e2746",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "OVERRIDE DE O.L POR SENSOR",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "beb80a1bacdc770e",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "info": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "x": 2490,
        "y": 1060,
        "wires": []
    },
    {
        "id": "975a34b6e672521e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "ORDEN_LECTURA_G(OK)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=2;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1220,
        "wires": [
            [
                "49ba401d43652b34",
                "0b578a4abe04950e"
            ]
        ]
    },
    {
        "id": "3004a0f5259f2934",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "REVISAR",
        "info": "",
        "x": 2360,
        "y": 380,
        "wires": []
    },
    {
        "id": "c755037bf5a26575",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3440,
        "y": 1060,
        "wires": []
    },
    {
        "id": "20fbcfe222a5cf6f",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "97abdfd2a3ea28b8",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1720,
        "wires": [
            [
                "6df0576177ed041a"
            ]
        ]
    },
    {
        "id": "aaceb7cf48aec855",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1720,
        "wires": [
            [
                "2ff1963c67ce5364"
            ],
            [
                "97abdfd2a3ea28b8"
            ]
        ]
    },
    {
        "id": "6df0576177ed041a",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1720,
        "wires": [
            [],
            [
                "78c27d606398f45f"
            ]
        ]
    },
    {
        "id": "5aaed7c175d9989a",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "i for loop",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1660,
        "wires": [
            [
                "31557060fd36ab3f"
            ]
        ]
    },
    {
        "id": "31557060fd36ab3f",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<4){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1720,
        "wires": [
            [
                "aaceb7cf48aec855"
            ]
        ]
    },
    {
        "id": "78c27d606398f45f",
        "type": "delay",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2590,
        "y": 1720,
        "wires": [
            [
                "31557060fd36ab3f"
            ]
        ]
    },
    {
        "id": "2ff1963c67ce5364",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1660,
        "wires": [
            [
                "dd7c01c80ee213b2"
            ]
        ]
    },
    {
        "id": "73a3591113da7928",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "d0a854f685130638",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "309cacb81f19ecbf",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "d28fb9e6f3b87a0e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "5ebd297af19f3b93",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Control ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            [
                "09da9902eb834733"
            ]
        ]
    },
    {
        "id": "d2ef566bfe81c7bf",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "ArraysParaComparar",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocalcontrol = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducidocontrol',arrayIntroducidolocalcontrol);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1600,
        "wires": [
            [
                "5aaed7c175d9989a"
            ]
        ]
    },
    {
        "id": "658b01756f2b8903",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1910,
        "y": 1640,
        "wires": [
            [
                "aaceb7cf48aec855"
            ]
        ]
    },
    {
        "id": "e3891c4665ae28ef",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------------*ESCRITURA EN CONTROL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2040,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6a5cee3941d322eb",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "ESCRITURA EN LA TABLA DE CONTROL",
        "func": "// Obtener el payload del mensaje\nlet data = msg.payload;\n\n// Verificar si el payload es un string y convertirlo a objeto JSON\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\n// Inicializar un array para almacenar las consultas SQL\nlet sqlQueries = [];\n\n// Iterar sobre cada clave en el objeto de datos\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        // Construir la consulta SQL con una tabla estática y claves como columnas\n        let query = `INSERT INTO INT_maquina1.control (${key}) VALUES (\"${value}\")`;\n        sqlQueries.push(query);\n    }\n}\n\n// Devolver las consultas generadas en el payload del mensaje\nmsg.topic = sqlQueries.join(';');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1480,
        "wires": [
            [
                "8babe9d2a8d83a50"
            ]
        ]
    },
    {
        "id": "7ab1c2f3f8cf5b69",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "-----------------ORDEN------------",
        "func": "// Función para reordenar las variables dentro del paquete\nfunction reordenarPaquete(paquete) {\n    // Define el orden deseado de las variables\n    const ordenDeseado = [\"1LOTE\", \"2RECETA\", \"3PROCESO\", \"4FASE\",  \"5OPERARIO\", \"zAVANCE_MANUAL\", \"zABORTAR\", flow.get(\"Adicional1\"), flow.get(\"Adicional2\"), flow.get(\"Adicional3\"), flow.get(\"Adicional4\"), flow.get(\"Adicional5\"), flow.get(\"Adicional5\"), flow.get(\"Adicional6\"), flow.get(\"Adicional7\"), flow.get(\"Adicional8\"), flow.get(\"Adicional9\"), flow.get(\"Adicional10\"), flow.get(\"Adicional11\"), flow.get(\"Adicional12\"), flow.get(\"Adicional13\"), flow.get(\"Adicional14\"), flow.get(\"Adicional15\"), \"zerror_ciclo\"];\n\n    // Crea un nuevo objeto para almacenar las variables reordenadas\n    let paqueteOrdenado = {};\n\n    // Itera sobre el orden deseado\n    ordenDeseado.forEach(variable => {\n        // Verifica si la variable está presente en el paquete recibido\n        if (paquete.hasOwnProperty(variable)) {\n            // Agrega la variable al paquete ordenado\n            paqueteOrdenado[variable] = paquete[variable];\n        }\n    });\n\n    // Devuelve el paquete ordenado\n    return paqueteOrdenado;\n}\n\n// Llama a la función de reordenamiento con el paquete recibido como argumento\nmsg.payload= reordenarPaquete(msg.payload);\n\n// Devuelve el mensaje con el paquete ordenado\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "81b4716e7b2497a8",
                "1c7126d44b7dcc4d",
                "ac8c4b97594cc26e",
                "fa39124e1b909b6d",
                "68679569d971eda8",
                "145968c3f895a4fa",
                "d8f2eb13e8531c6d",
                "4334dfc236ee956d",
                "01f478e3adf348e6"
            ]
        ]
    },
    {
        "id": "e64437b776ca4088",
        "type": "json",
        "z": "a40ecd06d6aa773b",
        "name": "Envio del señales de control a la BDD",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 1480,
        "wires": [
            [
                "6a5cee3941d322eb"
            ]
        ]
    },
    {
        "id": "8babe9d2a8d83a50",
        "type": "split",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2050,
        "y": 1440,
        "wires": [
            [
                "533eba79c2782e22"
            ]
        ]
    },
    {
        "id": "f67cfbc55b05f57e",
        "type": "json",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2230,
        "y": 1440,
        "wires": [
            [
                "6455fb517126537a",
                "2c62b083c71eeeb8"
            ]
        ]
    },
    {
        "id": "2c62b083c71eeeb8",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "REV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 1420,
        "wires": []
    },
    {
        "id": "33e18370efb87003",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "ORDEN_LECTURA_G(KO)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=3;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1160,
        "wires": [
            [
                "49ba401d43652b34"
            ]
        ]
    },
    {
        "id": "4313e40e4adf9ac4",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------ENTRADAS SIEMENS PLC------------------------------------------------------------------",
        "info": "\nEMAIL: \"~+TIEMPO,102.00;LITROS,204.00;HORAS:,1580.00\"",
        "x": 420,
        "y": 900,
        "wires": []
    },
    {
        "id": "9a823f64459414fa",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "Inserciones de sensores con O.L Independiente",
        "info": "",
        "x": 1840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "553be66941c99697",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "Inserciones de sensores con O.L General de Sensores",
        "info": "",
        "x": 2500,
        "y": 1800,
        "wires": []
    },
    {
        "id": "299777b194e953d9",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1610,
        "y": 2060,
        "wires": [
            [
                "efa369a006f2c771"
            ]
        ]
    },
    {
        "id": "efa369a006f2c771",
        "type": "json",
        "z": "a40ecd06d6aa773b",
        "name": "ORDEN_LECTURA_tipo = \"2\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2470,
        "y": 2060,
        "wires": [
            [
                "d31b78d26f480316",
                "e2f5d6a57cfab6a8"
            ]
        ]
    },
    {
        "id": "d31b78d26f480316",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO int_maquina1.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1980,
        "wires": [
            [
                "4b938c7632628d34"
            ]
        ]
    },
    {
        "id": "4b938c7632628d34",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1920,
        "wires": [
            [
                "05f202c91d4f793b"
            ]
        ]
    },
    {
        "id": "05f202c91d4f793b",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "CHECK O.L.",
        "func": "\nif (flow.get(\"ORDEN_LECTURA_sensores\") !== 1) {\n    node.warn('La orden de Lectura General de Sensores está apagada');\n} else {\n    \n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1860,
        "wires": [
            [
                "045f3c9c689c9dbd"
            ]
        ]
    },
    {
        "id": "2e45d5565afb795d",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "debug sensores ind",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "e2f5d6a57cfab6a8",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "debug sensores gnral",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 1980,
        "wires": []
    },
    {
        "id": "70f85731a837a93e",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "property": "TIPO_LECTURA_Sensores",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1350,
        "y": 1960,
        "wires": [
            [
                "6c8506dd2fb5fd46"
            ],
            [
                "299777b194e953d9"
            ],
            [
                "173e8c0884b2d399"
            ]
        ]
    },
    {
        "id": "b2feb1e3ab506ac8",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "set O.L. EMAIL S1C",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "66c1f52294bd6535",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "b2feb1e3ab506ac8"
            ]
        ]
    },
    {
        "id": "3ff85cc46fca9383",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "set O.L. EMAIL D1C",
        "func": "\nflow.set(\"D1C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4e0a110944bc038e",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "3ff85cc46fca9383"
            ]
        ]
    },
    {
        "id": "f2cbd2f5918ad145",
        "type": "template",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "5df0d5b7ac11e705"
            ]
        ]
    },
    {
        "id": "5df0d5b7ac11e705",
        "type": "rbe",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "b2feb1e3ab506ac8"
            ]
        ]
    },
    {
        "id": "27879d7e2c3c4897",
        "type": "websocket in",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "f2cbd2f5918ad145"
            ]
        ]
    },
    {
        "id": "35c7d9924fa56acb",
        "type": "template",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "c515c2cbd424116c"
            ]
        ]
    },
    {
        "id": "c515c2cbd424116c",
        "type": "rbe",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "3ff85cc46fca9383"
            ]
        ]
    },
    {
        "id": "180a9530724b271b",
        "type": "websocket in",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "35c7d9924fa56acb"
            ]
        ]
    },
    {
        "id": "0b578a4abe04950e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "¿O.L EMAIL?",
        "func": "if (flow.get(\"CONTROL_EMAIL\") === 1) {\n   \n    // Continuar el flujo si el valor es 1\n    msg.payload =1 \n return msg;\n \n} else {\n    // Bloquear ejecución enviando un mensaje de error\n    node.error(\"EMAIL EN PROCESO\", msg);\n    return null; // Detener el flujo\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3660,
        "y": 520,
        "wires": [
            [
                "deea5acc48561644"
            ]
        ]
    },
    {
        "id": "21e0f2592ab920ec",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "3ff85cc46fca9383"
            ]
        ]
    },
    {
        "id": "88a0bab65cbf6ea6",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "b2feb1e3ab506ac8"
            ]
        ]
    },
    {
        "id": "173e8c0884b2d399",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "BLOCK \"0\"",
        "func": "msg.payload=node.warn(\"Lectura de Sensores Apagada\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "34725cfc61749c7d",
        "type": "split",
        "z": "a40ecd06d6aa773b",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1660,
        "y": 1380,
        "wires": [
            [
                "cc6e04c8d2fb8ddc"
            ]
        ]
    },
    {
        "id": "cc6e04c8d2fb8ddc",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Declaracion Señales DE CONTROL",
        "func": "var CSignals = msg.signals;\n\nvar CSignalsLocal = flow.get(\"ControlSignalsArray\");\n\nCSignalsLocal[flow.get('j1')]=CSignals;\n\nflow.set('j1',flow.get('j1')+1);\n\nif(flow.get(\"j1\")==flow.get(\"NumSignalsControl\")){\n    flow.set(\"CSignals\",CSignalsLocal);\n}\n\nmsg.payload = msg.CSignals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1380,
        "wires": [
            [
                "983612c855b066ab"
            ]
        ]
    },
    {
        "id": "543d3e826650a51d",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "set variables de control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j1`,0);\nflow.set(\"ControlSignalsArray\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1380,
        "wires": [
            [
                "34725cfc61749c7d"
            ]
        ]
    },
    {
        "id": "983612c855b066ab",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j1\") == flow.get(\"NumSignalsControl\")) {\n    msg.payload = flow.get(\"ObjetoControl\");\n\n    var signals = flow.get(\"CSignals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignalsControl\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "2707a3d53d315d53",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "set  TIPO O.L. SENSORES (GENERAL) ",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3eeb91f5b148791c",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 80,
        "wires": [
            [
                "2707a3d53d315d53"
            ]
        ]
    },
    {
        "id": "223af025ec5cf7c6",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "set O.L. GENERAL",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6fd3c0beff5613c8",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "223af025ec5cf7c6"
            ]
        ]
    },
    {
        "id": "9c9c9584321e9eb1",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "set  TIPO O.L. SENSORES (INDIVIDUAL)",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "39175829bc89428a",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "9c9c9584321e9eb1"
            ]
        ]
    },
    {
        "id": "533eba79c2782e22",
        "type": "split",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2190,
        "y": 1400,
        "wires": [
            [
                "f67cfbc55b05f57e"
            ]
        ]
    },
    {
        "id": "cd94d4067df82abb",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SELECT LAST ROW",
        "func": "var controlemail= flow.get(\"CONTROL_EMAIL\");\nif (controlemail===1){\nmsg.topic= \"SELECT * FROM INT_\"+flow.get (\"Maquina\")+\".General ORDER BY 'FechaHora' DESC LIMIT 1;\";\nreturn msg;}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 980,
        "wires": [
            [
                "e9d84c77d22fbc52"
            ]
        ]
    },
    {
        "id": "3efb705972524e3d",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "DEFINIR ADICIONALES",
        "props": [
            {
                "p": "Adicional1",
                "v": "MATRICULA",
                "vt": "str"
            },
            {
                "p": "Adicional3",
                "v": "CONDUCTOR",
                "vt": "str"
            },
            {
                "p": "Adicional4",
                "v": "PROVEEDOR",
                "vt": "str"
            },
            {
                "p": "Adicional5",
                "v": "LITROS",
                "vt": "str"
            },
            {
                "p": "Adicional6",
                "v": "DESTINO",
                "vt": "str"
            },
            {
                "p": "Adicional7",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional8",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional9",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional10",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional11",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional12",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional13",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional14",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional15",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 670,
        "y": 640,
        "wires": [
            [
                "826d6328ca2635b8"
            ]
        ]
    },
    {
        "id": "826d6328ca2635b8",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"Adicional1\", msg.Adicional1);\nflow.set(\"Adicional2\", msg.Adicional2);\nflow.set(\"Adicional3\", msg.Adicional3);\nflow.set(\"Adicional4\", msg.Adicional4);\nflow.set(\"Adicional5\", msg.Adicional5);\nflow.set(\"Adicional6\", msg.Adicional6);\nflow.set(\"Adicional7\", msg.Adicional7);\nflow.set(\"Adicional8\", msg.Adicional8);\nflow.set(\"Adicional9\", msg.Adicional9);\nflow.set(\"Adicional10\", msg.Adicional10);\nflow.set(\"Adicional11\", msg.Adicional11);\nflow.set(\"Adicional12\", msg.Adicional12);\nflow.set(\"Adicional13\", msg.Adicional13);\nflow.set(\"Adicional14\", msg.Adicional14);\nflow.set(\"Adicional15\", msg.Adicional15);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "6c8506dd2fb5fd46",
        "type": "json",
        "z": "a40ecd06d6aa773b",
        "name": "ORDEN_LECTURA_tipo = \"1\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1650,
        "y": 1840,
        "wires": [
            [
                "d5b00947cc8cf62e"
            ]
        ]
    },
    {
        "id": "d5b00947cc8cf62e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO INT_B2.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1728.183349609375,
        "y": 1915.88330078125,
        "wires": [
            [
                "789cb319987410a4"
            ]
        ]
    },
    {
        "id": "da172ef2377f6fda",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_B2\\.(\\w+)\\s*\\(/i);\n\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1880,
        "wires": [
            [
                "17faffb8fbc03c44",
                "667370fb56bebd90"
            ]
        ]
    },
    {
        "id": "789cb319987410a4",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1868.183349609375,
        "y": 2015.88330078125,
        "wires": [
            [
                "da172ef2377f6fda"
            ]
        ]
    },
    {
        "id": "1ecc164e78f6092e",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1720,
        "y": 2880,
        "wires": [
            [
                "d54ddfbf060ede5e"
            ]
        ]
    },
    {
        "id": "b9267e99a2685d1b",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1960,
        "wires": [
            [
                "db5fba59f00b71a0"
            ]
        ]
    },
    {
        "id": "deea5acc48561644",
        "type": "json",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 4310,
        "y": 200,
        "wires": [
            [
                "628934ded08a2b7b"
            ]
        ]
    },
    {
        "id": "628934ded08a2b7b",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SELECT",
        "func": "var Lote = flow.get(\"1LOTE\");\nvar Maquina = flow.get(\"DBname\");\n\n// Asegurarse de que Lote se concatene como string con comillas simples\nvar query = \"SELECT 4FASE, LITROS, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM \" + Maquina + \".General WHERE 1LOTE = '\" + Lote + \"';\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4440,
        "y": 200,
        "wires": [
            [
                "a567d497c33e80c6"
            ]
        ]
    },
    {
        "id": "de8c661a7e032c39",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Template Correo E ",
        "func": "// Recupera el contenido del payload\nlet content = flow.get(\"CONTENIDO_EMAIL\");\nlet RECETA = flow.get(\"RECETA\") || \"No disponible\";\nvar LOTE = flow.get(\"1LOTE\") || \"No disponible\";\nvar FASE = flow.get(\"4FASE\") || \"No disponible\";\nvar OPERARIO = flow.get(\"5OPERARIO\") || \"No disponible\";\nvar PROCESO = flow.get(\"3PROCESO\") || \"No disponible\";\nvar PROVEEDOR = flow.get(\"PROVEEDOR\") || \"No disponible\";\nvar MATRICULA = flow.get(\"MATRICULA\") || \"No disponible\";\nvar CONDUCTOR = flow.get(\"CONDUCTOR\") || \"No disponible\";\nvar DESTINO = flow.get(\"DESTINO\") || \"No disponible\";\nvar Registro = msg.payload;  // El payload ya debe contener el JSON parseado.\n\n// Verifica que el contenido de Registro sea un array y construye una tabla\nlet registroTable = \"\";\n\nif (Array.isArray(Registro)) {\n    registroTable = `\n        <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse;\">\n            <thead>\n                <tr>\n                    <th>FASE</th>\n                    <th>LITROS</th>\n                    <th>Fecha y Hora</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${Registro.map(reg => `\n                    <tr>\n                        <td>${reg['4FASE'] || \"No disponible\"}</td>\n                        <td>${reg.LITROS}</td>\n                        <td>${reg.Fechahora}</td>\n                    </tr>`).join('')}\n            </tbody>\n        </table>\n    `;\n} else {\n    registroTable = `<p>No se encontraron registros válidos.</p>`;\n}\n\n// Crea la lista HTML a partir de las partes de content\nlet items = content.split(';').map(item => `<li>${item.trim()}</li>`).join('\\n');\n\n// Arma el contenido HTML completo con la tabla\nmsg.payload = `\n    <html>\n        <body>\n            <h1>Alerta de Trazabilidad:</h1>\n            <p>En este documento puede encontrar los datos de la línea: ${flow.get(\"Maquina\")}</p>\n            <ul>\n                <li>Lote: ${LOTE}</li>\n                <li>Proceso: ${PROCESO}</li>\n                <li>Proveedor: ${PROVEEDOR}</li>\n                <li>Matricula: ${MATRICULA}</li>\n                <li>Conductor: ${CONDUCTOR}</li>\n                <li>Operario: ${OPERARIO}</li>\n                <li>Destino: ${DESTINO}</li>\n            </ul>\n            <h2>Registros:</h2>\n            ${registroTable}\n            <img src=\"cid:miImagen\" alt=\"Imagen Incrustada\" />\n        </body>\n    </html>\n`;\n\n// Especifica que se trata de contenido HTML\nmsg.html = msg.payload;\n\n// Configura el mensaje\nmsg.to = \"breixoherrera1@gmail.com, jadeudero@grupointegra.com.es\";\nmsg.topic = \"Datos de la línea Recepción. Lote:\" +flow.get(\"1LOTE\");\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\", // Cambia esto por el nombre de tu imagen\n        path: \"/home/intboxes/Documents/Logo.jpg\", // Cambia esto por la ruta a tu imagen\n        cid: \"miImagen\"  // cid debe coincidir con el del HTML\n    }\n];\n\n// Envía el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5070,
        "y": 200,
        "wires": [
            [
                "58a3e053697c341b",
                "808bc0a2c987f6f7"
            ]
        ]
    },
    {
        "id": "c44187092cf28b9e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Conversion a JSON String",
        "func": "// Verifica si el payload es un string y lo convierte a JSON\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (error) {\n        node.error(\"El payload no es un JSON válido: \" + error);\n        return;\n    }\n}\n\n// Retorna el mensaje con el payload convertido\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4840,
        "y": 200,
        "wires": [
            [
                "de8c661a7e032c39"
            ]
        ]
    },
    {
        "id": "068e26eb92344851",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "35b0387e062da000"
            ]
        ]
    },
    {
        "id": "35b0387e062da000",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "ENVIO DE EMAIL",
        "func": "\nflow.set(\"CONTROL_EMAIL\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "8095f933a20615bf",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "----------------------------------------NOTIFICACIONES----------------------------------------",
        "info": "",
        "x": 4720,
        "y": 40,
        "wires": []
    },
    {
        "id": "5b74743ea07bb0e5",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "NOTIFICACIONES DE TRAZABILIDAD POR EMAIL.",
        "info": "",
        "x": 4680,
        "y": 120,
        "wires": []
    },
    {
        "id": "808bc0a2c987f6f7",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "CONFIRMACION AL PLC",
        "func": "msg.payload = 2;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5090,
        "y": 240,
        "wires": [
            [
                "a69915cec2bd4c1d"
            ]
        ]
    },
    {
        "id": "703d5b04f0b04be5",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "ORDEN DE LECTURA GENERAL BLOCK",
        "func": "// Obtener los valores de las variables de flujo\nconst ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nconst latenciaOrdenLectura = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 1\nif (ordenLectura === 1) {\n    // Si ORDEN_LECTURA_general es 1, verificar la latencia\n    if (latenciaOrdenLectura === 1) {\n        // Si la latencia es 1, bloquear la ejecución\n        node.error(\"LATENCIA_ORDEN_LECTURA_general es 1, bloqueo de flujo\", msg);\n        return null; // Detener el flujo\n    } else {\n        // Si la latencia no es 1 (Es = 0), continuar el flujo\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n        return msg;\n    }\n} else {\n    // Si ORDEN_LECTURA_general no es 1, bloquear la ejecución\n    node.error(\"ORDEN_LECTURA_general no es 1, bloqueo de flujo\", msg);\n    return null; // Detener el flujo\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 860,
        "wires": [
            [
                "3a1a8ea594b0eef8"
            ]
        ]
    },
    {
        "id": "4334dfc236ee956d",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Check Latencia",
        "func": "// Obtener el valor de ORDEN_LECTURA_general\nvar ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 0 o 2\nif (ordenLectura === 0 || ordenLectura === 2) {\n    // Si es 0 o 2, establecer la latencia en el valor actual de ORDEN_LECTURA_general\n    flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 0);\n    return msg;\n}else{\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 860,
        "wires": [
            [
                "703d5b04f0b04be5"
            ]
        ]
    },
    {
        "id": "0c2feaf33b4edb44",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------------*GESTION DE TABLA DE LOTES*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2080,
        "y": 2800,
        "wires": []
    },
    {
        "id": "72dfe8400e41a36c",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "--------------------------------------------------------------------OVERRIDES------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 40,
        "wires": []
    },
    {
        "id": "66d069f11deaf6f4",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "ENVÍO Y CONFIRMACIÓN",
        "info": "",
        "x": 5390,
        "y": 120,
        "wires": []
    },
    {
        "id": "5e5d035f84638d06",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "ACTIVACIÓN DE ENVÍO DE NOTIFICACIONES",
        "info": "",
        "x": 3680,
        "y": 420,
        "wires": []
    },
    {
        "id": "c3cfc6783a830bcf",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "-------------------------DECLARACIÓN DE ADICIONALES GENERALES---------------------------------",
        "info": "",
        "x": 840,
        "y": 580,
        "wires": []
    },
    {
        "id": "bf6098effa2ba06d",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1020,
        "wires": []
    },
    {
        "id": "308d168e5d69bb7b",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1140,
        "wires": []
    },
    {
        "id": "fcbab85b1ee7e1b8",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1320,
        "wires": []
    },
    {
        "id": "9ab160bac48f628a",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1460,
        "wires": []
    },
    {
        "id": "82a640b7e441f5a1",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1900,
        "wires": []
    },
    {
        "id": "bf472ab9d078f193",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 2020,
        "wires": []
    },
    {
        "id": "2926ca4c5e3d10dd",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 2280,
        "wires": [
            [
                "48c6f306dd079000"
            ],
            [
                "7b2e88fdc8e19a67"
            ]
        ]
    },
    {
        "id": "e040bc789d6caeda",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Escritura en Tabla de Sensor",
        "func": "/*Este nodo prepara el Query para almacenar la información\ndel sensor proveniente del PLC en su lugar correspondiente.\nEsto solo se procesa si la orden de lectura de este sensor\nse encuentra activa\n*/\nmsg.payload = flow.get('Objeto');\n\nif (flow.get('NumSensor') <= flow.get('MaxSensor') && msg.payload[ + flow.get('Sensor' + flow.get('NumSensor'))] == true) {\n    var tableName = flow.get('Sensor' + flow.get('NumSensor'));\n    var datetime = flow.get('FechaHora');\n    var value = msg.payload[flow.get('NumSensor')];\n    var dbName = flow.get('DBname');\n      \n   var topic = \"INSERT INTO \" + dbName + \".\" + tableName + \" (FechaHora, Unidad) VALUES ('\" + datetime + \"', '\" + value + \"');\";\n   \n\n    msg.queryCompresion = \"SELECT Valor FROM \" + flow.get('DBname') + \".\" + tableName + \" ORDER BY FechaHora DESC LIMIT 1;\";\n\n    msg.topic = topic;\n    flow.set(\"queryValor\", msg.topic);\n    msg.payload = 0;\n    return msg;\n} else {\n    msg.payload = 1;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 2240,
        "wires": [
            [
                "8c3094e17039838f",
                "305bf2cf589b81ec",
                "a1d02f452eadf053"
            ]
        ]
    },
    {
        "id": "305bf2cf589b81ec",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "c96db5ac25d5903b",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Inicializacion del loop",
        "func": "/*Este nodo inicializa las variables necesarias para ciclar\nla información de cada uno de los sensores y escribirla en \nla tabla correspondiente en la BD de la máquina\n*/\n\nflow.set('NumSensor',1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2200,
        "wires": [
            [
                "e040bc789d6caeda",
                "36c8dfa5bfe2c547"
            ]
        ]
    },
    {
        "id": "8c3094e17039838f",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 2380,
        "wires": [
            [
                "9f6b6e8854df51b8"
            ],
            [
                "7b2e88fdc8e19a67"
            ]
        ]
    },
    {
        "id": "7b2e88fdc8e19a67",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "loop",
        "func": "if(flow.get('NumSensor')<flow.get('MaxSensor')){\n    flow.set('NumSensor',flow.get('NumSensor')+1);\n    msg.payload = flow.get('NumSensor');\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 2380,
        "wires": [
            [
                "e040bc789d6caeda"
            ]
        ]
    },
    {
        "id": "526a3bd2429a201e",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------------*ESCRITURA EN LAS TABLAS DE SENSOR Y ASIGNACIÓN DE ID*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "01f478e3adf348e6",
        "type": "delay",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 2200,
        "wires": [
            [
                "c96db5ac25d5903b"
            ]
        ]
    },
    {
        "id": "a1d02f452eadf053",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "19471a5cf9387224",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Check Valores iguales",
        "func": "//recuperamos el valor de la ultima medida del sensor y lo comparamos con el que estamos a punto de introducir\n//si estos valores coinciden, en lugar de seguir con la escritura saltamos una iteracion en el loop\nmsg.payload = msg.payload[0];\nmsg.payload = msg.payload[\"Valor\"];\nflow.set(\"ValorPrevio\", msg.payload);\n\nmsg.payload = flow.get(\"Objeto\");\nvar sensorKey = 'Sensor' + flow.get('NumSensor');\nmsg.payload = msg.payload[sensorKey];\nflow.set(\"ValorActual\", msg.payload);\n\nif (flow.get(\"ValorPrevio\") !== flow.get(\"ValorActual\")) {\n    msg.topic = \"INSERT INTO \" + flow.get(\"DBname\") + \".Tabla (Valor) VALUES ('\" + flow.get(\"ValorActual\") + \"');\";\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 2220,
        "wires": [
            [
                "2926ca4c5e3d10dd",
                "2e189cf61957dbf3"
            ]
        ]
    },
    {
        "id": "9f6b6e8854df51b8",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Bypass compresion",
        "func": "if (flow.get(\"ModoCompresion\") == 1) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2380,
        "wires": [
            [
                "a62119c44fcc0424"
            ]
        ]
    },
    {
        "id": "a62119c44fcc0424",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2470,
        "y": 2380,
        "wires": [
            [
                "682b1ffc1ac438f2"
            ],
            [
                "48c6f306dd079000"
            ]
        ]
    },
    {
        "id": "2e189cf61957dbf3",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "COMPRESSION",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 2220,
        "wires": []
    },
    {
        "id": "36c8dfa5bfe2c547",
        "type": "link out",
        "z": "a40ecd06d6aa773b",
        "name": "INFO SENSOR TEXT",
        "mode": "link",
        "links": [],
        "x": 2215,
        "y": 2200,
        "wires": []
    },
    {
        "id": "6fc6906aa5d94e92",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 730,
        "y": 1240,
        "wires": [
            [
                "519e0d606448a24c"
            ]
        ]
    },
    {
        "id": "519e0d606448a24c",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"ORDEN_LECTURA_general\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "94f2c7fe25edbaed",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1030,
        "y": 1320,
        "wires": [
            [
                "0cd7d2f3f4eb1467"
            ]
        ]
    },
    {
        "id": "0cd7d2f3f4eb1467",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"CONTROL_EMAIL\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "3d204ed384cc880c",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "POR FASE",
        "func": "// Obtener el estado de la variable '4FASE' del flow\nvar estado = flow.get(\"4FASE\");\n\n// Obtener el estado previo del bloqueo (si ya fue detectado)\nvar Latencia = flow.get(\"bloqueado\") || false;\n\nif (estado === \"Preparacion a reposo\" && !Latencia) {\n    // Si se encuentra \"Preparacion a reposo\" y no está bloqueado, enviar msg.payload\n    msg.payload = \"Estado detectado: Preparacion a reposo\";\n    \n    // Bloquear el envío de más mensajes\n    flow.set(\"bloqueado\", true);\n    \n    return msg;\n} else if (estado !== \"Preparacion a reposo\" && Latencia) {\n    // Si el estado ya no es \"Preparacion a reposo\", desbloquear el envío\n    flow.set(\"bloqueado\", false);\n}\n\nreturn null; // No se envía ningún mensaje si no cumple las condiciones\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3650,
        "y": 620,
        "wires": [
            [
                "deea5acc48561644"
            ]
        ]
    },
    {
        "id": "a6b5581f95a91df0",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3400,
        "y": 480,
        "wires": [
            [
                "3d204ed384cc880c",
                "99eda4e2aa953554"
            ]
        ]
    },
    {
        "id": "99eda4e2aa953554",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "function 99",
        "func": "flow.set(\"bloqueado\", false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3390,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ebdfbf1dfa9932a6",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------------RESPUESTA ERROR DE CICLO--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2070,
        "y": 2580,
        "wires": []
    },
    {
        "id": "728d7c87e951a243",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "COMPROBACIÓN DE ERROR DE CICLO",
        "func": "// Aqui se revisa si el error de ciclo e encuentra activo cuando no se está leyendo y se pone a 0 en el PLC.\nvar errorciclo = flow.get(\"zerror_ciclo\");\nvar OL = flow.get(\"ORDEN_LECTURA_general\");\nif(errorciclo === 1 && OL === 0 ){\nmsg.payload = 1\n}else{\nreturn msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 2660,
        "wires": [
            [
                "57dda64c3d99a3c7"
            ]
        ]
    },
    {
        "id": "bc4d0b49381ae57c",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Modo Compresion",
        "func": "flow.set(\"ModoCompresion\",msg.payload);\nmsg.payload = \"Modo Compresion Status=\"+flow.get(\"ModoCompresion\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2480,
        "wires": [
            [
                "cfee687425517380"
            ]
        ]
    },
    {
        "id": "9d08dc230ef4acd9",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1670,
        "y": 2460,
        "wires": [
            [
                "bc4d0b49381ae57c"
            ]
        ]
    },
    {
        "id": "412009668cbe2edb",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1670,
        "y": 2500,
        "wires": [
            [
                "bc4d0b49381ae57c"
            ]
        ]
    },
    {
        "id": "cfee687425517380",
        "type": "debug",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 2480,
        "wires": []
    },
    {
        "id": "d54ddfbf060ede5e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "ORDEN_LECTURA_LOTE(ok)",
        "func": "// Obtener las variables necesarias de flujo\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\nvar OPERARIO = flow.get(\"5OPERARIO\"); // Asegurarse de que \"5OPERARIO\" es una variable válida de flujo\nvar LOTEC = flow.get(\"LOTEC\");\n\n// Reset de latencia si LOTEC es 0, 2 o 4\nif (LOTEC === 0 || LOTEC === 2 || LOTEC === 4) {  \n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 0);\n    latencia = 0;  // Actualizamos la latencia para asegurarnos de que el cambio se refleje\n}\n\n// Orden para iniciar el lote (LOTEC = 1)\nif (LOTEC === 0 && latencia === 0) {\n    msg.payload = 2;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de inicio del lote y el operario\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET FechaInicioLote = CURRENT_TIMESTAMP, \n                     5OPERARIO = '${OPERARIO}' \n                 ORDER BY FechaInicioLote DESC \n                 LIMIT 1;`;\n}\n\n// Orden para finalizar el lote (LOTEC = 3)\nif (LOTEC === 3 && latencia === 0) {\n    msg.payload = 4;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de finalización del lote\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET FechaFinLote = CURRENT_TIMESTAMP \n                 ORDER BY FechaInicioLote DESC \n                 LIMIT 1;`;\n}\n\n// Devolver el mensaje con el payload y el topic\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2880,
        "wires": [
            [
                "345a719bc2e7d001"
            ]
        ]
    },
    {
        "id": "ceb78573424162a9",
        "type": "s7 in",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "endpoint": "",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "7ab1c2f3f8cf5b69",
                "728d7c87e951a243"
            ]
        ]
    },
    {
        "id": "1a1d750a2681eb5a",
        "type": "s7 in",
        "z": "a40ecd06d6aa773b",
        "endpoint": "4dd47afaed49386d",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1380,
        "wires": [
            [
                "543d3e826650a51d"
            ]
        ]
    },
    {
        "id": "49ba401d43652b34",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 3750,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a69915cec2bd4c1d",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "",
        "variable": "CONTROL_EMAIL",
        "name": "",
        "x": 5370,
        "y": 240,
        "wires": []
    },
    {
        "id": "57dda64c3d99a3c7",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "endpoint": "",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 2110,
        "y": 2660,
        "wires": []
    },
    {
        "id": "58a3e053697c341b",
        "type": "e-mail",
        "z": "a40ecd06d6aa773b",
        "server": "grupointegra-com-es.correoseguro.dinaserver.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Envio Email",
        "x": 5390,
        "y": 200,
        "wires": []
    },
    {
        "id": "79679ff3b3a8f3ba",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 460,
        "wires": [
            [
                "87e49a25636d70bd",
                "ac8c4b97594cc26e"
            ]
        ]
    },
    {
        "id": "148cd17d59260efc",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 520,
        "wires": [
            [
                "cf356f36f6a668fc"
            ]
        ]
    },
    {
        "id": "012d18884d40141c",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 920,
        "wires": [
            [
                "3a1a8ea594b0eef8"
            ]
        ]
    },
    {
        "id": "81943925d61b1af5",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 1040,
        "wires": [
            [
                "64e9585ee6cb806e"
            ]
        ]
    },
    {
        "id": "2ad09f09d6c39016",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1160,
        "wires": [
            [
                "33e18370efb87003"
            ]
        ]
    },
    {
        "id": "44f73b4efa1b9bce",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1280,
        "wires": [
            [
                "ae47a9c2ec4f048d"
            ]
        ]
    },
    {
        "id": "09da9902eb834733",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1900,
        "y": 1540,
        "wires": [
            [
                "d2ef566bfe81c7bf"
            ]
        ]
    },
    {
        "id": "dd7c01c80ee213b2",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "6455fb517126537a",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1500,
        "wires": [
            [
                "5ebd297af19f3b93"
            ]
        ]
    },
    {
        "id": "20f1be56a574cfa3",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1940,
        "y": 980,
        "wires": [
            [
                "5537a9087ce8f813",
                "cd94d4067df82abb"
            ]
        ]
    },
    {
        "id": "db5fba59f00b71a0",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2160,
        "y": 1900,
        "wires": [
            [
                "10ee47de746a649d"
            ]
        ]
    },
    {
        "id": "045f3c9c689c9dbd",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2660,
        "y": 1860,
        "wires": [
            [
                "e2f5d6a57cfab6a8"
            ]
        ]
    },
    {
        "id": "e9d84c77d22fbc52",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2500,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "345a719bc2e7d001",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2400,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "a567d497c33e80c6",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4620,
        "y": 200,
        "wires": [
            [
                "c44187092cf28b9e"
            ]
        ]
    },
    {
        "id": "48c6f306dd079000",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2970,
        "y": 2380,
        "wires": [
            [
                "7b2e88fdc8e19a67"
            ]
        ]
    },
    {
        "id": "682b1ffc1ac438f2",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2570,
        "y": 2260,
        "wires": [
            [
                "19471a5cf9387224"
            ]
        ]
    },
    {
        "id": "2ec062c7828301ef",
        "type": "s7 in",
        "z": "a40ecd06d6aa773b",
        "endpoint": "1cbe9a2b6d305765",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 140,
        "y": 1960,
        "wires": [
            [
                "70f85731a837a93e",
                "1c7126d44b7dcc4d",
                "81b4716e7b2497a8",
                "6c8e0f6f87c3fa21",
                "fc574075d5030047",
                "6cd351d3f1dd4466",
                "3392483ab2102161",
                "40a08be9cceaec16"
            ]
        ]
    },
    {
        "id": "93a450e7df6d17b8",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------------*ENVÍO A SIGA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2020,
        "y": 3020,
        "wires": []
    },
    {
        "id": "6cd351d3f1dd4466",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "CHECK ON/OFF",
        "func": "var onoff = flow.get(\"ONOFFB1C\");\nvar onoff0 = flow.get(\"onoff0\");\n\n// Si el valor de \"onoff\" ha cambiado\nif (onoff !== onoff0) {\n    // Actualizamos el valor de \"onoff0\" con el nuevo valor de \"onoff\"\n    flow.set(\"onoff0\", onoff);\n    \n    // Establecemos el mensaje dependiendo del nuevo estado\n    msg.onoff = onoff;  // Devuelve 1 o 0 según el valor de \"onoff\"\n    \n    return msg;  // Solo se devuelve el mensaje si hay un cambio\n} else {\n    // No se hace nada si no hay cambio en el valor\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3160,
        "wires": [
            [
                "a4ed83bf75d1b074"
            ]
        ]
    },
    {
        "id": "fc574075d5030047",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "CHECK CORTEDESBOB1",
        "func": "\nvar cortedesbo = flow.get(\"CORTEDESBOB1C\");\nvar cortedesbo0 = flow.get(\"cortedesbo0\");\n\nif (cortedesbo == 1 && cortedesbo !== cortedesbo0) {\n    flow.set(\"cortedesbo0\", cortedesbo);\n    \n    return msg;\n} else \n    if (cortedesbo !== cortedesbo0) {\n        flow.set(\"cortedesbo0\", cortedesbo);\n\n        }else\n        {\n    return null // No se envía mensaje si no hay cambio en la fase\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 3120,
        "wires": [
            [
                "fb0705d881611218"
            ]
        ]
    },
    {
        "id": "6c8e0f6f87c3fa21",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "CHECK CORTEBOBIB1",
        "func": "\nvar cortebobi = flow.get(\"CORTEBOBIB1C\");\nvar cortebobi0 = flow.get(\"cortebobi0\");\n\nif (cortebobi == 1 && cortebobi !== cortebobi0) {\n    flow.set(\"cortebobi0\", cortebobi);\n    \n    return msg;\n} else \n    if (cortebobi !== cortebobi0) {\n        flow.set(\"cortebobi0\", cortebobi);\n\n        }else\n        {\n    return null // No se envía mensaje si no hay cambio en la fase\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 3080,
        "wires": [
            [
                "072572484ac3cb91"
            ]
        ]
    },
    {
        "id": "072572484ac3cb91",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "ENVIO CORTE BOBI",
        "func": "msg.payload = [\n    {\n        \"sensorname\": \"CORTEBOBIB1\",\n        \"datetime\": new Date().toISOString(), // Captura la fecha y hora actual en formato ISO 8601\n        \"value\": 1,\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3080,
        "wires": [
            [
                "75c90535cd7f1c77"
            ]
        ]
    },
    {
        "id": "fb0705d881611218",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "ENVIO CORTE DESBO ",
        "func": "msg.payload = [\n    {\n        \"sensorname\": \"CORTEDESBOB1\",\n        \"datetime\": new Date().toISOString(), // Captura la fecha y hora actual en formato ISO 8601\n        \"value\": 1,\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3120,
        "wires": [
            [
                "75c90535cd7f1c77"
            ]
        ]
    },
    {
        "id": "fbb4717e5fca3350",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SEND ON",
        "func": "\nmsg.payload = [\n    {\n        \"sensorname\": \"ONOFFB1\",\n        \"datetime\": new Date().toISOString(),\n        \"value\": 1,\n    }\n];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 3160,
        "wires": [
            [
                "75c90535cd7f1c77"
            ]
        ]
    },
    {
        "id": "3392483ab2102161",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "CHECK VELOCIDADB1",
        "func": "var ONOFF = flow.get(\"ONOFFB1_ONOFFB1\");\nvar velocidadb1 = flow.get(\"VELOCIDADB1C\");\n\nif (velocidadb1 == 1 && ONOFF != 0) {\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 3200,
        "wires": [
            [
                "ee4f65abac48c891"
            ]
        ]
    },
    {
        "id": "ee4f65abac48c891",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SEND VELOCIDADB1",
        "func": "var velocidadB1 = flow.get(\"VELOCIDADB1_VELOCIDADB1\")\nmsg.payload = [\n    {\n        \"sensorname\": \"VELOCIDADB1\",\n        \"datetime\": new Date().toISOString(), // Captura la fecha y hora actual en formato ISO 8601\n        \"value\": velocidadB1,\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "75c90535cd7f1c77",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "name": "Prepare TOKEN",
        "func": "var TOKEN = flow.get(\"TOKEN\");\n//var TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXh0b1BsYW5vIjoiQjFfT05PRkYiLCJpYXQiOjE3NDA0MTY2MzZ9.YJtjHLR5QrwIErex-3dbYDB8bWX42IHWaJHaEe7w4KU\";\nvar URL = flow.get(\"esiga\");\n\n //Asegurar que URL no tenga comillas adicionales\n if (typeof URL === \"string\") {\n    URL = URL.replace(/^['\"]+|['\"]+$/g, ''); \n    }\n\nmsg.method = 'POST';\nmsg.url = URL;\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + TOKEN  \n};\n\nvar dataToSend = msg.payload;\nmsg.payload = dataToSend;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 3180,
        "wires": [
            [
                "358ccfe42989d929"
            ]
        ]
    },
    {
        "id": "358ccfe42989d929",
        "type": "json",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2550,
        "y": 3220,
        "wires": [
            [
                "6dd93e1e6ba7924e"
            ]
        ]
    },
    {
        "id": "e32d8fe6752abdda",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": " {\"sensorname\": \"ONOFFB1\", \"value\": 1, \"datetime\": \"2025-03-05 10:14:22\"}",
        "payloadType": "json",
        "x": 2550,
        "y": 3140,
        "wires": [
            [
                "75c90535cd7f1c77"
            ]
        ]
    },
    {
        "id": "40a08be9cceaec16",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SET TIPO",
        "func": "flow.set(\"TIPO_LECTURA_Sensores\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "a4ed83bf75d1b074",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "property": "onoff",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1890,
        "y": 3160,
        "wires": [
            [
                "fbb4717e5fca3350"
            ],
            [
                "d6c5d70980316783"
            ]
        ]
    },
    {
        "id": "d6c5d70980316783",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SEND OFF",
        "func": "\nmsg.payload = [\n    {\n        \"sensorname\": \"ONOFFB1\",\n        \"datetime\": new Date().toISOString(),\n        \"value\": 0,\n    }\n];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 3200,
        "wires": [
            [
                "75c90535cd7f1c77"
            ]
        ]
    },
    {
        "id": "6dd93e1e6ba7924e",
        "type": "https-node",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "name": "HTTPS",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "db098622d12e3ccf",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2720,
        "y": 3220,
        "wires": [
            [
                "8e0c1f7709078767"
            ]
        ]
    },
    {
        "id": "bb711eb8c5df31a4",
        "type": "http in",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "url": "/setupB1",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 1700,
        "y": 3500,
        "wires": [
            [
                "9c05471011a0058e",
                "b2f041ec26969c71"
            ]
        ]
    },
    {
        "id": "9c05471011a0058e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SET TOKEN SIGA",
        "func": "flow.set(\"TOKEN\", msg.payload);  // Guardar el token en el contexto de flujo\n\n// Devolver una respuesta de confirmación\nmsg.payload = { \n    success: true, \n    message: \"Token almacenado correctamente\" \n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3500,
        "wires": [
            []
        ]
    },
    {
        "id": "d010d5fd491d1ff5",
        "type": "http response",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1680,
        "y": 3540,
        "wires": []
    },
    {
        "id": "07237a8fe435eec4",
        "type": "comment",
        "z": "a40ecd06d6aa773b",
        "name": "------------------------------------------------------------------------*SETUP*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`PROCESAR EL TOKEN RECIBIDO'\n    ",
        "x": 1960,
        "y": 3440,
        "wires": []
    },
    {
        "id": "3fbbce3cfb15c5bb",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "REV1",
        "func": "flow.set(\"REV\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "8e0c1f7709078767",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "d": true,
        "name": "REV2",
        "func": "flow.set(\"REV2\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2770,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "7c0465e67b1b553f",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "OLD",
        "func": "// Obtener el objeto de solicitud\nvar payload = msg.payload;\n\n// Extraer la información de la solicitud\nvar token = payload.Token;   // Token\nvar query = payload.ESIGA;   // Query\n\n// Si no se proporcionan query ni token, no hacemos nada\nif (token && !query) {\n    msg.topic = `INSERT INTO INT_B1.VSIGA (token) VALUES ('${token}')`;\n} else if (!token && query) {\n    // Si solo se proporciona query, se inserta solo query\n    msg.topic = `INSERT INTO INT_B1.VSIGA (query) VALUES ('${query}')`;\n} else if (token && query) {\n    // Si tanto token como query están presentes, se insertan ambos\n    msg.topic = `INSERT INTO INT_B1.VSIGA (query, token) VALUES ('${query}', '${token}')`;\n} else {\n    // Si ni token ni query están presentes, podemos manejar este caso de forma diferente si es necesario\n    // Por ejemplo, podrías enviar un mensaje de error o similar.\n    return null;\n}\n\n// Devolver el mensaje con la consulta SQL\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3580,
        "wires": [
            []
        ]
    },
    {
        "id": "4806e4ac5e6fecc2",
        "type": "mysql",
        "z": "a40ecd06d6aa773b",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2280,
        "y": 3500,
        "wires": [
            [
                "d010d5fd491d1ff5",
                "3854a20e2fa166f4",
                "3fbbce3cfb15c5bb"
            ]
        ]
    },
    {
        "id": "b2f041ec26969c71",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Ajuste de Variables desde SIGA",
        "func": "// Obtener el objeto de solicitud\nvar payload = msg.payload;\n\n// Extraer la información de la solicitud\nvar token = payload.Token;   // Token\nvar esiga = payload.ESIGA;   // Query\n\n// Si no se proporcionan query ni token, no hacemos nada\nif (token && !esiga) {\n    // Si solo se proporciona token, intentamos insertar o actualizar\n    msg.topic = `INSERT INTO INT_B1.VSIGA (token) VALUES ('${token}') ON DUPLICATE KEY UPDATE token = '${token}'`;\n} else if (!token && esiga) {\n    // Si solo se proporciona query, intentamos insertar o actualizar\n    msg.topic = `INSERT INTO INT_B1.VSIGA (esiga) VALUES ('${esiga}') ON DUPLICATE KEY UPDATE esiga = '${esiga}'`;\n} else if (token && esiga) {\n    // Si tanto token como query están presentes, intentamos insertar o actualizar\n    msg.topic = `INSERT INTO INT_B1.VSIGA (esiga, token) VALUES ('${esiga}', '${token}') ON DUPLICATE KEY UPDATE esiga = '${esiga}', token = '${token}'`;\n} else {\n    // Si ni token ni query están presentes, podemos manejar este caso de forma diferente si es necesario\n    return null;\n}\n\n// Devolver el mensaje con la consulta SQL\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3540,
        "wires": [
            [
                "4806e4ac5e6fecc2",
                "4ecdbd686efc1b6e"
            ]
        ]
    },
    {
        "id": "ed6e72250def58b9",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{ \"Token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXh0b1BsYW5vIjoiQjFfT05PRkYiLCJpYXQiOjE3NDA0MTY2MzZ9.YJtjHLR5QrwIErex-3dbYDB8bWX42IHWaJHaEe7w4KU\", \"ESIGA\": \"https://sigafactorydes.aliberico.com/apisignals/sensors\" }",
        "payloadType": "json",
        "x": 1690,
        "y": 3600,
        "wires": [
            [
                "b2f041ec26969c71"
            ]
        ]
    },
    {
        "id": "3854a20e2fa166f4",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Almacenamiento de Variables",
        "func": "// Obtener el resultado de la consulta SQL (suponiendo que el resultado está en msg.payload)\nvar resultado = msg.payload;\n\n// Si el resultado tiene datos (es decir, una fila fue devuelta)\nif (resultado.length > 0) {\n    // Guardamos los valores de 'esiga' y 'token' en variables de flujo\n    flow.set(\"esiga\", resultado[0].esiga);\n    flow.set(\"TOKEN\", resultado[0].token);\n    // Opcionalmente, podrías devolver los valores para usarlos en otro nodo\n    msg.payload = {\n        esiga: resultado[0].esiga,\n        token: resultado[0].token\n    };\n} else {\n    // Si no se obtuvo ninguna fila, puedes manejarlo aquí (por ejemplo, enviar un mensaje de error)\n    msg.payload = \"No se encontraron resultados\";\n}\n\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "4ecdbd686efc1b6e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "SELECT CHECK",
        "func": "msg.topic= \"SELECT esiga, token FROM INT_B1.VSIGA ORDER BY fecha DESC LIMIT 1;\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 3580,
        "wires": [
            [
                "4806e4ac5e6fecc2"
            ]
        ]
    },
    {
        "id": "54274847010ee6b1",
        "type": "inject",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "props": [
            {
                "p": "TIMESTAMP",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2140,
        "y": 3620,
        "wires": [
            [
                "4ecdbd686efc1b6e"
            ]
        ]
    },
    {
        "id": "60436dc3a0f25329",
        "type": "switch",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 2930,
        "y": 1900,
        "wires": [
            [
                "a2e852d870d73f60"
            ],
            [
                "f12f1a8b46576918"
            ],
            [
                "d465c0b4d3f5e458"
            ],
            [
                "70249044c33ed6f6"
            ],
            [
                "f5a7f6a9d66e497e"
            ],
            [
                "3c3bc2ee358f652d"
            ],
            [
                "47e9719d76be265a"
            ],
            [
                "3818bf8477c096b7"
            ]
        ]
    },
    {
        "id": "5ed46fd7b92c668f",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "4dd47afaed49386d",
        "variable": "VELOCIDADB2C",
        "name": "",
        "x": 3350,
        "y": 1880,
        "wires": []
    },
    {
        "id": "2f8421885a3b78d9",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "4dd47afaed49386d",
        "variable": "ONOFFB2C",
        "name": "",
        "x": 3310,
        "y": 1840,
        "wires": []
    },
    {
        "id": "42f1eb4b38ab3fb7",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "4dd47afaed49386d",
        "variable": "CORTES1DESBOB2C",
        "name": "",
        "x": 3380,
        "y": 1920,
        "wires": []
    },
    {
        "id": "922b4d9bdc0a9f6c",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "4dd47afaed49386d",
        "variable": "CORTES2DESBOB2C",
        "name": "",
        "x": 3400,
        "y": 1960,
        "wires": []
    },
    {
        "id": "10ee47de746a649d",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "Response",
        "func": "// Obtener la consulta SQL de msg.topic\nvar query = msg.topic;\n\n// Identificar la tabla afectada a partir de la consulta SQL (en este caso, un INSERT)\nif (query.includes('ONOFFB2')) {\n    msg.payload = 1;  // Si la tabla es ONOFFB1, devolver 1\n} else if (query.includes('VELOCIDADB2')) {\n    msg.payload = 2;  // Si la tabla es VELOCIDADB1, devolver 2\n} else if (query.includes('CORTES1DESBOB2')) {\n    msg.payload = 3;  // Si la tabla es CORTEDESBOB1, devolver 3\n} else if (query.includes('CORTES2DESBOB2')) {\n    msg.payload = 4;  // Si la tabla es CORTEBOBIB1, devolver 4\n    } else if (query.includes('CORTEI1DESBOB2')) {\n    msg.payload = 5;\n    } else if (query.includes('CORTEI2DESBOB2')) {\n    msg.payload = 6;\n    } else if (query.includes('CORTES1BOBIB2')) {\n    msg.payload = 7;\n    } else if (query.includes('CORTES2BOBIB2')) {\n    msg.payload = 8;\n} else {\n    msg.payload = -1; // Si no es ninguna de las tablas mencionadas, devolver un valor por defecto\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2660,
        "y": 1900,
        "wires": [
            [
                "60436dc3a0f25329"
            ]
        ]
    },
    {
        "id": "17faffb8fbc03c44",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "REV3",
        "func": "flow.set(\"REV3\",msg.topic)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "a2e852d870d73f60",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 1820,
        "wires": [
            [
                "2f8421885a3b78d9"
            ]
        ]
    },
    {
        "id": "f12f1a8b46576918",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 1860,
        "wires": [
            [
                "5ed46fd7b92c668f"
            ]
        ]
    },
    {
        "id": "d465c0b4d3f5e458",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 1900,
        "wires": [
            [
                "42f1eb4b38ab3fb7"
            ]
        ]
    },
    {
        "id": "70249044c33ed6f6",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 1940,
        "wires": [
            [
                "922b4d9bdc0a9f6c"
            ]
        ]
    },
    {
        "id": "667370fb56bebd90",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_B2\\.(\\w+)\\s*\\(/i);\n\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1920,
        "wires": [
            [
                "db5fba59f00b71a0"
            ]
        ]
    },
    {
        "id": "104eab8c9bb6667b",
        "type": "delay",
        "z": "a40ecd06d6aa773b",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2180,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "0a4f55e7108e211e",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "4dd47afaed49386d",
        "variable": "CORTEI1DESBOB2C",
        "name": "",
        "x": 3400,
        "y": 2000,
        "wires": []
    },
    {
        "id": "11047c87efdc09e0",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "4dd47afaed49386d",
        "variable": "CORTEI2DESBOB2C",
        "name": "",
        "x": 3420,
        "y": 2040,
        "wires": []
    },
    {
        "id": "3b0c5821ab948737",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "4dd47afaed49386d",
        "variable": "CORTES1BOBIB2C",
        "name": "",
        "x": 3440,
        "y": 2080,
        "wires": []
    },
    {
        "id": "ad9df371247b6640",
        "type": "s7 out",
        "z": "a40ecd06d6aa773b",
        "endpoint": "4dd47afaed49386d",
        "variable": "CORTES2BOBIB2C",
        "name": "",
        "x": 3460,
        "y": 2120,
        "wires": []
    },
    {
        "id": "f5a7f6a9d66e497e",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 1980,
        "wires": [
            [
                "0a4f55e7108e211e"
            ]
        ]
    },
    {
        "id": "3c3bc2ee358f652d",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 2020,
        "wires": [
            [
                "11047c87efdc09e0"
            ]
        ]
    },
    {
        "id": "47e9719d76be265a",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 2060,
        "wires": [
            [
                "3b0c5821ab948737"
            ]
        ]
    },
    {
        "id": "3818bf8477c096b7",
        "type": "function",
        "z": "a40ecd06d6aa773b",
        "name": "FORCE",
        "func": "msg.payload=0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 2100,
        "wires": [
            [
                "ad9df371247b6640"
            ]
        ]
    },
    {
        "id": "a83b3170f968a7bd",
        "type": "inject",
        "z": "01214dc77e323413",
        "name": "DEFINIR NUEVA MAQUINA",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "B2",
        "payloadType": "str",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "1a1ccf535b164593"
            ]
        ]
    },
    {
        "id": "1a1ccf535b164593",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Crear_Maquina",
        "func": "/*Este nodo se encarga de crear las variables de flow que\ncontienen el nombre de la máquina y el de la base de datos \n*/\nflow.set('Maquina', msg.payload)\n\nflow.set('DBname', \"INT_\" + flow.get('Maquina'));\n\nmsg.payload = flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "852911ae9abf4f17",
                "f1ae5868a52e3a75",
                "09e4949c57b8ab2a"
            ]
        ]
    },
    {
        "id": "852911ae9abf4f17",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "Máquina OK",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "f1ae5868a52e3a75",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Crear_DB_Maquina",
        "func": "msg.topic = \"CREATE DATABASE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"CREATE TABLE example_table (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50) NOT NULL); \";\nmsg.topic += \"ALTER DATABASE `\" + flow.get('DBname') + \"` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; \";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 240,
        "wires": [
            [
                "3b194b58070bdc07"
            ]
        ]
    },
    {
        "id": "4b1f4fc2cd72f7a6",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "BDD OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 240,
        "wires": []
    },
    {
        "id": "6c742866dacb37a4",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 300,
        "wires": []
    },
    {
        "id": "aa8fe9d46eb6b943",
        "type": "inject",
        "z": "01214dc77e323413",
        "name": "DEFINIR NUEVO SENSOR DIGITAL",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "sensor",
                "v": "LOTEDIGITAL",
                "vt": "str"
            },
            {
                "p": "unidad",
                "v": "REGISTRO",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "2",
        "x": 180,
        "y": 1060,
        "wires": [
            [
                "a525b2a2f9e9f4bc",
                "b8cee9f687b4e104"
            ]
        ]
    },
    {
        "id": "a525b2a2f9e9f4bc",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1060,
        "wires": [
            [
                "77d9b6bde5875564",
                "4ca0c213d2a4d76d"
            ]
        ]
    },
    {
        "id": "77d9b6bde5875564",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1060,
        "wires": []
    },
    {
        "id": "9f8d9b4fe9b1fb44",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1120,
        "wires": []
    },
    {
        "id": "8a65eadfafa3efab",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Crear_TablaSensores",
        "func": "/*Este nodo crea en la BD la tabla Sensores, que contendrá \nun listado de los sensores declarados en la máquina\n*/\nmsg.topic=\"USE \"+flow.get('DBname')+\" ;\";\nmsg.topic = msg.topic + \"CREATE TABLE Sensores (ID INT AUTO_INCREMENT PRIMARY KEY,Sensor VARCHAR(50) NULL,Unidad VARCHAR(50) NULL);\";\nmsg.topic += \"SELECT 'OK' AS ConfirmationMessage;\"; // Agrega una consulta para obtener el mensaje de confirmación\n\nmsg.topic=msg.topic;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "31f4e081ae984ca7"
            ]
        ]
    },
    {
        "id": "351c2d3a78246a27",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "NOW 1 D",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c89cec22e7c16248",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "Instrucciones para crear una nueva máquina",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en el servidor de BBDD una nueva base de datos para la máquina definida.\n    \n    -Crear dentro de esta BD de máquina las tablas General y Sensores.\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Máquina nueva` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.payload el *Nombre de la máquina* que queremos crear.\n3.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n4.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n5.-Hacer click en el `botón` del nodo `Definir Máquina Nueva`.\n\nSi hemos creado la máquina correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje: \n\n    \"Máquina *Nombre de la máquina* registrada con éxito\"\n\n5.-Seguidamente nos dirigimos al menú de opciones de node-red en la esquina superior derecha de la pantalla y hacemos clic en Import...\n\n6.-Dentro de la carpeta Local seleccionamos el archivo FlowMaquinaDefinitivo y elegimos la opcion New Flow. A continuación hacemos clic en importar y después add copy en la ventana emergente. Esto nos creará un nuevo flow para nuestra recién creada máquina, donde tendremos que entrar a configurar los nodos de Definir_. Este proceso se explica con detalle en los comentarios presentes dentro del propio flow.",
        "x": 190,
        "y": 140,
        "wires": []
    },
    {
        "id": "c13c1102891e69af",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Mensaje de confirmación",
        "func": "/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Máquina \" + flow.get('Maquina')+\" registrada con éxito\"\n    msg.topic= \"Notificación: \"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "4b1f4fc2cd72f7a6",
                "dc97f4ec56369141"
            ]
        ]
    },
    {
        "id": "5516154a82237a8c",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "INSTRUCCIONES PARA CREAR UN NUEVO SENSOR",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en la BD de una máquina una tabla para almacenar la información de un sensor.\n    \n    -Registrar en la tabla Sensores ya existente en la máquina una nueva entrada donde quedan registrados los datos del sensor.\n\nIMPORTANTE: El Nombre del sensor debe coincidir con el nombre de la variable de sensor declarado en el nodo de entrada del datos del PLC\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Sensor Nuevo` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.topic el *Nombre de la máquina* a la que el sensor pertenece.\n3.-Introducir a la derecha del campo msg.sensor el *Nombre del sensor* que queremos crear.\n4.-Introducir a la derecha del campo msg.unidad la *unidad de ingenieria* que corresponde a este sensor.\n5.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n6.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n7.-Hacer click en el `botón` del nodo `Definir Sensor Nuevo`.\n\nSi hemos creado el sensor correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje:\n    \n    `Sensor *Nombre del sensor* registrado con éxito en la máquina *Nombre de la máquina*`",
        "x": 220,
        "y": 1020,
        "wires": []
    },
    {
        "id": "7954442b6dc6b51a",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Mensaje de confirmación",
        "func": "\n/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Sensor \" + flow.get('Sensor') + \" registrado con éxito en la máquina Máquina \" + flow.get('Maquina');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1120,
        "wires": [
            [
                "9f8d9b4fe9b1fb44"
            ]
        ]
    },
    {
        "id": "2bb1f554cb2c4927",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "INFORMACION SOBRE MODIFICACIONES",
        "info": "Si desea reestructurar la tabla General de la base de datos debe modificar el nodo `Crear_TablaGeneral`. El formato de los comandos e SQL.",
        "x": 550,
        "y": 20,
        "wires": []
    },
    {
        "id": "3888c998e56dfd9a",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \"+flow.get('DBname')+\".sensores ORDER BY ID DESC LIMIT 1;\";\n\n\nmsg.topic = msg.topic;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1880,
        "wires": [
            [
                "e824b1ec5fe660ab"
            ]
        ]
    },
    {
        "id": "8227d039bbdde904",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "SELECT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1880,
        "wires": []
    },
    {
        "id": "b2d82f738ea97495",
        "type": "inject",
        "z": "01214dc77e323413",
        "name": "CONFIRMAR ESCRITURA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1880,
        "wires": [
            [
                "3888c998e56dfd9a"
            ]
        ]
    },
    {
        "id": "27b70f82d00a32d3",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "DEFINIR",
        "info": "",
        "x": 160,
        "y": 20,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "4ca0c213d2a4d76d",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "CrearTablaDeSensor",
        "func": "/*Este nodo /*Este nodo envía a el nodo MSSQL el Query necesario para \nla creación de la Tabla de Sensor\n*/\nmsg.topic = \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"SHOW VARIABLES LIKE 'sql_mode'; \";\nmsg.topic += \"CREATE TABLE `\" + flow.get('Sensor') + \"` (\";\nmsg.topic += \"`FechaHora` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`Proceso` varchar(50) NULL, \";\nmsg.topic += \"`Fase` varchar(50) NULL, \";\nmsg.topic += \"`Valor` varchar(50)) ENGINE = InnoDB;\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "392d93442c227c84"
            ]
        ]
    },
    {
        "id": "833c547704d220e5",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 360,
        "wires": []
    },
    {
        "id": "0282c5bf71221c66",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "EscrituraEnSensores",
        "func": "/*Este nodo envia al nodo MSSQL el Query necesario para\nregistrar en la tabla Sensores el nuevo sensor creado\n*/\nmsg.topic = \"INSERT INTO \"+flow.get('DBname')+\".Sensores(Sensor,Unidad) VALUES ('\";\nmsg.topic = msg.topic + flow.get('Sensor') + \"','\";\nmsg.topic = msg.topic + flow.get('Unidad') + \"');\";\n    \nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1180,
        "wires": [
            [
                "6cc99adea94e930d"
            ]
        ]
    },
    {
        "id": "b6b716cf6b3a5780",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "INSTRUCCIONES PARA CONFIRMAR LA ESCRITURA",
        "info": "",
        "x": 260,
        "y": 1840,
        "wires": []
    },
    {
        "id": "3ce9df8850180193",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "FUNCIONES",
        "info": "",
        "x": 510,
        "y": 140,
        "wires": []
    },
    {
        "id": "00d609723f703974",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "BASES DE DATOS",
        "info": "",
        "x": 790,
        "y": 140,
        "wires": []
    },
    {
        "id": "c9cd1ec896026d54",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "CONFIRMACIONES",
        "info": "",
        "x": 1050,
        "y": 140,
        "wires": []
    },
    {
        "id": "8c1f129c579c4d3c",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "DEBUG",
        "info": "",
        "x": 1310,
        "y": 140,
        "wires": []
    },
    {
        "id": "fe2d9a99ed86c054",
        "type": "template",
        "z": "01214dc77e323413",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "c9ad208b89180a92"
            ]
        ]
    },
    {
        "id": "871ff4faf83d7f22",
        "type": "template",
        "z": "01214dc77e323413",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 140,
        "y": 1140,
        "wires": [
            [
                "e916f957c2dca838"
            ]
        ]
    },
    {
        "id": "e916f957c2dca838",
        "type": "rbe",
        "z": "01214dc77e323413",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "a525b2a2f9e9f4bc"
            ]
        ]
    },
    {
        "id": "c9ad208b89180a92",
        "type": "rbe",
        "z": "01214dc77e323413",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 300,
        "wires": [
            [
                "1a1ccf535b164593"
            ]
        ]
    },
    {
        "id": "09e4949c57b8ab2a",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "Maquina OK",
        "mode": "link",
        "links": [],
        "x": 1485,
        "y": 180,
        "wires": []
    },
    {
        "id": "dc97f4ec56369141",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "BDD OK",
        "mode": "link",
        "links": [],
        "x": 1495,
        "y": 240,
        "wires": []
    },
    {
        "id": "2c9605a2f333c068",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "Tabla General",
        "mode": "link",
        "links": [],
        "x": 1485,
        "y": 300,
        "wires": []
    },
    {
        "id": "d449e20e77d37cb4",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "Tabla Sensores",
        "mode": "link",
        "links": [],
        "x": 1485,
        "y": 360,
        "wires": []
    },
    {
        "id": "b0abaa9f2c688c57",
        "type": "link in",
        "z": "01214dc77e323413",
        "name": "link in 16",
        "links": [],
        "x": 45,
        "y": 260,
        "wires": [
            [
                "1a1ccf535b164593",
                "037f34b156040e59"
            ]
        ]
    },
    {
        "id": "bde928fdfd5cacb5",
        "type": "link in",
        "z": "01214dc77e323413",
        "name": "link in 18",
        "links": [],
        "x": 385,
        "y": 1900,
        "wires": [
            [
                "3888c998e56dfd9a"
            ]
        ]
    },
    {
        "id": "dd4c04fb032c32d8",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Crear _tablaError_logs_http",
        "func": "msg.topic = \"USE \" + flow.get('DBname') + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\n\nmsg.topic += \"CREATE TABLE http_error_logs (\";\nmsg.topic += \"FechaHora DATETIME,\";\nmsg.topic += \"Error VARCHAR(50)\";\nmsg.topic += \");\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 480,
        "wires": [
            [
                "4aefaf9590ea5553"
            ]
        ]
    },
    {
        "id": "037f34b156040e59",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "link out 1",
        "mode": "link",
        "links": [],
        "x": 35,
        "y": 300,
        "wires": []
    },
    {
        "id": "bf36c0830a05066b",
        "type": "inject",
        "z": "01214dc77e323413",
        "name": "CAMBIAR DE MÁQUINA",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "B1",
        "payloadType": "str",
        "x": 190,
        "y": 2140,
        "wires": [
            [
                "1521cf4331d45067",
                "a0e434495a54bcd9"
            ]
        ]
    },
    {
        "id": "1521cf4331d45067",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "function 28",
        "func": "flow.set('Maquina', msg.payload)\n\nflow.set('DBname', \"INT_\" + flow.get('Maquina'));\n\nmsg.payload = flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2140,
        "wires": [
            [
                "4d011cd0cd11ac75"
            ]
        ]
    },
    {
        "id": "4d011cd0cd11ac75",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 2140,
        "wires": []
    },
    {
        "id": "81f5244362a2e7fd",
        "type": "link in",
        "z": "01214dc77e323413",
        "name": "Cambiar de Maquina",
        "links": [],
        "x": 325,
        "y": 2180,
        "wires": [
            [
                "95fb7f9bc4d67152"
            ]
        ]
    },
    {
        "id": "95fb7f9bc4d67152",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "JSON PARSE",
        "func": "// Parsear el JSON y extraer el valor de \"velocidad\"\nvar payload = JSON.parse(msg.payload);\nvar topicValue = payload.topic;\n\n// Crear un nuevo mensaje solo con el valor de \"velocidad\"\nmsg.payload = topicValue;\n\n// Enviar el mensaje al nodo Switch\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2180,
        "wires": [
            [
                "1521cf4331d45067",
                "3fb3aba6b59de25d"
            ]
        ]
    },
    {
        "id": "bcbfcfecb064bbb5",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "INSTRUCCIONES PARA CAMBIAR DE MÁQUINA",
        "info": "",
        "x": 270,
        "y": 2100,
        "wires": []
    },
    {
        "id": "212ac3638ee634de",
        "type": "websocket in",
        "z": "01214dc77e323413",
        "name": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "fe2d9a99ed86c054"
            ]
        ]
    },
    {
        "id": "5cb73ecf642b9b65",
        "type": "websocket in",
        "z": "01214dc77e323413",
        "name": "",
        "x": 100,
        "y": 1100,
        "wires": [
            [
                "871ff4faf83d7f22"
            ]
        ]
    },
    {
        "id": "8a34b7e9303371e8",
        "type": "websocket in",
        "z": "01214dc77e323413",
        "name": "",
        "x": 140,
        "y": 1920,
        "wires": [
            [
                "69fb6c02b7ee537e"
            ]
        ]
    },
    {
        "id": "69fb6c02b7ee537e",
        "type": "template",
        "z": "01214dc77e323413",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 1960,
        "wires": [
            [
                "32d1378962f31431"
            ]
        ]
    },
    {
        "id": "32d1378962f31431",
        "type": "rbe",
        "z": "01214dc77e323413",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 2000,
        "wires": [
            [
                "3888c998e56dfd9a"
            ]
        ]
    },
    {
        "id": "4ba97e1eebc25dc1",
        "type": "websocket in",
        "z": "01214dc77e323413",
        "name": "",
        "x": 140,
        "y": 2180,
        "wires": [
            [
                "e6a5b330ee063082"
            ]
        ]
    },
    {
        "id": "e6a5b330ee063082",
        "type": "template",
        "z": "01214dc77e323413",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 2220,
        "wires": [
            [
                "23c85215da5cae48"
            ]
        ]
    },
    {
        "id": "23c85215da5cae48",
        "type": "rbe",
        "z": "01214dc77e323413",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 2260,
        "wires": [
            [
                "95fb7f9bc4d67152"
            ]
        ]
    },
    {
        "id": "b8cee9f687b4e104",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "DEFINIR SENSOR ",
        "mode": "link",
        "links": [],
        "x": 55,
        "y": 1160,
        "wires": []
    },
    {
        "id": "a0e434495a54bcd9",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "Cambiar de Maquina Dashboard Autoclave",
        "mode": "link",
        "links": [],
        "x": 565,
        "y": 2100,
        "wires": []
    },
    {
        "id": "3fb3aba6b59de25d",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "Cambiar de Maquina Dashboard Autoclave",
        "mode": "link",
        "links": [],
        "x": 705,
        "y": 2220,
        "wires": []
    },
    {
        "id": "746712b61f8fab15",
        "type": "inject",
        "z": "01214dc77e323413",
        "name": "DEFINIR NUEVO SENSOR ANALOGICA",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "sensor",
                "v": "CORTES1BOBIB2",
                "vt": "str"
            },
            {
                "p": "unidad",
                "v": "REGISTRO",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "6",
        "x": 220,
        "y": 1300,
        "wires": [
            [
                "1d32216497b58f79",
                "0fc7a9e8381ad5f8"
            ]
        ]
    },
    {
        "id": "1d32216497b58f79",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1320,
        "wires": [
            [
                "aa94e9cedf96a274",
                "47c5430062c7f3a6"
            ]
        ]
    },
    {
        "id": "aa94e9cedf96a274",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1320,
        "wires": []
    },
    {
        "id": "48412a5252d519fb",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1380,
        "wires": []
    },
    {
        "id": "e69afdbfbdca469c",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1440,
        "wires": []
    },
    {
        "id": "d46e364f675131e5",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "INSTRUCCIONES PARA CREAR UN NUEVO SENSOR",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en la BD de una máquina una tabla para almacenar la información de un sensor.\n    \n    -Registrar en la tabla Sensores ya existente en la máquina una nueva entrada donde quedan registrados los datos del sensor.\n\nIMPORTANTE: El Nombre del sensor debe coincidir con el nombre de la variable de sensor declarado en el nodo de entrada del datos del PLC\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Sensor Nuevo` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.topic el *Nombre de la máquina* a la que el sensor pertenece.\n3.-Introducir a la derecha del campo msg.sensor el *Nombre del sensor* que queremos crear.\n4.-Introducir a la derecha del campo msg.unidad la *unidad de ingenieria* que corresponde a este sensor.\n5.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n6.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n7.-Hacer click en el `botón` del nodo `Definir Sensor Nuevo`.\n\nSi hemos creado el sensor correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje:\n    \n    `Sensor *Nombre del sensor* registrado con éxito en la máquina *Nombre de la máquina*`",
        "x": 240,
        "y": 1260,
        "wires": []
    },
    {
        "id": "ecdc0a7264c6e4de",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Mensaje de confirmación",
        "func": "\n/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Sensor \" + flow.get('Sensor') + \" registrado con éxito en la máquina Máquina \" + flow.get('Maquina');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1380,
        "wires": [
            [
                "48412a5252d519fb"
            ]
        ]
    },
    {
        "id": "47c5430062c7f3a6",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "CrearTablaDeSensor",
        "func": "/*Este nodo envía a el nodo MSSQL el Query necesario para \nla creación de la Tabla de Sensor\n*/\nmsg.topic = \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"SHOW VARIABLES LIKE 'sql_mode'; \";\nmsg.topic += \"CREATE TABLE `\" + flow.get('Sensor') + \"` (\";\nmsg.topic += \"`FechaHora` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`Proceso` varchar(50) NULL, \";\nmsg.topic += \"`Fase` varchar(50) NULL, \";\nmsg.topic += \"`\" + flow.get('Sensor') + \"` varchar(50), \";\nmsg.topic += \"`SP\" + flow.get('Sensor') + \"` varchar(50)) ENGINE = InnoDB;\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1380,
        "wires": [
            [
                "1ff8b065608ea02b"
            ]
        ]
    },
    {
        "id": "b0bae04e36308867",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "EscrituraEnSensores",
        "func": "/*Este nodo envia al nodo MSSQL el Query necesario para\nregistrar en la tabla Sensores el nuevo sensor creado\n*/\nmsg.topic = \"INSERT INTO \"+flow.get('DBname')+\".Sensores(Sensor,Unidad) VALUES ('\";\nmsg.topic = msg.topic + flow.get('Sensor') + \"','\";\nmsg.topic = msg.topic + flow.get('Unidad') + \"');\";\n    \nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1440,
        "wires": [
            [
                "7e81fc262eec4bf8"
            ]
        ]
    },
    {
        "id": "83146fd529442803",
        "type": "template",
        "z": "01214dc77e323413",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 160,
        "y": 1400,
        "wires": [
            [
                "4975fbc4ebff5659"
            ]
        ]
    },
    {
        "id": "4975fbc4ebff5659",
        "type": "rbe",
        "z": "01214dc77e323413",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 1440,
        "wires": [
            [
                "1d32216497b58f79"
            ]
        ]
    },
    {
        "id": "5248fb422f18f649",
        "type": "websocket in",
        "z": "01214dc77e323413",
        "name": "",
        "x": 120,
        "y": 1360,
        "wires": [
            [
                "83146fd529442803"
            ]
        ]
    },
    {
        "id": "0fc7a9e8381ad5f8",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "DEFINIR SENSOR ",
        "mode": "link",
        "links": [],
        "x": 75,
        "y": 1420,
        "wires": []
    },
    {
        "id": "1e286109edcd01ca",
        "type": "inject",
        "z": "01214dc77e323413",
        "name": "DEFINIR NUEVO EVENTO",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "sensor",
                "v": "E1",
                "vt": "str"
            },
            {
                "p": "unidad",
                "v": "M3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "3",
        "x": 180,
        "y": 1580,
        "wires": [
            [
                "8c0b6a215b25687f",
                "3bbb878e13c78553"
            ]
        ]
    },
    {
        "id": "8c0b6a215b25687f",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1580,
        "wires": [
            [
                "8d781e26711fdc17",
                "e98cd1c83d7378f3"
            ]
        ]
    },
    {
        "id": "8d781e26711fdc17",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1580,
        "wires": []
    },
    {
        "id": "8ccf8bdefcca74af",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1640,
        "wires": []
    },
    {
        "id": "984916db9d591701",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1700,
        "wires": []
    },
    {
        "id": "cabf3aefc82cbbd0",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "INSTRUCCIONES PARA CREAR UN NUEVO SENSOR",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en la BD de una máquina una tabla para almacenar la información de un sensor.\n    \n    -Registrar en la tabla Sensores ya existente en la máquina una nueva entrada donde quedan registrados los datos del sensor.\n\nIMPORTANTE: El Nombre del sensor debe coincidir con el nombre de la variable de sensor declarado en el nodo de entrada del datos del PLC\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Sensor Nuevo` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.topic el *Nombre de la máquina* a la que el sensor pertenece.\n3.-Introducir a la derecha del campo msg.sensor el *Nombre del sensor* que queremos crear.\n4.-Introducir a la derecha del campo msg.unidad la *unidad de ingenieria* que corresponde a este sensor.\n5.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n6.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n7.-Hacer click en el `botón` del nodo `Definir Sensor Nuevo`.\n\nSi hemos creado el sensor correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje:\n    \n    `Sensor *Nombre del sensor* registrado con éxito en la máquina *Nombre de la máquina*`",
        "x": 240,
        "y": 1540,
        "wires": []
    },
    {
        "id": "ab4bca5c55a9dcb7",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Mensaje de confirmación",
        "func": "\n/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Sensor \" + flow.get('Sensor') + \" registrado con éxito en la máquina Máquina \" + flow.get('Maquina');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1640,
        "wires": [
            [
                "8ccf8bdefcca74af"
            ]
        ]
    },
    {
        "id": "e98cd1c83d7378f3",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "CrearTablaDeSensor",
        "func": "/*Este nodo envía a el nodo MSSQL el Query necesario para \nla creación de la Tabla de Sensor\n*/\nmsg.topic = \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"SHOW VARIABLES LIKE 'sql_mode'; \";\nmsg.topic += \"CREATE TABLE `\" + flow.get('Sensor') + \"` (\";\nmsg.topic += \"`FechaHora` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`Proceso` varchar(50) NULL, \";\nmsg.topic += \"`Fase` varchar(50) NULL, \";\nmsg.topic += \"`Evento` varchar(50)) ENGINE = InnoDB;\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1640,
        "wires": [
            [
                "cfaf1745f335fda4"
            ]
        ]
    },
    {
        "id": "0b6d25a7d95d89aa",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "EscrituraEnSensores",
        "func": "/*Este nodo envia al nodo MSSQL el Query necesario para\nregistrar en la tabla Sensores el nuevo sensor creado\n*/\nmsg.topic = \"INSERT INTO \"+flow.get('DBname')+\".Sensores(Sensor,Unidad) VALUES ('\";\nmsg.topic = msg.topic + flow.get('Sensor') + \"','\";\nmsg.topic = msg.topic + flow.get('Unidad') + \"');\";\n    \nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1700,
        "wires": [
            [
                "647775ea4668dc12"
            ]
        ]
    },
    {
        "id": "071e2b45ba746fcc",
        "type": "template",
        "z": "01214dc77e323413",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 160,
        "y": 1660,
        "wires": [
            [
                "70dd1ffca29f3f6e"
            ]
        ]
    },
    {
        "id": "70dd1ffca29f3f6e",
        "type": "rbe",
        "z": "01214dc77e323413",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 1700,
        "wires": [
            [
                "8c0b6a215b25687f"
            ]
        ]
    },
    {
        "id": "30dacca388ef9dfa",
        "type": "websocket in",
        "z": "01214dc77e323413",
        "name": "",
        "x": 120,
        "y": 1620,
        "wires": [
            [
                "071e2b45ba746fcc"
            ]
        ]
    },
    {
        "id": "3bbb878e13c78553",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "DEFINIR SENSOR ",
        "mode": "link",
        "links": [],
        "x": 75,
        "y": 1680,
        "wires": []
    },
    {
        "id": "cf4d9f083cdccd5a",
        "type": "inject",
        "z": "01214dc77e323413",
        "name": "DEFINIR NUEVO SENSOR STRING",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "sensor",
                "v": "CORTEDESBOB1",
                "vt": "str"
            },
            {
                "p": "unidad",
                "v": "REGISTRO",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "1",
        "x": 180,
        "y": 800,
        "wires": [
            [
                "6ef4e26c43b2d57e",
                "cb9d86aa26de4af9",
                "0d88fde1ae93167c"
            ]
        ]
    },
    {
        "id": "6ef4e26c43b2d57e",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 800,
        "wires": [
            [
                "61405cab43222490",
                "4f409f7908b7d002"
            ]
        ]
    },
    {
        "id": "61405cab43222490",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 800,
        "wires": []
    },
    {
        "id": "2685ffa630c098d0",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 860,
        "wires": []
    },
    {
        "id": "2b4389b21edf8176",
        "type": "debug",
        "z": "01214dc77e323413",
        "name": "ESTO NO VIENE DE LA MISMA ENTRADA \"DEFINIR SENSOR\" ES LINEA DE ESCRITURA DESDE EL PLC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 920,
        "wires": []
    },
    {
        "id": "0898c36b1c172ef5",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "INSTRUCCIONES PARA CREAR UN NUEVO SENSOR",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en la BD de una máquina una tabla para almacenar la información de un sensor.\n    \n    -Registrar en la tabla Sensores ya existente en la máquina una nueva entrada donde quedan registrados los datos del sensor.\n\nIMPORTANTE: El Nombre del sensor debe coincidir con el nombre de la variable de sensor declarado en el nodo de entrada del datos del PLC\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Sensor Nuevo` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.topic el *Nombre de la máquina* a la que el sensor pertenece.\n3.-Introducir a la derecha del campo msg.sensor el *Nombre del sensor* que queremos crear.\n4.-Introducir a la derecha del campo msg.unidad la *unidad de ingenieria* que corresponde a este sensor.\n5.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n6.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n7.-Hacer click en el `botón` del nodo `Definir Sensor Nuevo`.\n\nSi hemos creado el sensor correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje:\n    \n    `Sensor *Nombre del sensor* registrado con éxito en la máquina *Nombre de la máquina*`",
        "x": 220,
        "y": 760,
        "wires": []
    },
    {
        "id": "31f3ec8969a7c9f5",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Mensaje de confirmación",
        "func": "\n/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Sensor \" + flow.get('Sensor') + \" registrado con éxito en la máquina Máquina \" + flow.get('Maquina');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 860,
        "wires": [
            [
                "2685ffa630c098d0"
            ]
        ]
    },
    {
        "id": "4f409f7908b7d002",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "CrearTablaDeSensor",
        "func": "/*Este nodo envía a el nodo MSSQL el Query necesario para \nla creación de la Tabla de Sensor\n*/\nmsg.topic = \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"SHOW VARIABLES LIKE 'sql_mode'; \";\nmsg.topic += \"CREATE TABLE `\" + flow.get('Sensor') + \"` (\";\nmsg.topic += \"`FechaInicioLote` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`FechaFinLote` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`Proceso` varchar(50)) ENGINE = InnoDB;\";\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 860,
        "wires": [
            [
                "f82d2f0e24df2584"
            ]
        ]
    },
    {
        "id": "ed8b190219f1d227",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "EscrituraEnSensores",
        "func": "/*Este nodo envia al nodo MSSQL el Query necesario para\nregistrar en la tabla Sensores el nuevo sensor creado\n*/\nmsg.topic = \"INSERT INTO \"+flow.get('DBname')+\".Sensores(Sensor,Unidad) VALUES ('\";\nmsg.topic = msg.topic + flow.get('Sensor') + \"','\";\nmsg.topic = msg.topic + flow.get('Unidad') + \"');\";\n    \nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 920,
        "wires": [
            [
                "80d66c7b8e63ce74"
            ]
        ]
    },
    {
        "id": "df1b08137dea0719",
        "type": "template",
        "z": "01214dc77e323413",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "a4279354f61e6749"
            ]
        ]
    },
    {
        "id": "a4279354f61e6749",
        "type": "rbe",
        "z": "01214dc77e323413",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 210,
        "y": 920,
        "wires": [
            [
                "6ef4e26c43b2d57e"
            ]
        ]
    },
    {
        "id": "3fc3b74aba810ac9",
        "type": "websocket in",
        "z": "01214dc77e323413",
        "name": "",
        "x": 100,
        "y": 840,
        "wires": [
            [
                "df1b08137dea0719"
            ]
        ]
    },
    {
        "id": "cb9d86aa26de4af9",
        "type": "link out",
        "z": "01214dc77e323413",
        "name": "DEFINIR SENSOR ",
        "mode": "link",
        "links": [],
        "x": 55,
        "y": 900,
        "wires": []
    },
    {
        "id": "7a1115d56dceafd3",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Crear_Tabla_Control",
        "func": "msg.topic = \"USE \" + flow.get('DBname') + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\n\nmsg.topic += \"CREATE TABLE CONTROL (\";\nmsg.topic += \"`FechaHora` datetime NULL, \";\nmsg.topic += \"ORDEN_LECTURA_general VARCHAR(50),\";\nmsg.topic += \"ORDEN_LECTURA_sensores VARCHAR(50),\";\nmsg.topic += \"ORDEN_LECTURA_tipo VARCHAR(50),\";\nmsg.topic += \"ORDEN_LECTURA_email VARCHAR(50)\"; \nmsg.topic += \");\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 540,
        "wires": [
            [
                "f814e0374602b180"
            ]
        ]
    },
    {
        "id": "cff88ffe0435daa5",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "-----------------------------------------------------AÑADIR PROCEDIMIENTOS INDIVIDUALES---------------------------------------",
        "info": "",
        "x": 690,
        "y": 720,
        "wires": []
    },
    {
        "id": "e3b464ef9f401fb3",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Crear _tabla ERROR LOG",
        "func": "msg.topic = \"USE \" + flow.get('DBname') + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\n\nmsg.topic += \"CREATE TABLE Errorlog (\";\nmsg.topic += \"FechaHora DATETIME,\";\nmsg.topic += \"Error VARCHAR(50)\";\nmsg.topic += \");\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 420,
        "wires": [
            [
                "7f3bfce05d44ab6c"
            ]
        ]
    },
    {
        "id": "4f37ef79f740eb81",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Crear_TablaGeneral",
        "func": "let dbName = flow.get('DBname');\nlet adicional1 = flow.get('Adicional1');\nlet adicional2 = flow.get('Adicional2');\nlet adicional3 = flow.get('Adicional3');\nlet adicional4 = flow.get('Adicional4');\nlet adicional5 = flow.get('Adicional5');\nlet adicional6 = flow.get('Adicional6');\nlet adicional7 = flow.get('Adicional7');\nlet adicional8 = flow.get('Adicional8');\nlet adicional9 = flow.get('Adicional9');\nlet adicional10 = flow.get('Adiciona110');\nlet adicional11 = flow.get('Adicional11');\nlet adicional12 = flow.get('Adicional12');\nlet adicional13 = flow.get('Adicional3');\nlet adicional14 = flow.get('Adicional4');\nlet adicional15 = flow.get('Adicional5');\n\nmsg.topic = \"USE \" + dbName + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\nmsg.topic += \"CREATE TABLE General (\";\nmsg.topic += \"9FechaHora DATETIME,\";\nmsg.topic += \"1LOTE VARCHAR(50),\";\nmsg.topic += \"2RECETA VARCHAR(50),\";\nmsg.topic += \"3PROCESO VARCHAR(50),\";\nmsg.topic += \"4FASE VARCHAR(50),\";\nmsg.topic += \"5OPERARIO VARCHAR(50),\";\nmsg.topic += \"zAVANCE_MANUAL VARCHAR(50),\";\nmsg.topic += \"zABORTAR VARCHAR(50),\";\nmsg.topic += \"zerror_ciclo VARCHAR(50),\"\n\nif (adicional1) {\n    msg.topic += adicional1 + \" VARCHAR(50),\";\n}\n\nif (adicional2) {\n    msg.topic += adicional2 + \" VARCHAR(50),\";\n}\n\nif (adicional3) {\n    msg.topic += adicional3 + \" VARCHAR(50),\";\n}\n\nif (adicional4) {\n    msg.topic += adicional4 + \" VARCHAR(50),\";\n}\n\nif (adicional5) {\n    msg.topic += adicional5 + \" VARCHAR(50),\";\n}\n\nif (adicional6) {\n    msg.topic += adicional6 + \" VARCHAR(50),\";\n}\n\nif (adicional7) {\n    msg.topic += adicional7 + \" VARCHAR(50),\";\n}\n\nif (adicional8) {\n    msg.topic += adicional8 + \" VARCHAR(50),\";\n}\n\nif (adicional9) {\n    msg.topic += adicional9 + \" VARCHAR(50),\";\n}\n\nif (adicional10) {\n    msg.topic += adicional10 + \" VARCHAR(50),\";\n}\n\nif (adicional11) {\n    msg.topic += adicional11 + \" VARCHAR(50),\";\n}\n\nif (adicional12) {\n    msg.topic += adicional12 + \" VARCHAR(50),\";\n}\n\n\nif (adicional13) {\n    msg.topic += adicional13 + \" VARCHAR(50),\";\n}\n\n\nif (adicional14) {\n    msg.topic += adicional14 + \" VARCHAR(50),\";\n}\n\n\nif (adicional15) {\n    msg.topic += adicional15 + \" VARCHAR(50),\";\n}\n\n\n\nmsg.topic += \"ERROR_CICLO VARCHAR(50)\";\nmsg.topic += \");\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 300,
        "wires": [
            [
                "9ba3eb913e9d17f6"
            ]
        ]
    },
    {
        "id": "52eb7bac2cc397ba",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Agregar a la tabla de Control ",
        "func": "\n\n/*Este nodo /*Este nodo envía a el nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n/* Este nodo envía al nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n*/\n\nmsg.topic = \"ALTER TABLE `\" + flow.get('DBname') + \"`.control \";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"C` varchar(50);\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "e0259d41e0b44570"
            ]
        ]
    },
    {
        "id": "0d88fde1ae93167c",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Agregar a la tabla de Control ",
        "func": "\n\n/*Este nodo /*Este nodo envía a el nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n/* Este nodo envía al nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n*/\n\nmsg.topic = \"ALTER TABLE `\" + flow.get('DBname') + \"`.control \";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"C` varchar(50);\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 980,
        "wires": [
            [
                "ed20e139ad6083fd"
            ]
        ]
    },
    {
        "id": "095c0680cc08d346",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Agregar a la tabla de Control ",
        "func": "\n\n/*Este nodo /*Este nodo envía a el nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n/* Este nodo envía al nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n*/\n\nmsg.topic = \"ALTER TABLE `\" + flow.get('DBname') + \"`.control \";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"C` varchar(50),\";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"CA` varchar(50);\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1500,
        "wires": [
            [
                "f2b13dff4ada2905"
            ]
        ]
    },
    {
        "id": "bf9899f7df144e8e",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Agregar a la tabla de Control",
        "func": "\n\n/*Este nodo /*Este nodo envía a el nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n/* Este nodo envía al nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n*/\n\nmsg.topic = \"ALTER TABLE `\" + flow.get('DBname') + \"`.control \";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"C` varchar(50);\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1760,
        "wires": [
            [
                "8440928386a64a71"
            ]
        ]
    },
    {
        "id": "015cd98097dcf280",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "Crear_Tabla_BITVIDA",
        "func": "msg.topic = \"USE \" + flow.get('DBname') + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\n\nmsg.topic += \"CREATE TABLE BITVIDA (\";\nmsg.topic += \"ID VARCHAR(50),\";\nmsg.topic += \"BIT VARCHAR(50)\"; \nmsg.topic += \");\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 600,
        "wires": [
            [
                "504a6e695a8dd584"
            ]
        ]
    },
    {
        "id": "c0f662f2f4590c76",
        "type": "function",
        "z": "01214dc77e323413",
        "name": "PROC MAQUINAS",
        "func": "msg.topic = \"DELIMITER $$ CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizar_nombres_basedatos_int`() BEGIN DECLARE done BOOLEAN DEFAULT FALSE; DECLARE db_name VARCHAR(255); DECLARE cur CURSOR FOR SELECT SCHEMA_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME LIKE 'int_%'; DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; OPEN cur; read_loop: LOOP FETCH cur INTO db_name; IF done THEN LEAVE read_loop; END IF; IF NOT EXISTS (SELECT 1 FROM maquinas WHERE nombre = db_name) THEN INSERT INTO maquinas (nombre) VALUES (db_name); END IF; END LOOP; CLOSE cur; END$$ DELIMITER ; \"\nmsg.topic += \");\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 660,
        "wires": [
            [
                "504a6e695a8dd584"
            ]
        ]
    },
    {
        "id": "251ab34d5e454adb",
        "type": "comment",
        "z": "01214dc77e323413",
        "name": "LISTADO DE MAQUINAS",
        "info": "LC01\nLC02\nRECEPCION\n",
        "x": 590,
        "y": 2260,
        "wires": []
    },
    {
        "id": "3b194b58070bdc07",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "c13c1102891e69af",
                "8a65eadfafa3efab"
            ]
        ]
    },
    {
        "id": "9ba3eb913e9d17f6",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 300,
        "wires": [
            [
                "6c742866dacb37a4",
                "8a65eadfafa3efab",
                "2c9605a2f333c068"
            ]
        ]
    },
    {
        "id": "392d93442c227c84",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1120,
        "wires": [
            [
                "7954442b6dc6b51a",
                "0282c5bf71221c66"
            ]
        ]
    },
    {
        "id": "6cc99adea94e930d",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1180,
        "wires": [
            [
                "351c2d3a78246a27",
                "52eb7bac2cc397ba"
            ]
        ]
    },
    {
        "id": "e824b1ec5fe660ab",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1880,
        "wires": [
            [
                "8227d039bbdde904"
            ]
        ]
    },
    {
        "id": "31f4e081ae984ca7",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 360,
        "wires": [
            [
                "833c547704d220e5",
                "d449e20e77d37cb4",
                "e3b464ef9f401fb3"
            ]
        ]
    },
    {
        "id": "4aefaf9590ea5553",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "1ff8b065608ea02b",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1380,
        "wires": [
            [
                "ecdc0a7264c6e4de",
                "b0bae04e36308867"
            ]
        ]
    },
    {
        "id": "7e81fc262eec4bf8",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1440,
        "wires": [
            [
                "e69afdbfbdca469c",
                "095c0680cc08d346"
            ]
        ]
    },
    {
        "id": "cfaf1745f335fda4",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1640,
        "wires": [
            [
                "ab4bca5c55a9dcb7",
                "0b6d25a7d95d89aa"
            ]
        ]
    },
    {
        "id": "647775ea4668dc12",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1700,
        "wires": [
            [
                "984916db9d591701",
                "bf9899f7df144e8e"
            ]
        ]
    },
    {
        "id": "f82d2f0e24df2584",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 860,
        "wires": [
            [
                "31f3ec8969a7c9f5",
                "ed8b190219f1d227"
            ]
        ]
    },
    {
        "id": "80d66c7b8e63ce74",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 920,
        "wires": [
            [
                "2b4389b21edf8176",
                "0d88fde1ae93167c"
            ]
        ]
    },
    {
        "id": "f814e0374602b180",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 540,
        "wires": [
            [
                "015cd98097dcf280"
            ]
        ]
    },
    {
        "id": "7f3bfce05d44ab6c",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 420,
        "wires": [
            [
                "dd4c04fb032c32d8"
            ]
        ]
    },
    {
        "id": "e0259d41e0b44570",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "ed20e139ad6083fd",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "f2b13dff4ada2905",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "8440928386a64a71",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "504a6e695a8dd584",
        "type": "mysql",
        "z": "01214dc77e323413",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 600,
        "wires": [
            [
                "c0f662f2f4590c76"
            ]
        ]
    },
    {
        "id": "5ebacdd5ea1fe83b",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "Salidas Http CON TOKEN",
        "info": "",
        "x": 2590,
        "y": 1400,
        "wires": []
    },
    {
        "id": "3da708bc22778099",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "Escritura de errores de Envío en la base de Datos de la Máquina.",
        "info": "// Este nodo reconoce automaticamente el nombre de la máquina cuando se inserta en el flow \"Añadir máquinas y equipos\".\n//Después crea una nueva tabla en la base de datos de la máquina bajo el nombre \"http_error_logs\".\n//En esta tabla se registran todos los errores de envío del nodo http request.",
        "x": 3210,
        "y": 1260,
        "wires": []
    },
    {
        "id": "44bc289cc4b6944a",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = (msg.payload)\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 1520,
        "wires": [
            [
                "72658105838603bf"
            ]
        ]
    },
    {
        "id": "5f6ad692b2655f24",
        "type": "link in",
        "z": "d306f8b3fbbeafc0",
        "name": "Definir_Máquina",
        "links": [],
        "x": 3595,
        "y": 1520,
        "wires": [
            [
                "44bc289cc4b6944a"
            ]
        ]
    },
    {
        "id": "c68082c3bcb6a0e9",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "PAYLOAD TO SQL",
        "func": "flow.get('Maquina') \nflow.get('DBname')\n\n\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".http_error_logs VALUES(\" +(msg.payload)+ \");\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1560,
        "wires": [
            [
                "72658105838603bf",
                "6d9c13630780bc25"
            ]
        ]
    },
    {
        "id": "72658105838603bf",
        "type": "debug",
        "z": "d306f8b3fbbeafc0",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3960,
        "y": 1560,
        "wires": []
    },
    {
        "id": "82287716f57f1475",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "FILTRADO DE ERROR",
        "func": "// Verificar si el payload contiene \"Requesterror\"\nif (msg.payload && typeof msg.payload === 'string' && msg.payload.includes('RequestError:')) {\n    // Si el payload contiene \"Requesterror\", mantener el payload sin cambios\n    return msg;\n} else {\n    // Si no contiene \"Requesterror\", no enviar ningún payload\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 1600,
        "wires": [
            [
                "c68082c3bcb6a0e9"
            ]
        ]
    },
    {
        "id": "7343c20eef44eeab",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "Prepare TOKEN",
        "func": "var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://192.168.9.163/post_handler.php';\nmsg.headers = {\n    'content-type': 'application/json',\n    'TOKEN': TOKEN\n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = {\n    'TOKEN': TOKEN\n};\n\nmsg.payload = dataToSend;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 1520,
        "wires": [
            [
                "6f25fe31dd53953a"
            ]
        ]
    },
    {
        "id": "26f24ddf8bb299fe",
        "type": "http request",
        "z": "d306f8b3fbbeafc0",
        "name": "HTTP Request to External App",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2610,
        "y": 1600,
        "wires": [
            [
                "ec22e181230d9a7e",
                "82287716f57f1475",
                "9c07078b78cac7bd",
                "7af1bebce9d29106"
            ]
        ]
    },
    {
        "id": "ec22e181230d9a7e",
        "type": "debug",
        "z": "d306f8b3fbbeafc0",
        "name": "Debug Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2650,
        "y": 1640,
        "wires": []
    },
    {
        "id": "6f25fe31dd53953a",
        "type": "json",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2530,
        "y": 1560,
        "wires": [
            [
                "26f24ddf8bb299fe"
            ]
        ]
    },
    {
        "id": "6797eb1bcb74493f",
        "type": "inject",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2540,
        "y": 1480,
        "wires": [
            [
                "7343c20eef44eeab"
            ]
        ]
    },
    {
        "id": "f42b448cb7cfa45e",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "LOCAL",
        "info": "",
        "x": 2810,
        "y": 1420,
        "wires": []
    },
    {
        "id": "f0e75add933bfa6f",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "info": "http://192.168.9.163/post_handler.php\n+ flow.get('token')",
        "x": 2840,
        "y": 1540,
        "wires": []
    },
    {
        "id": "7af1bebce9d29106",
        "type": "debug",
        "z": "d306f8b3fbbeafc0",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 1660,
        "wires": []
    },
    {
        "id": "9c07078b78cac7bd",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "ENVIA DATOS SI COINCIDE EL TOKEN",
        "func": "// Obtener el valor del token desde el contexto de flow\nvar token = flow.get('TOKEN');\nvar data = flow.get(\"ALUCOATJSON\");\n// Verificar si el token está presente en el payload y reemplazar si es necesario\nif (msg.payload !== undefined && token !== undefined && msg.payload === token) {\n    // Obtener el valor almacenado en el contexto flow (ALUCOATJSON)\n    var dataToSend = data;\n\n    // Verificar si ALUCOATJSON está definido y no es nulo\n    if (dataToSend !== undefined && dataToSend !== null) {\n        // Configurar los detalles del mensaje para enviar una solicitud POST\n        msg.method = 'POST';\n        msg.url = 'http://192.168.9.163/post_handler.php';\n        msg.headers = {\n            'content-type': 'application/json'\n        };\n        // Configurar el payload con los datos a enviar\n        msg.payload = {\n         \"Hola\": 12\n        };;\n\n        // Enviar el mensaje con los detalles configurados\n        return msg; // Devolver el mensaje para continuar con el flujo\n    } else {\n        node.error(\"ALUCOATJSON no está definido o es nulo\");\n    }\n} else {\n    node.warn(\"El token no está presente en el payload o no coincide con el token almacenado\");\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2640,
        "y": 1680,
        "wires": [
            [
                "daad803ccf9d72ca",
                "92d0c328361e6d34"
            ]
        ]
    },
    {
        "id": "92d0c328361e6d34",
        "type": "http request",
        "z": "d306f8b3fbbeafc0",
        "name": "HTTP Request to External App",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2610,
        "y": 1780,
        "wires": [
            [
                "82287716f57f1475"
            ]
        ]
    },
    {
        "id": "d1e1e2b6683cebbf",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "¿QUIÉN ACTIVA LA DECLARACIÓN?",
        "info": "",
        "x": 3670,
        "y": 1440,
        "wires": []
    },
    {
        "id": "3deabb03f2401a85",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 1480,
        "wires": [
            [
                "174f1605767a45f7"
            ]
        ]
    },
    {
        "id": "174f1605767a45f7",
        "type": "debug",
        "z": "d306f8b3fbbeafc0",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4000,
        "y": 1460,
        "wires": []
    },
    {
        "id": "70a231e8d744dc7e",
        "type": "link in",
        "z": "d306f8b3fbbeafc0",
        "name": "Definir Sensor 2",
        "links": [],
        "x": 3595,
        "y": 1480,
        "wires": [
            [
                "3deabb03f2401a85"
            ]
        ]
    },
    {
        "id": "9820f6e9007fe8dd",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "PENDIENTE DE DECLARAR VARIABLE PARA EL ENVIO",
        "info": "",
        "x": 2670,
        "y": 1820,
        "wires": []
    },
    {
        "id": "776db09e1be85481",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "ENDPOINTS QUERY ALUCOAT",
        "info": "Agregar Token variable",
        "x": 370,
        "y": 1520,
        "wires": []
    },
    {
        "id": "daad803ccf9d72ca",
        "type": "json",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2610,
        "y": 1740,
        "wires": [
            [
                "92d0c328361e6d34"
            ]
        ]
    },
    {
        "id": "b7819567f65607b4",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "info": "",
        "x": 2740,
        "y": 1500,
        "wires": []
    },
    {
        "id": "02ec2ab4eb33bf56",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "URL ALUCOAT",
        "info": "'https://sigafactorydes.aliberico.com/apisignals/parameter/hist/testing'",
        "x": 2520,
        "y": 2080,
        "wires": []
    },
    {
        "id": "f36aca97f7a1689a",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "TOKEN",
        "info": " 'Authorization': 'Bearer ' + flow.get('token')",
        "x": 2350,
        "y": 2080,
        "wires": []
    },
    {
        "id": "14b32baaee3244a5",
        "type": "inject",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "sg41",
        "payloadType": "str",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "755c97708dd7a05c"
            ]
        ]
    },
    {
        "id": "284611cc7b814be4",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "SET SENSOR ",
        "func": "flow.set(\"sensor\", msg.payload);\nvar Sensor= flow.get(\"sensor\");\nmsg.payload=Sensor\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "d952871de335aad1",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "DECLARACION DE VARIABLE DE PAQUETE DE ENVÍO AUTOMÁTICO 1 ",
        "func": "flow.set(\"ALUCOATJSON\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "755c97708dd7a05c",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "FLOW SET MAQUINA Y BDD",
        "func": "flow.set('Maquina', msg.payload)\n\nflow.set('DBname', \"INT_\" + flow.get('Maquina'));\n\nmsg.payload = flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f7cf31afd322d7b8",
        "type": "link in",
        "z": "d306f8b3fbbeafc0",
        "name": "Cambiar de Maquina ",
        "links": [],
        "x": 125,
        "y": 80,
        "wires": [
            [
                "755c97708dd7a05c"
            ]
        ]
    },
    {
        "id": "3e48562c4d46d06e",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "DECLARACIÓN DE VARIABLES EN EL FLOW",
        "info": "",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "f7a8b525922d4c79",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "DECLARACION DE VARIABLE DE PAQUETE DE ENVÍO AUTOMÁTICO 2",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "dc81e66a7a7dde0a",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "DECLARACION DE VARIABLE DE PAQUETE DE ENVÍO AUTOMÁTICO 3",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c9f1f629cf5a6790",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "DEFINICION DE RANDOM",
        "func": "msg.payload = Math.floor(Math.random() * 12) + 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 280,
        "wires": [
            [
                "0a5305663a7c6ed8"
            ]
        ]
    },
    {
        "id": "0a5305663a7c6ed8",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "TOKEN",
        "func": "var TOKEN= msg.payload\nflow.set(\"TOKEN\",TOKEN);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "683aa7e0a7a9e1e5",
        "type": "inject",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4.6743217",
        "payloadType": "num",
        "x": 360,
        "y": 340,
        "wires": [
            [
                "0a5305663a7c6ed8"
            ]
        ]
    },
    {
        "id": "8f3761cdcfae566c",
        "type": "link in",
        "z": "d306f8b3fbbeafc0",
        "name": "link in 20",
        "links": [],
        "x": 125,
        "y": 120,
        "wires": [
            [
                "284611cc7b814be4"
            ]
        ]
    },
    {
        "id": "af1d36cc269ea440",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "ENTRADA PENDIENTE",
        "info": "",
        "x": 140,
        "y": 120,
        "wires": []
    },
    {
        "id": "0e7f3e6141c9dbd0",
        "type": "file in",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 340,
        "y": 380,
        "wires": [
            [
                "0a5305663a7c6ed8"
            ]
        ]
    },
    {
        "id": "566c9c9514be4911",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "info": "10/1/2024, 1:28:25 PMnode: debug 2010/1/2024, 1:28:25 PMnode: debug 20SELECT `10LC01TT01`.`10LC01TT01`, `10LC01TT02`.`10LC01TT02`, `10LC01CT01`.`10LC01CT01`, DATE_FORMAT(`10LC01TT01`.FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM `LC01`.`10LC01TT01` JOIN `10LC01TT02` ON `10LC01TT02`.FechaHora = `10LC01TT01`.FechaHora JOIN `10LC01CT01` ON `10LC01CT01`.FechaHora = `10LC01TT01`.FechaHora WHERE `10LC01TT01`.FechaHora BETWEEN '2024-10-01 04:40:23' AND '2024-10-01 11:40:33'; : msg.payload : Object\n{ Maquina: \"INT_LC01\", Sensor: \"10LC01TT01,10LC01TT02,10LC01CT…\", FI: \"2024-10-01T02:40:23.228Z\", FF: \"2024-10-01T09:40:33.699Z\" }\n10/1/2024, 1:28:25 PMnode: 5b11a1e0d3404780\nmsg : error\n\"Error: Table 'LC01.10LC01TT01' doesn't exist\" : msg.payload : Object\n{ Maquina: \"INT_LC01\", Sensor: \"10LC01TT01,10LC01TT02,10LC01CT…\", FI: \"2024-10-01T02:40:23.228Z\", FF: \"2024-10-01T09:40:33.699Z\" }\n10/1/2024, 1:28:25 PMnode: 5b11a1e0d3404780\nmsg : error\n\"Error: Table 'LC01.10LC01TT01' doesn't exist\"\n\n10/9/2024, 9:27:29 AMnode: Paquete Enviadomsg : Object\n{ headers: object, _msgid: \"684b31d8a9c980a0\", payload: \"Datos generales almacenados co…\", method: \"POST\", url: \"http://127.0.0.1:80/Treal.php\" … }\n10/9/2024, 9:27:29 AMnode: debug 20\nSELECT `10LC02TT01`.`10LC02TT01`, ` 10LC02TT02`.` 10LC02TT02`, DATE_FORMAT(`10LC02TT01`.FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM INT_`LC02`.`10LC02TT01` JOIN ` 10LC02TT02` ON ` 10LC02TT02`.FechaHora = `10LC02TT01`.FechaHora WHERE `10LC02TT01`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n\n\n\n, 9:33:09 AMnode: Paquete Enviadomsg : Object\n{ headers: object, _msgid: \"97b0abcf51f4f0dd\", payload: \"Datos generales almacenados co…\", method: \"POST\", url: \"http://127.0.0.1:80/Treal.php\" … }\n10/9/2024, 9:33:09 AMnode: debug 20SELECT `10LC02TT01`.`10LC02TT01`, ` 10LC02TT02`.` 10LC02TT02`, DATE_FORMAT(`10LC02TT01`.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora FROM `LC02`.`10LC02TT01` JOIN `LC02`.` 10LC02TT02` ON `LC02`.` 10LC02TT02`.FechaHora = `10LC02TT01`.FechaHora WHERE `10LC02TT01`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n{ Maquina: \"LC02\", Sensor: \"10LC02TT01, 10LC02TT02\", FI: \"2024-10-09T00:25:55.311Z\", FF: \"2024-10-09T07:26:03.092Z\" }\n10/9/2024, 9:33:09 AMnode: 5b11a1\n\n\n\nOM alucoat.maquinas : msg.payload : array[4]\n[ object, object, object, object ]\n10/9/2024, 9:48:12 AMnode: Debug ResponseSELECT * FROM alucoat.maquinas : msg.payload : string[48]\n\"Nombre de las maquinas almacenados correctamente\"\n10/9/2024, 9:48:12 AMnode: IBERFOIL2SELECT * FROM alucoat.maquinas : msg.payload : string[48]\n\"Nombre de las maquinas almacenados correctamente\"\n10/9/2024, 9:48:12 AMnode: debug 20\nSELECT `10LC02TT01`.`10LC02TT01`, ` 10LC02TT02`.` 10LC02TT02`, DATE_FORMAT(`10LC02TT01`.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora FROM `INT_LC02`.`10LC02TT01` JOIN `INT_LC02`.` 10LC02TT02` ON `INT_LC02`.` 10LC02TT02`.FechaHora = `10LC02TT01`.FechaHora WHERE `10LC02TT01`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n{ Maquina: \"INT_LC02\", Sensor: \"10LC02TT01, 10LC02TT02\", FI: \"2024-10-09T00:25:55.311Z\", FF: \"2024-10-09T07:26:03.092Z\" }\n\n10/9/2024, 10:03:03 AMnode: debug 20SELECT `t1`.`10LC02TT02`, `t2`.`10LC02CT01`, DATE_FORMAT(`t1`.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora FROM `LC02`.`10LC02TT02` AS `t1` JOIN `LC02`.`10LC02CT01` AS `t2` ON ``t2``.FechaHora = `t1`.FechaHora WHERE `t1`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n{ Maquina: \"LC02\", Sensor: \"10LC02TT02,10LC02TT02,10\nECT * FROM alucoat.maquinas : msg.payload : array[4]\n[ object, object, object, object ]\n10/9/2024, 10:10:10 AMnode: Debug ResponseSELECT Sensor FROM INT_LC02.Sensores : msg.payload : string[48]\n\"Sensores almacenados correctamente en el archivo\"\n10/9/2024, 10:10:10 AMnode: Debug ResponseSELECT * FROM alucoat.maquinas : msg.payload : string[48]\n\"Nombre de las maquinas almacenados correctamente\"\n10/9/2024, 10:10:11 AMnode: debug 20\nSELECT `t1`.`10LC02TT02`, `t2`.`10LC02CT01`, DATE_FORMAT(`t1`.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora FROM INT_`LC02`.`10LC02TT02` AS `t1` JOIN INT_`LC02`.`10LC02CT01` AS `t2` ON `t2`.FechaHora = `t1`.FechaHora WHERE `t1`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n{ Maquina: \"LC02\", Sensor: ",
        "x": 1020,
        "y": 260,
        "wires": []
    },
    {
        "id": "cb11d767de9e0232",
        "type": "http in",
        "z": "d306f8b3fbbeafc0",
        "name": "Recepción de orden General",
        "url": "/Lotes",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 2600,
        "y": 260,
        "wires": [
            [
                "9a5876989f046e65",
                "eb10d1ee39298c88"
            ]
        ]
    },
    {
        "id": "9a5876989f046e65",
        "type": "http response",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2580,
        "y": 300,
        "wires": []
    },
    {
        "id": "4eaf3d5cf4656040",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "BLOCKEO DE RANGO",
        "func": "var FechaInicio = flow.get(\"FechaInicio\");  // Obtener la fecha de inicio del flujo\nvar FechaFin = flow.get(\"FechaFin\");        // Obtener la fecha de fin del flujo\n\n// Validar que ambas fechas estén definidas\nif (!FechaInicio || !FechaFin) {\n    // Si falta alguna de las fechas, simplemente devuelve el mensaje original\n    msg.payload = [{ \"ERROR\": \"Ha olvidado seleccionar una o ambas Fechas de selección\" }];\n    return msg;\n}\n\n// Convertir las fechas a objetos Date para realizar operaciones con ellas\nvar inicio = new Date(FechaInicio);\nvar fin = new Date(FechaFin);\n\n// Verificar si las fechas son válidas\nif (isNaN(inicio) || isNaN(fin)) {\n    // Si alguna de las fechas no es válida, devolver el mensaje original\n    msg.payload = [{ \"ERROR\":\"Ha olvidado seleccionar una o ambas Fechas de selección\"}];\n    msg.tipo = 2;\n    return msg;\n}\n\n// Calcular la diferencia en milisegundos entre las dos fechas\nvar diff = fin.getTime() - inicio.getTime();\n\n// Verificar si el rango entre las fechas es superior a 24 horas (86400000 ms)\nif (diff > 2592000000) {\n    // Si el rango es mayor a 24 horas, configurar el msg.payload y msg.tipo\n    msg.payload = [{ \"ERROR\":\"El rango horario que ha seleccionado es demasiado grande para esta consulta\" }];\n    msg.tipo = 1;\n    return msg;\n} else {\n    // Si el rango es menor o igual a 24 horas, devolver el mensaje tal cual\n    msg.tipo = 0;\n    msg.payload = msg.payload\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 260,
        "wires": [
            [
                "8ae85797a943a6d9"
            ]
        ]
    },
    {
        "id": "8ae85797a943a6d9",
        "type": "switch",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "property": "tipo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 3210,
        "y": 300,
        "wires": [
            [
                "4f001af5b915c7e8"
            ],
            [
                "039b02efef2cf871"
            ],
            []
        ]
    },
    {
        "id": "039b02efef2cf871",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "WARNINGS",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/sensorData_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 340,
        "wires": [
            [
                "3c653e2c1d58493e"
            ]
        ]
    },
    {
        "id": "4f001af5b915c7e8",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "SELECT LOTE",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicioLote = flow.get(\"FechaInicio\");\nvar FechaFinLote = flow.get(\"FechaFin\");\n\nvar query = \"SELECT *, DATE_FORMAT(3FechaInicioLote, '%Y-%m-%d %H:%i:%s') AS 3FechadeInicio, DATE_FORMAT(4FechaFinLote, '%Y-%m-%d %H:%i:%s') AS 4FechadeFin FROM INT_\" + Maquina + \".LOTE WHERE 3FechaInicioLote BETWEEN '\" + FechaInicioLote + \"' AND '\" + FechaFinLote + \"';\";\n\n  \nmsg.topic = query;\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 280,
        "wires": [
            [
                "056f151ad73f7e73"
            ]
        ]
    },
    {
        "id": "826aefdc3046e533",
        "type": "json",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3830,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3c653e2c1d58493e",
        "type": "http request",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 4050,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d922146b2dd34b6c",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "REGISTRO DE LOTES",
        "info": "",
        "x": 3060,
        "y": 160,
        "wires": []
    },
    {
        "id": "d3494fd6fc426f02",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "DEFINIR PROCESO (General)",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\nif (Maquina && Sensor && FechaInicio && FechaFin) {\n    var query = \"SELECT *, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM INT_\" + Maquina + \".\" + Sensor + \" WHERE FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n    msg.payload = query;\n    msg.topic = query;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "15b8e2d2108fee5d",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "DEFINIR PROCESO (General)",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\nif (Maquina && Sensor && FechaInicio && FechaFin) {\n    var query = \"SELECT PROCESO AS 2_PROCESO, FASE AS 3_FASE, AVANCE_MANUAL, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS 4_Fechahora, LOTE AS 1_LOTE, LITROS AS 5_LITROS, ABORTAR FROM INT_\" + Maquina + \".\" + Sensor + \" WHERE FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n    msg.payload = query;\n    msg.topic = query;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c63e72b73522b027",
        "type": "comment",
        "z": "d306f8b3fbbeafc0",
        "name": "DISEÑADO PARA ALUCOAT (EN DESUSO)",
        "info": "",
        "x": 3210,
        "y": 1320,
        "wires": []
    },
    {
        "id": "eb10d1ee39298c88",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "INSERCION EN FLOW",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    if (!isoDate) return null; // Manejar casos en los que la fecha no exista\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\nvar Sensor = msg.payload.Sensor;\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS', solo si existen\nvar FechaFinFormatted = FechaFin ? convertDateToMariaDBFormat(FechaFin) : null;\nvar FechaInicioFormatted = FechaInicio ? convertDateToMariaDBFormat(FechaInicio) : null;\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\nflow.set(\"Sensor\", Sensor);\n\n// Verificar y actualizar las fechas solo si están presentes en el payload\nif (FechaFin) {\n    flow.set(\"FechaFin\", FechaFinFormatted);\n}\nif (FechaInicio) {\n    flow.set(\"FechaInicio\", FechaInicioFormatted);\n}\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 320,
        "wires": [
            [
                "4eaf3d5cf4656040"
            ]
        ]
    },
    {
        "id": "6d9c13630780bc25",
        "type": "mysql",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 3960,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "056f151ad73f7e73",
        "type": "mysql",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 3660,
        "y": 300,
        "wires": [
            [
                "826aefdc3046e533"
            ]
        ]
    },
    {
        "id": "f56a3f94b7526813",
        "type": "http in",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "url": "/query",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 150,
        "y": 1740,
        "wires": [
            [
                "0ba94f9f6da3b5a4"
            ]
        ]
    },
    {
        "id": "0ba94f9f6da3b5a4",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "SET QUERY SIGA",
        "func": "flow.set(\"QUERYSIGA\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1740,
        "wires": [
          [ "7f5b1a70987f45d8" ]
        ]
      },
      
    {
        "id": "1d6340906d31f6f4",
        "type": "http response",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 560,
        "y": 1820,
        "wires": []
    },
    {
        "id": "609e7cdb45a1da44",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "SELECT",
        "func": "// Obtener el objeto de solicitud\nvar payload = msg.payload;\n\n// Extraer la información de la solicitud\nvar maquina = payload.Maquina;   // Nombre de la base de datos\nvar sensor = payload.Sensor;     // Nombre de la tabla\nvar fi = payload.FI;            // Fecha de inicio\nvar ff = payload.FF;            // Fecha de fin\n\n// Si no se proporcionan FI ni FF, la consulta SQL devolverá la última fila\nif (!fi && !ff) {\n    msg.topic = `SELECT CONVERT_TZ(FechaHora, '+00:00', '+02:00') AS FechaHora, ${sensor} AS value FROM ${maquina}.${sensor} ORDER BY FechaHora DESC LIMIT 1`;\n} else {\n    // Si FI y FF están definidos, la consulta SQL buscará un rango de fechas\n    msg.topic = `SELECT CONVERT_TZ(FechaHora, '+00:00', '+01:00') AS FechaHora, ${sensor} AS value FROM ${maquina}.${sensor} WHERE FechaHora >= '${fi}' AND FechaHora <= '${ff}'`;\n}\n\n// Devolver el mensaje con la consulta SQL\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1740,
        "wires": [
            [
                "dcd6c30290e26d54",
                "5d83bec0ed0ea351",
                "13c6fcde242e8517"
            ]
        ]
    },
    {
        "id": "dcd6c30290e26d54",
        "type": "mysql",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 820,
        "y": 1740,
        "wires": [
            [
                "8c02d6113b04e8a8",
                "cab99d4644bdb4ca",
                "a714ca1dd49e1ee3",
                "156361bc16b50355"
            ]
        ]
    },
    {
        "id": "8d2ebd3568b284f6",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "Response",
        "func": "var body= msg.payload\nmsg.payload = body;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "8c02d6113b04e8a8",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "Prepare TOKEN",
        "func": "//var TOKEN = flow.get(\"TOKEN\");\nvar TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXh0b1BsYW5vIjoiQjFfT05PRkYiLCJpYXQiOjE3NDA0MTY2MzZ9.YJtjHLR5QrwIErex-3dbYDB8bWX42IHWaJHaEe7w4KU\";\nmsg.method = 'POST';\n//msg.url = 'https://172.20.1.4/apisignals/sensors';\n//msg.url = 'http://10.105.11.4:1880/token';\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + TOKEN  \n};\n\n\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1740,
        "wires": [
            [
                "7f142b18968e6486"
            ]
        ]
    },
    {
        "id": "7f142b18968e6486",
        "type": "json",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1150,
        "y": 1780,
        "wires": [
            [
                "18f11cd3972b091f"
            ]
        ]
    },
    {
        "id": "3962bb449562458b",
        "type": "inject",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": " {\"sensorname\": \"CORTEDESBOB1\", \"value\": 1, \"datetime\": \"2025-02-14 12:12:22\"}",
        "payloadType": "json",
        "x": 1150,
        "y": 1700,
        "wires": [
            [
                "8c02d6113b04e8a8"
            ]
        ]
    },
    {
        "id": "18f11cd3972b091f",
        "type": "https-node",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "HTTPS",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://172.20.1.4/apisignals/sensors",
        "tls": "db098622d12e3ccf",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1320,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "156361bc16b50355",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "REV1",
        "func": "flow.set(\"REV\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "787d16b0a9d5e289",
        "type": "inject",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Maquina\":\"INT_B1\",\"Sensor\":\"VELOCIDADB1\"}",
        "payloadType": "json",
        "x": 170,
        "y": 1460,
        "wires": [
            [
                "916e8d0e9d539c29"
            ]
        ]
    },
    {
        "id": "da92821562ca0443",
        "type": "switch",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "",
        "property": "order",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1880,
        "wires": [
            [
                "1d6340906d31f6f4"
            ],
            [
                "8291693c181fe299"
            ]
        ]
    },
    {
        "id": "8291693c181fe299",
        "type": "http response",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 560,
        "y": 1940,
        "wires": []
    },
    {
        "id": "d385c95546e2682c",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "SET QUERYOUT ",
        "func": "// Guarda el valor de msg.payload en el flujo de trabajo\nflow.set(\"QUERYOUT\", msg.payload);\n\n// Recupera el valor de QUERYOUT desde el flujo de trabajo\nvar OUT = flow.get(\"QUERYOUT\");\n\n// Verifica si el valor recuperado es null, undefined o un array vacío\nif (OUT === null || OUT === undefined || (Array.isArray(OUT) && OUT.length === 0)) {\n    msg.error = 1;  // Si es null o vacío, se marca un error\n} else {\n    msg.error = 0;  // Si es válido, no hay error\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "916e8d0e9d539c29",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "SET QUERY SIGA",
        "func": "flow.set (\"QUERYSIGA1\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1460,
        "wires": [
            [
                "2acf332fc70db899"
            ]
        ]
    },
    {
        "id": "2acf332fc70db899",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "SELECT",
        "func": "// Obtener el objeto de solicitud\nvar payload = msg.payload;\n\n// Extraer la información de la solicitud\nvar maquina = payload.Maquina;   // Nombre de la base de datos\nvar sensor = payload.Sensor;     // Nombre de la tabla\nvar fi = payload.FI;            // Fecha de inicio\nvar ff = payload.FF;            // Fecha de fin\n\n// Si no se proporcionan FI ni FF, la consulta SQL devolverá la última fila\nif (!fi && !ff) {\n    msg.topic = `SELECT CONVERT_TZ(FechaHora, '+00:00', '+01:00') AS FechaHora, ${sensor} FROM ${maquina}.${sensor} ORDER BY FechaHora DESC LIMIT 1`;\n} else {\n    // Si FI y FF están definidos, la consulta SQL buscará un rango de fechas\n    msg.topic = `SELECT FechaHora, ${sensor} FROM ${maquina}.${sensor} WHERE FechaHora >= '${fi}' AND FechaHora <= '${ff}'`;\n}\n\n// Devolver el mensaje con la consulta SQL\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1460,
        "wires": [
            [
                "c37525123e632105"
            ]
        ]
    },
    {
        "id": "c37525123e632105",
        "type": "mysql",
        "z": "d306f8b3fbbeafc0",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 820,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "1c6e161125f11993",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "function 100",
        "func": "flow.set (\"QUERY2\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "cab99d4644bdb4ca",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "Set Flanco 1 OK ",
        "func": "flow.set (\"Flanco1\", 2)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "13c6fcde242e8517",
        "type": "delay",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 110,
        "y": 1880,
        "wires": [
            [
                "cdb433e98cd46b57"
            ]
        ]
    },
    {
        "id": "cdb433e98cd46b57",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "function 102",
        "func": "var OUT = flow.get(\"Flanco1\")\nvar dsiga = flow.get(\"DSIGA\");\nif (OUT === 1)\n{flow.set (\"Flanco1\", 1)\nmsg.payload = \"Petición Incorrecta\"\nmsg.order=1\nreturn msg; \n}\nelse \nif (OUT ===2)\n{msg.payload=dsiga\nmsg.order=2\nreturn msg;\n}\nelse\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1880,
        "wires": [
            [
                "1c6e161125f11993",
                "da92821562ca0443"
            ]
        ]
    },
    {
        "id": "5d83bec0ed0ea351",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "Set Flanco 1 FAIL ",
        "func": "flow.set (\"Flanco1\", 1)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "a714ca1dd49e1ee3",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "Set ",
        "func": "flow.set (\"DSIGA\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "5833bff452c24a38",
        "type": "http in",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "url": "/query",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 170,
        "y": 2040,
        "wires": [
            [
                "e6f29ed33bb6f66e"
            ]
        ]
    },
    {
        "id": "e6f29ed33bb6f66e",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "SET QUERY SIGA",
        "func": "flow.set(\"QUERYSIGA\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2040,
        "wires": [
            [
                "64e998959cbcfd82"
            ]
        ]
    },
    {
        "id": "64e998959cbcfd82",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "SELECT",
        "func": "var payload = msg.payload;\nvar maquina = payload.Maquina;\nvar sensor = payload.Sensor;\nvar fi = payload.FI;\nvar ff = payload.FF;\nif (!fi && !ff) {\n    msg.topic = `SELECT CONVERT_TZ(FechaHora, '+00:00', '+02:00') AS FechaHora, ${sensor} AS value FROM ${maquina}.${sensor} ORDER BY FechaHora DESC LIMIT 1`;\n} else {\n    msg.topic = `SELECT CONVERT_TZ(FechaHora, '+00:00', '+01:00') AS FechaHora, ${sensor} AS value FROM ${maquina}.${sensor} WHERE FechaHora >= '${fi}' AND FechaHora <= '${ff}'`;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2040,
        "wires": [
            [
                "3e86fa067e7d3103",
                "a7dbfc1be2c5b553",
                "d747b71466a20caf"
            ]
        ]
    },
    {
        "id": "3e86fa067e7d3103",
        "type": "mysql",
        "z": "d306f8b3fbbeafc0",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 800,
        "y": 2040,
        "wires": [
            [
                "0b08190194d68070",
                "ae9902a6224e4c93"
            ]
        ]
    },
    {
        "id": "0b08190194d68070",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "name": "Verificar Respuesta",
        "func": "var response = msg.payload;\nif (!response || response.length === 0) {\n    msg.payload = { error: 'No data found' };\n    msg.statusCode = 400;\n} else {\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2040,
        "wires": [
            [
                "d4bef6a6c2a51785"
            ]
        ]
    },
    {
        "id": "d4bef6a6c2a51785",
        "type": "http response",
        "z": "d306f8b3fbbeafc0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 2040,
        "wires": []
    },
    {
        "id": "a7dbfc1be2c5b553",
        "type": "delay",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 2160,
        "wires": [
            [
                "7def176a4e030c5a"
            ]
        ]
    },
    {
        "id": "d747b71466a20caf",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "Set Flanco 1 FAIL ",
        "func": "flow.set (\"Flanco1\", 1)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 841.7142944335938,
        "y": 1954.2857666015625,
        "wires": [
            []
        ]
    },
    {
        "id": "ae9902a6224e4c93",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "Set Flanco 1 OK ",
        "func": "flow.set (\"Flanco1\", 2)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1098.857177734375,
        "y": 1952.857177734375,
        "wires": [
            []
        ]
    },
    {
        "id": "7def176a4e030c5a",
        "type": "function",
        "z": "d306f8b3fbbeafc0",
        "d": true,
        "name": "function 103",
        "func": "var OUT = flow.get(\"Flanco1\")\nvar dsiga = flow.get(\"DSIGA\");\nif (OUT === 1)\n{flow.set (\"Flanco1\", 1)\nmsg.payload = \"Petición Incorrecta\"\nmsg.order=1\n msg.statusCode = 400;\nreturn msg; \n}\nelse \nif (OUT ===2)\n{return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2160,
        "wires": [
            [
                "d4bef6a6c2a51785"
            ]
        ]
    },
    {
        "id": "c24cbbd02f3b5f04",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "------------------------------------------------------------------------*ESCRITURA EN GENERAL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2020,
        "y": 700,
        "wires": []
    },
    {
        "id": "9a6ed0b2ccbb6c9f",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "269c3f02f4b7bb02",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = 'RECEPCION'\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "aa0c2116a883ab3d"
            ]
        ]
    },
    {
        "id": "aa0c2116a883ab3d",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 320,
        "wires": []
    },
    {
        "id": "495adde7b501977e",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1220,
        "wires": [
            [
                "403a24cd2982640d"
            ]
        ]
    },
    {
        "id": "dd124b52dd85b42f",
        "type": "switch",
        "z": "d86c19fe420220cb",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1220,
        "wires": [
            [
                "403edc3fe7a7c13e"
            ],
            [
                "495adde7b501977e"
            ]
        ]
    },
    {
        "id": "403a24cd2982640d",
        "type": "switch",
        "z": "d86c19fe420220cb",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1220,
        "wires": [
            [
                "4037ae4362fa232c"
            ],
            [
                "9f593257dfd9757c"
            ]
        ]
    },
    {
        "id": "cef2b8bc4585c328",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LOOP DEVOLUCION O ERROR",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1160,
        "wires": [
            [
                "0ab5cae0748fcdc1"
            ]
        ]
    },
    {
        "id": "0ab5cae0748fcdc1",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<12){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "dd124b52dd85b42f"
            ]
        ]
    },
    {
        "id": "9f593257dfd9757c",
        "type": "delay",
        "z": "d86c19fe420220cb",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2600,
        "y": 1260,
        "wires": [
            [
                "0ab5cae0748fcdc1"
            ]
        ]
    },
    {
        "id": "403edc3fe7a7c13e",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1160,
        "wires": [
            [
                "d924975f22b7aa25"
            ]
        ]
    },
    {
        "id": "8594c8b64cb891f1",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Definir_MaxSensor",
        "func": "/*Este nodo declara la variable de flow MaxSensores para conocer\ncuantos sensores hay definidos en la máquina\n*/\nvar valor = Object.values(msg.payload);\nflow.set('MaxSensor',valor['0']);\nmsg.payload = flow.get('MaxSensor');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "38a01f48d3a95a72",
                "350dd598c70b4834"
            ]
        ]
    },
    {
        "id": "38a01f48d3a95a72",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "Numero de sensores1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 460,
        "wires": []
    },
    {
        "id": "d3fb55080971d78a",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Buscar Numero de sensores",
        "func": "/*Este nodo consulta la tabla Sensores para saber cuántas\nentradas existen en la tabla, siendo cada una de ellas\nun sensor\n*/\n\nmsg.topic = \"SELECT COUNT(*) FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "ec96474d88fc3d2a"
            ]
        ]
    },
    {
        "id": "f6de6eacf96c60a9",
        "type": "split",
        "z": "d86c19fe420220cb",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2070,
        "y": 460,
        "wires": [
            [
                "8594c8b64cb891f1"
            ]
        ]
    },
    {
        "id": "5b4f9c074cb8b0c9",
        "type": "trigger",
        "z": "d86c19fe420220cb",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1420,
        "y": 340,
        "wires": [
            [
                "269c3f02f4b7bb02",
                "d3fb55080971d78a"
            ]
        ]
    },
    {
        "id": "6339cbc0c23df43c",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "FechaHora",
        "func": "/*Declara la valiable FechaHora que contiene la fecha y hora \nque será utilizada en el flow\n*/\nvar now = new Date(); \nvar año = now.getFullYear();\nvar mes = now.getMonth()+1; \nvar dia = now.getDate();\nvar hora = now.getHours();\nvar minuto = now.getMinutes();\nvar segundo = now.getSeconds(); \n\n\nif(mes.toString().length == 1) {\n    mes = '0'+mes;\n}\n\nif(dia.toString().length == 1) {\n    dia = '0'+dia;\n} \n\nif(hora.toString().length == 1) {\n    hora = '0'+hora;\n}\n\nif(minuto.toString().length == 1) {\n    minuto = '0'+minuto;\n    \n}\n\nif(segundo.toString().length == 1) {\n    segundo = '0'+segundo;\n} \n\n\nvar FechaHoralocal = año+'-'+mes+'-'+dia+' '+hora+':'+minuto+':'+segundo;\nflow.set('FechaHora',FechaHoralocal);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "fc8d3b0de9b15f5f",
        "type": "rbe",
        "z": "d86c19fe420220cb",
        "name": "Block unless value changes",
        "func": "deadband",
        "gap": "0",
        "start": "1",
        "inout": "out",
        "septopics": true,
        "property": "payload['ORDEN_LECTURA_general']",
        "topi": "topic",
        "x": 2460,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "ec02abd5f82f65c0",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "EscrituraErrorCiclo",
        "func": "/*Este nodo se encarga de notificar que ha habido un error\ndurante el proceso de escritura, resultando en que el PLC\nno recibió la orden de setear la variable OrdenLectura a 0 y\ntuvo que avanzar de manera automática tras esperar la orden\ndurante 60 segundos sin resultado\n*/\nflow.set('ERROR_CICLO', msg.payload['ERROR_CICLO']);\n\nif (flow.get('ERROR_CICLO') == 1) {\n    msg.topic = \"INSERT INTO \" + flow.get('DBname') + \".General (error_ciclo) VALUES ('\";\n    msg.topic += flow.get('ERROR_CICLO') + \"');\";\n\n    msg.topic = msg.topic;\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1280,
        "wires": [
            [
                "fedb02092c1f2608"
            ]
        ]
    },
    {
        "id": "5fb321b10c66ceec",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Cantidad de producciones?",
        "func": "flow.set('CantidadProducciones',msg.payload['CantidadProducciones']);\nmsg.payload = flow.get('CantidadProducciones');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "b7e2722bac35080f",
                "85860b2647d12b83"
            ]
        ]
    },
    {
        "id": "b7e2722bac35080f",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "CONSULTA3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 560,
        "wires": []
    },
    {
        "id": "32c3300027087d2e",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Buscar info los sensores",
        "func": "/*Este nodo realiza un Query para obtener la informacion\ndel nombre de cada sensor para declararlos como variables de\nflow y que puedan ser utilizados en el apartado de *Escritura en Sensores*\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "c322ad98c374b70b"
            ]
        ]
    },
    {
        "id": "551fe99315c89516",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Declaracion de sensores",
        "func": "// Este nodo guarda el nombre de cada sensor en una variable de flujo para ser utilizada en este flujo\n\n// Obtener el valor actual de 'i' de la variable de flujo (si 'i' no está definida, se asumirá inicialmente como 0)\nvar i = flow.get('i') || 0;\n\n// Obtener el array de sensores del mensaje de entrada\nvar array = Object.values(msg.payload);\n\n// Iterar a través de cada sensor hasta el número máximo de sensores definido en 'MaxSensor'\nfor (; i < flow.get('MaxSensor') && i < array.length; i++) {\n    // Guardar el objeto sensor actual en una variable de flujo con un nombre único\n    flow.set('Sensor' + (i + 1), array[i].Sensor);\n}\n\n// Guardar el valor actual de 'i' en la variable de flujo\nflow.set('i', i);\n\n// Devolver el mensaje de entrada sin cambios\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 520,
        "wires": [
            [
                "9962c6633fa98058",
                "91dfc7f3d26f7823"
            ]
        ]
    },
    {
        "id": "9962c6633fa98058",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "CONSULTA2(ARRAY) SENSORES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 520,
        "wires": []
    },
    {
        "id": "bd271b546be3384b",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "------------------------------------------------------------------------*DATOS DE MAQUINA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de cada máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 830,
        "y": 440,
        "wires": []
    },
    {
        "id": "334455ccd9a8906c",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "Consultas de informacion necesaria para el programa",
        "info": "",
        "x": 1740,
        "y": 380,
        "wires": []
    },
    {
        "id": "d8fd258e9b439c67",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "INSTRUCCIONES ------ POR FAVOR LEER PARA CORRECTA CONFIGURACIÓN DEL FLOW",
        "info": "INFORMACION PARA CONFIGURAR EL FLOW DE MAQUINA:\n\nCuando se quiera configurar este flow por primera vez el usuario debe editar 3 nodos:\n\n-`Definir_Maquina`: Se debe asignar a la variable Nombre el nombre que tenga nuestra máquina. (var Nombre = 'Nombre de la máquina')\n\n-`Definir_SQL`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo Connection. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro servidor de base de datos los campos Server, Port, Username y Password.\n\n-`Definir_PLC`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo PLC. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro PLC los campos Adress y Port bajo la pestaña Connection. Además, en la pestaña Variables debemos declarar la dirección y nombre de cada una de nuestras variables.\n\n`IMPORTANTE`: Recordar que el nombre que demos a las variables de sensores deben ser iguales que los otorgados a estos mismos sensores en las variables de sensor del flow `Añadir máquinas y sensores`",
        "x": 850,
        "y": 380,
        "wires": []
    },
    {
        "id": "044e41c1c8a225ab",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "DEFINIR",
        "info": "",
        "x": 1960,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "d6a09eb71785fedb",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "DEFINIR",
        "info": "",
        "x": 1620,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "3fa48ee2213bedd8",
        "type": "delay",
        "z": "d86c19fe420220cb",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "ec02abd5f82f65c0"
            ]
        ]
    },
    {
        "id": "b507e9d1967763ae",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Update Fin",
        "func": "msg.topic = \"UPDATE \" + flow.get('DBname') + \".General \";\nmsg.topic += \"SET Fin = '\" + flow.get('FechaHora') + \"';\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 920,
        "wires": [
            [
                "7df4c4327d62a5f3"
            ]
        ]
    },
    {
        "id": "e1f800693a19c519",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "REVISAR DELAY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 900,
        "wires": []
    },
    {
        "id": "aed3975ed7d00cd0",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "52d02d326e3da39e",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "64813a6b1b285d76",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "be38f942b34bbd95",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "f7761a4e250bf402",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "COMPROBACION ULTIMA FILA",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".General ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "904e96e87d43c536",
                "15e7e41b5bf78b15"
            ]
        ]
    },
    {
        "id": "faf5132eee5eccdc",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "COMPARACION DE ARRAYS",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocal = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducido',arrayIntroducidolocal);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1100,
        "wires": [
            [
                "cef2b8bc4585c328"
            ]
        ]
    },
    {
        "id": "15e7e41b5bf78b15",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d4200d82a2d92bba",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "",
        "func": "\nvar signals = flow.get(\"Signals\");\n\nfor(var j =0;j <flow.get(\"NumSignals\");j++){\n    \n    flow.set(String(signals[j]),msg.payload[String(signals[j])]);\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 640,
        "wires": [
            [
                "9380abf87c90dba8"
            ]
        ]
    },
    {
        "id": "9380abf87c90dba8",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 640,
        "wires": []
    },
    {
        "id": "60ddb43dcba80fd3",
        "type": "split",
        "z": "d86c19fe420220cb",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1940,
        "y": 760,
        "wires": [
            [
                "1e43866ae77d2f76"
            ]
        ]
    },
    {
        "id": "1e43866ae77d2f76",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 760,
        "wires": [
            [
                "7690af2d5d430fd6"
            ]
        ]
    },
    {
        "id": "696fa0ecd0f260bd",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "set variables auxiliares",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"Objeto\",msg.payload);\nflow.set(\"NumSignals\",Object.keys(flow.get(\"Objeto\")).length);\nflow.set(`j`,0);\nflow.set(\"PredefinedSignalsArray\",new Array(flow.get(\"NumSignals\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "60ddb43dcba80fd3"
            ]
        ]
    },
    {
        "id": "7690af2d5d430fd6",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "872ba245df625682",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "CONSULTA4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1280,
        "wires": []
    },
    {
        "id": "350dd598c70b4834",
        "type": "link out",
        "z": "d86c19fe420220cb",
        "name": "Numero de Sensores",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 460,
        "wires": []
    },
    {
        "id": "91dfc7f3d26f7823",
        "type": "link out",
        "z": "d86c19fe420220cb",
        "name": "Info de los Sensores OBJECT",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 520,
        "wires": []
    },
    {
        "id": "85860b2647d12b83",
        "type": "link out",
        "z": "d86c19fe420220cb",
        "name": "Cantidad de Producciones Number",
        "mode": "link",
        "links": [],
        "x": 2595,
        "y": 560,
        "wires": []
    },
    {
        "id": "f1b3c7f06906a905",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "REVISAR",
        "info": "UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1; : msg.topic : string[93]\n\"UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1;\"",
        "x": 1500,
        "y": 920,
        "wires": []
    },
    {
        "id": "698ebe6bdf14da3b",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "INSERT EN GENERAL",
        "func": "var signals = flow.get(\"Signals\");\nvar objeto = flow.get(\"Objeto\");\nvar dbName = flow.get(\"DBname\");\nvar fechaHora = flow.get(\"FechaHora\");\n\n// Construir la consulta SQL de inserción\nvar topic = \"INSERT INTO `\" + dbName + \"`.`General` VALUES (\";\n\n// Agregar la fecha y hora\ntopic += \"'\" + fechaHora + \"', \";\n\n// Agregar la primera señal\nvar firstSignal = signals[0];\nvar firstValor = objeto[firstSignal];\nif (typeof firstValor === 'string') {\n    topic += \"'\" + firstValor + \"'\";\n} else {\n    topic += firstValor;\n}\n\n// Agregar coma\ntopic += \", \";\n\n// Iterar a través del resto de las señales y construir los valores de la inserción\nfor (var k = 1; k < signals.length; k++) {\n    var signal = signals[k];\n\n    // Obtener el valor correspondiente del objeto\n    var valor = objeto[signal];\n\n    // Agregar el valor a la consulta SQL\n    if (typeof valor === 'string') {\n        // Si es una cadena, agregar comillas simples alrededor del valor\n        topic += \"'\" + valor + \"'\";\n    } else {\n        // De lo contrario, agregar el valor directamente\n        topic += valor;\n    }\n\n    // Agregar coma si no es el último valor\n    if (k < signals.length - 1) {\n        topic += \", \";\n    }\n}\n\n// Cerrar paréntesis de la consulta SQL de inserción\ntopic += \")\";\n\n// return the SQL query\nreturn {\n    topic: topic\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 980,
        "wires": [
            [
                "e1f800693a19c519",
                "81ab077b4b428f90"
            ]
        ]
    },
    {
        "id": "4b7ce593b19b081c",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "OVERRIDE DE O.L POR SENSOR",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "f9890ed345dafc57",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "info": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "x": 2490,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4037ae4362fa232c",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "ORDEN_LECTURA_G(OK)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=2;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1220,
        "wires": [
            [
                "9b1220e380db6410",
                "40786a75f286b2b7"
            ]
        ]
    },
    {
        "id": "12da9891c72ae068",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "REVISAR",
        "info": "",
        "x": 2360,
        "y": 380,
        "wires": []
    },
    {
        "id": "22aaa948916a8e77",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3440,
        "y": 1060,
        "wires": []
    },
    {
        "id": "66c0f0b82204677c",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "67ef0cd6ea6e69f1",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1720,
        "wires": [
            [
                "cf528b3f52de181c"
            ]
        ]
    },
    {
        "id": "cfbf211afe9cc761",
        "type": "switch",
        "z": "d86c19fe420220cb",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1720,
        "wires": [
            [
                "08b207e61d3cefb4"
            ],
            [
                "67ef0cd6ea6e69f1"
            ]
        ]
    },
    {
        "id": "cf528b3f52de181c",
        "type": "switch",
        "z": "d86c19fe420220cb",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1720,
        "wires": [
            [],
            [
                "f8128b2665101cb3"
            ]
        ]
    },
    {
        "id": "80f362cccd4e1260",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "i for loop",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1660,
        "wires": [
            [
                "8c868548251ed96d"
            ]
        ]
    },
    {
        "id": "8c868548251ed96d",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<4){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1720,
        "wires": [
            [
                "cfbf211afe9cc761"
            ]
        ]
    },
    {
        "id": "f8128b2665101cb3",
        "type": "delay",
        "z": "d86c19fe420220cb",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2590,
        "y": 1720,
        "wires": [
            [
                "8c868548251ed96d"
            ]
        ]
    },
    {
        "id": "08b207e61d3cefb4",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1660,
        "wires": [
            [
                "e8e2de947bf045f4"
            ]
        ]
    },
    {
        "id": "a9418338070ce262",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "6b6febe8c6c35a5e",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "6dff8a35ac3b1451",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "e454aec5fcab8415",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "c62f12f7da5c0baa",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Control ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            [
                "e06ff5f002d48b63"
            ]
        ]
    },
    {
        "id": "928d05e63ff36279",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "ArraysParaComparar",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocalcontrol = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducidocontrol',arrayIntroducidolocalcontrol);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1600,
        "wires": [
            [
                "80f362cccd4e1260"
            ]
        ]
    },
    {
        "id": "1b825f441abf4ba5",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1910,
        "y": 1640,
        "wires": [
            [
                "cfbf211afe9cc761"
            ]
        ]
    },
    {
        "id": "e40855fa4ab2e6b8",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "------------------------------------------------------------------------*ESCRITURA EN CONTROL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2040,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c29cb72d8a110782",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "ESCRITURA EN LA TABLA DE CONTROL",
        "func": "// Obtener el payload del mensaje\nlet data = msg.payload;\n\n// Verificar si el payload es un string y convertirlo a objeto JSON\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\n// Inicializar un array para almacenar las consultas SQL\nlet sqlQueries = [];\n\n// Iterar sobre cada clave en el objeto de datos\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        // Construir la consulta SQL con una tabla estática y claves como columnas\n        let query = `INSERT INTO INT_maquina1.control (${key}) VALUES (\"${value}\")`;\n        sqlQueries.push(query);\n    }\n}\n\n// Devolver las consultas generadas en el payload del mensaje\nmsg.topic = sqlQueries.join(';');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1480,
        "wires": [
            [
                "db0ab3f6820eb5ba"
            ]
        ]
    },
    {
        "id": "afbe817c6218451e",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "-----------------ORDEN------------",
        "func": "// Función para reordenar las variables dentro del paquete\nfunction reordenarPaquete(paquete) {\n    // Define el orden deseado de las variables\n    const ordenDeseado = [\"1LOTE\", \"2RECETA\", \"3PROCESO\", \"4FASE\",  \"5OPERARIO\", \"zAVANCE_MANUAL\", \"zABORTAR\", flow.get(\"Adicional1\"), flow.get(\"Adicional2\"), flow.get(\"Adicional3\"), flow.get(\"Adicional4\"), flow.get(\"Adicional5\"), flow.get(\"Adicional5\"), flow.get(\"Adicional6\"), flow.get(\"Adicional7\"), flow.get(\"Adicional8\"), flow.get(\"Adicional9\"), flow.get(\"Adicional10\"), flow.get(\"Adicional11\"), flow.get(\"Adicional12\"), flow.get(\"Adicional13\"), flow.get(\"Adicional14\"), flow.get(\"Adicional15\"), \"zerror_ciclo\"];\n\n    // Crea un nuevo objeto para almacenar las variables reordenadas\n    let paqueteOrdenado = {};\n\n    // Itera sobre el orden deseado\n    ordenDeseado.forEach(variable => {\n        // Verifica si la variable está presente en el paquete recibido\n        if (paquete.hasOwnProperty(variable)) {\n            // Agrega la variable al paquete ordenado\n            paqueteOrdenado[variable] = paquete[variable];\n        }\n    });\n\n    // Devuelve el paquete ordenado\n    return paqueteOrdenado;\n}\n\n// Llama a la función de reordenamiento con el paquete recibido como argumento\nmsg.payload= reordenarPaquete(msg.payload);\n\n// Devuelve el mensaje con el paquete ordenado\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "696fa0ecd0f260bd",
                "5b4f9c074cb8b0c9",
                "32c3300027087d2e",
                "5fb321b10c66ceec",
                "6339cbc0c23df43c",
                "3fa48ee2213bedd8",
                "d4200d82a2d92bba",
                "d6ab34c82deea676",
                "75dc41e06d1a6e83"
            ]
        ]
    },
    {
        "id": "c0a9c30374222e56",
        "type": "json",
        "z": "d86c19fe420220cb",
        "name": "Envio del señales de control a la BDD",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 1480,
        "wires": [
            [
                "c29cb72d8a110782"
            ]
        ]
    },
    {
        "id": "db0ab3f6820eb5ba",
        "type": "split",
        "z": "d86c19fe420220cb",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2050,
        "y": 1440,
        "wires": [
            [
                "9fb5b394bf396757"
            ]
        ]
    },
    {
        "id": "070d973ad6cccdd9",
        "type": "json",
        "z": "d86c19fe420220cb",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2230,
        "y": 1440,
        "wires": [
            [
                "4956bc648921bcc1",
                "5427099d3bd27c7a"
            ]
        ]
    },
    {
        "id": "5427099d3bd27c7a",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "REV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1bd8eb0afc5bf26c",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "ORDEN_LECTURA_G(KO)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=3;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1160,
        "wires": [
            [
                "9b1220e380db6410"
            ]
        ]
    },
    {
        "id": "bc62db16774bb77b",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "------------------------------------------------------------------ENTRADAS SIEMENS PLC------------------------------------------------------------------",
        "info": "\nEMAIL: \"~+TIEMPO,102.00;LITROS,204.00;HORAS:,1580.00\"",
        "x": 420,
        "y": 900,
        "wires": []
    },
    {
        "id": "0cb9be54e4896399",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "Inserciones de sensores con O.L Independiente",
        "info": "",
        "x": 1840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "cf862ba38acd2c29",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "Inserciones de sensores con O.L General de Sensores",
        "info": "",
        "x": 2500,
        "y": 1800,
        "wires": []
    },
    {
        "id": "33a2e13c8996d054",
        "type": "switch",
        "z": "d86c19fe420220cb",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1610,
        "y": 2060,
        "wires": [
            [
                "0c42ea2f5f4c8f40"
            ]
        ]
    },
    {
        "id": "0c42ea2f5f4c8f40",
        "type": "json",
        "z": "d86c19fe420220cb",
        "name": "ORDEN_LECTURA_tipo = \"2\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2470,
        "y": 2060,
        "wires": [
            [
                "8fbd3956c4ae82d7",
                "5e39b64dd4524822"
            ]
        ]
    },
    {
        "id": "8fbd3956c4ae82d7",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO int_maquina1.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1980,
        "wires": [
            [
                "ef67906e71ec49a1"
            ]
        ]
    },
    {
        "id": "ef67906e71ec49a1",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1920,
        "wires": [
            [
                "1c06c21caf870a7c"
            ]
        ]
    },
    {
        "id": "1c06c21caf870a7c",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "CHECK O.L.",
        "func": "\nif (flow.get(\"ORDEN_LECTURA_sensores\") !== 1) {\n    node.warn('La orden de Lectura General de Sensores está apagada');\n} else {\n    \n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1860,
        "wires": [
            [
                "acd8343f59194c33"
            ]
        ]
    },
    {
        "id": "26fa07bf9163dcfe",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "debug sensores ind",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "5e39b64dd4524822",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "debug sensores gnral",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 1960,
        "wires": []
    },
    {
        "id": "ae56d953c54f96c1",
        "type": "switch",
        "z": "d86c19fe420220cb",
        "name": "",
        "property": "TIPO_LECTURA_Sensores",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1350,
        "y": 1960,
        "wires": [
            [
                "13a63b3c82310a19"
            ],
            [
                "33a2e13c8996d054"
            ],
            [
                "a48a1d9f9e981836"
            ]
        ]
    },
    {
        "id": "8b4574e92690fb2d",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "set O.L. EMAIL S1C",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "5745d9d441cb2ced",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "8b4574e92690fb2d"
            ]
        ]
    },
    {
        "id": "7ec8c5fd3c5c3c63",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "set O.L. EMAIL D1C",
        "func": "\nflow.set(\"D1C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "870b08c593defd96",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "7ec8c5fd3c5c3c63"
            ]
        ]
    },
    {
        "id": "3a340b96f467ea43",
        "type": "template",
        "z": "d86c19fe420220cb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "401e5c3f2f8cce9b"
            ]
        ]
    },
    {
        "id": "401e5c3f2f8cce9b",
        "type": "rbe",
        "z": "d86c19fe420220cb",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "8b4574e92690fb2d"
            ]
        ]
    },
    {
        "id": "0ab2efdb24719bb4",
        "type": "websocket in",
        "z": "d86c19fe420220cb",
        "name": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "3a340b96f467ea43"
            ]
        ]
    },
    {
        "id": "1bd9915233c8fbda",
        "type": "template",
        "z": "d86c19fe420220cb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "086059d2202b8082"
            ]
        ]
    },
    {
        "id": "086059d2202b8082",
        "type": "rbe",
        "z": "d86c19fe420220cb",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "7ec8c5fd3c5c3c63"
            ]
        ]
    },
    {
        "id": "9e97bdd1d6c1367e",
        "type": "websocket in",
        "z": "d86c19fe420220cb",
        "name": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "1bd9915233c8fbda"
            ]
        ]
    },
    {
        "id": "40786a75f286b2b7",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "¿O.L EMAIL?",
        "func": "if (flow.get(\"CONTROL_EMAIL\") === 1) {\n   \n    // Continuar el flujo si el valor es 1\n    msg.payload =1 \n return msg;\n \n} else {\n    // Bloquear ejecución enviando un mensaje de error\n    node.error(\"EMAIL EN PROCESO\", msg);\n    return null; // Detener el flujo\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3660,
        "y": 520,
        "wires": [
            [
                "db868f66cadd9f2c"
            ]
        ]
    },
    {
        "id": "0d3d6e3a217ee907",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "7ec8c5fd3c5c3c63"
            ]
        ]
    },
    {
        "id": "605ebefd4109d7e9",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "8b4574e92690fb2d"
            ]
        ]
    },
    {
        "id": "a48a1d9f9e981836",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "BLOCK \"0\"",
        "func": "msg.payload=node.warn(\"Lectura de Sensores Apagada\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "5188e42cdc588162",
        "type": "split",
        "z": "d86c19fe420220cb",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1660,
        "y": 1380,
        "wires": [
            [
                "0c0225306bb75340"
            ]
        ]
    },
    {
        "id": "0c0225306bb75340",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Declaracion Señales DE CONTROL",
        "func": "var CSignals = msg.signals;\n\nvar CSignalsLocal = flow.get(\"ControlSignalsArray\");\n\nCSignalsLocal[flow.get('j1')]=CSignals;\n\nflow.set('j1',flow.get('j1')+1);\n\nif(flow.get(\"j1\")==flow.get(\"NumSignalsControl\")){\n    flow.set(\"CSignals\",CSignalsLocal);\n}\n\nmsg.payload = msg.CSignals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1380,
        "wires": [
            [
                "5687754c14ce4e56"
            ]
        ]
    },
    {
        "id": "47a81bd9b4f2145d",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "set variables de control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j1`,0);\nflow.set(\"ControlSignalsArray\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1380,
        "wires": [
            [
                "5188e42cdc588162"
            ]
        ]
    },
    {
        "id": "5687754c14ce4e56",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j1\") == flow.get(\"NumSignalsControl\")) {\n    msg.payload = flow.get(\"ObjetoControl\");\n\n    var signals = flow.get(\"CSignals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignalsControl\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "8ef5d54e93dbe94f",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "set  TIPO O.L. SENSORES (GENERAL) ",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e3a4df612de1abcf",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 80,
        "wires": [
            [
                "8ef5d54e93dbe94f"
            ]
        ]
    },
    {
        "id": "ddac6febc46dfeb9",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "set O.L. GENERAL",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0eaf14fe5c0d249f",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "ddac6febc46dfeb9"
            ]
        ]
    },
    {
        "id": "0b8c541a9e24d9d9",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "set  TIPO O.L. SENSORES (INDIVIDUAL)",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2954dda88962a955",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "0b8c541a9e24d9d9"
            ]
        ]
    },
    {
        "id": "9fb5b394bf396757",
        "type": "split",
        "z": "d86c19fe420220cb",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2190,
        "y": 1400,
        "wires": [
            [
                "070d973ad6cccdd9"
            ]
        ]
    },
    {
        "id": "2c006839a05fe297",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "SELECT LAST ROW",
        "func": "var controlemail= flow.get(\"CONTROL_EMAIL\");\nif (controlemail===1){\nmsg.topic= \"SELECT * FROM INT_\"+flow.get (\"Maquina\")+\".General ORDER BY 'FechaHora' DESC LIMIT 1;\";\nreturn msg;}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 980,
        "wires": [
            [
                "a234b213c7f26767"
            ]
        ]
    },
    {
        "id": "361d8eba22aa65ab",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "DEFINIR ADICIONALES",
        "props": [
            {
                "p": "Adicional1",
                "v": "MATRICULA",
                "vt": "str"
            },
            {
                "p": "Adicional3",
                "v": "CONDUCTOR",
                "vt": "str"
            },
            {
                "p": "Adicional4",
                "v": "PROVEEDOR",
                "vt": "str"
            },
            {
                "p": "Adicional5",
                "v": "LITROS",
                "vt": "str"
            },
            {
                "p": "Adicional6",
                "v": "DESTINO",
                "vt": "str"
            },
            {
                "p": "Adicional7",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional8",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional9",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional10",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional11",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional12",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional13",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional14",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional15",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 670,
        "y": 640,
        "wires": [
            [
                "227346ecf4e62123"
            ]
        ]
    },
    {
        "id": "227346ecf4e62123",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"Adicional1\", msg.Adicional1);\nflow.set(\"Adicional2\", msg.Adicional2);\nflow.set(\"Adicional3\", msg.Adicional3);\nflow.set(\"Adicional4\", msg.Adicional4);\nflow.set(\"Adicional5\", msg.Adicional5);\nflow.set(\"Adicional6\", msg.Adicional6);\nflow.set(\"Adicional7\", msg.Adicional7);\nflow.set(\"Adicional8\", msg.Adicional8);\nflow.set(\"Adicional9\", msg.Adicional9);\nflow.set(\"Adicional10\", msg.Adicional10);\nflow.set(\"Adicional11\", msg.Adicional11);\nflow.set(\"Adicional12\", msg.Adicional12);\nflow.set(\"Adicional13\", msg.Adicional13);\nflow.set(\"Adicional14\", msg.Adicional14);\nflow.set(\"Adicional15\", msg.Adicional15);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "13a63b3c82310a19",
        "type": "json",
        "z": "d86c19fe420220cb",
        "name": "ORDEN_LECTURA_tipo = \"1\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1650,
        "y": 1840,
        "wires": [
            [
                "74f7acd532da5e85"
            ]
        ]
    },
    {
        "id": "74f7acd532da5e85",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO INT_RECEPCION.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1728.183349609375,
        "y": 1915.88330078125,
        "wires": [
            [
                "64ef948723711784"
            ]
        ]
    },
    {
        "id": "090acacc69b2ed24",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1948.183349609375,
        "y": 1915.88330078125,
        "wires": [
            [
                "5faadee13abda116"
            ]
        ]
    },
    {
        "id": "6f120fc61b126ee6",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1948.183349609375,
        "y": 1875.88330078125,
        "wires": [
            [
                "090acacc69b2ed24"
            ]
        ]
    },
    {
        "id": "64ef948723711784",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1868.183349609375,
        "y": 2015.88330078125,
        "wires": [
            [
                "6f120fc61b126ee6"
            ]
        ]
    },
    {
        "id": "b894a7e5d09a04d5",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1720,
        "y": 2880,
        "wires": [
            [
                "9390ac39726b9129"
            ]
        ]
    },
    {
        "id": "5faadee13abda116",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1960,
        "wires": [
            [
                "0f4ef45bc3e28e6b"
            ]
        ]
    },
    {
        "id": "db868f66cadd9f2c",
        "type": "json",
        "z": "d86c19fe420220cb",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 4310,
        "y": 200,
        "wires": [
            [
                "9da715012e3395a7"
            ]
        ]
    },
    {
        "id": "9da715012e3395a7",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "SELECT",
        "func": "var Lote = flow.get(\"1LOTE\");\nvar Maquina = flow.get(\"DBname\");\n\n// Asegurarse de que Lote se concatene como string con comillas simples\nvar query = \"SELECT 4FASE, LITROS, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM \" + Maquina + \".General WHERE 1LOTE = '\" + Lote + \"';\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4440,
        "y": 200,
        "wires": [
            [
                "654dce68dcd72071"
            ]
        ]
    },
    {
        "id": "89b9b46756e79f89",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Template Correo E ",
        "func": "// Recupera el contenido del payload\nlet content = flow.get(\"CONTENIDO_EMAIL\");\nlet RECETA = flow.get(\"RECETA\") || \"No disponible\";\nvar LOTE = flow.get(\"1LOTE\") || \"No disponible\";\nvar FASE = flow.get(\"4FASE\") || \"No disponible\";\nvar OPERARIO = flow.get(\"5OPERARIO\") || \"No disponible\";\nvar PROCESO = flow.get(\"3PROCESO\") || \"No disponible\";\nvar PROVEEDOR = flow.get(\"PROVEEDOR\") || \"No disponible\";\nvar MATRICULA = flow.get(\"MATRICULA\") || \"No disponible\";\nvar CONDUCTOR = flow.get(\"CONDUCTOR\") || \"No disponible\";\nvar DESTINO = flow.get(\"DESTINO\") || \"No disponible\";\nvar Registro = msg.payload;  // El payload ya debe contener el JSON parseado.\n\n// Verifica que el contenido de Registro sea un array y construye una tabla\nlet registroTable = \"\";\n\nif (Array.isArray(Registro)) {\n    registroTable = `\n        <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse;\">\n            <thead>\n                <tr>\n                    <th>FASE</th>\n                    <th>LITROS</th>\n                    <th>Fecha y Hora</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${Registro.map(reg => `\n                    <tr>\n                        <td>${reg['4FASE'] || \"No disponible\"}</td>\n                        <td>${reg.LITROS}</td>\n                        <td>${reg.Fechahora}</td>\n                    </tr>`).join('')}\n            </tbody>\n        </table>\n    `;\n} else {\n    registroTable = `<p>No se encontraron registros válidos.</p>`;\n}\n\n// Crea la lista HTML a partir de las partes de content\nlet items = content.split(';').map(item => `<li>${item.trim()}</li>`).join('\\n');\n\n// Arma el contenido HTML completo con la tabla\nmsg.payload = `\n    <html>\n        <body>\n            <h1>Alerta de Trazabilidad:</h1>\n            <p>En este documento puede encontrar los datos de la línea: ${flow.get(\"Maquina\")}</p>\n            <ul>\n                <li>Lote: ${LOTE}</li>\n                <li>Proceso: ${PROCESO}</li>\n                <li>Proveedor: ${PROVEEDOR}</li>\n                <li>Matricula: ${MATRICULA}</li>\n                <li>Conductor: ${CONDUCTOR}</li>\n                <li>Operario: ${OPERARIO}</li>\n                <li>Destino: ${DESTINO}</li>\n            </ul>\n            <h2>Registros:</h2>\n            ${registroTable}\n            <img src=\"cid:miImagen\" alt=\"Imagen Incrustada\" />\n        </body>\n    </html>\n`;\n\n// Especifica que se trata de contenido HTML\nmsg.html = msg.payload;\n\n// Configura el mensaje\nmsg.to = \"breixoherrera1@gmail.com, jadeudero@grupointegra.com.es\";\nmsg.topic = \"Datos de la línea Recepción. Lote:\" +flow.get(\"1LOTE\");\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\", // Cambia esto por el nombre de tu imagen\n        path: \"/home/intboxes/Documents/Logo.jpg\", // Cambia esto por la ruta a tu imagen\n        cid: \"miImagen\"  // cid debe coincidir con el del HTML\n    }\n];\n\n// Envía el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5070,
        "y": 200,
        "wires": [
            [
                "c4ac104d560818c2",
                "df177d9ce5f52ea5"
            ]
        ]
    },
    {
        "id": "316f83072b2609f6",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Conversion a JSON String",
        "func": "// Verifica si el payload es un string y lo convierte a JSON\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (error) {\n        node.error(\"El payload no es un JSON válido: \" + error);\n        return;\n    }\n}\n\n// Retorna el mensaje con el payload convertido\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4840,
        "y": 200,
        "wires": [
            [
                "89b9b46756e79f89"
            ]
        ]
    },
    {
        "id": "fc80c2ed71373c72",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "43e80b5d224eb314"
            ]
        ]
    },
    {
        "id": "43e80b5d224eb314",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "ENVIO DE EMAIL",
        "func": "\nflow.set(\"CONTROL_EMAIL\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4467388369f8d766",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "----------------------------------------NOTIFICACIONES----------------------------------------",
        "info": "",
        "x": 4720,
        "y": 40,
        "wires": []
    },
    {
        "id": "49ffb420cfd1da0a",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "NOTIFICACIONES DE TRAZABILIDAD POR EMAIL.",
        "info": "",
        "x": 4680,
        "y": 120,
        "wires": []
    },
    {
        "id": "df177d9ce5f52ea5",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "CONFIRMACION AL PLC",
        "func": "msg.payload = 2;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5090,
        "y": 240,
        "wires": [
            [
                "d75faff528b66fdf"
            ]
        ]
    },
    {
        "id": "60b2df78670e66c7",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "ORDEN DE LECTURA GENERAL BLOCK",
        "func": "// Obtener los valores de las variables de flujo\nconst ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nconst latenciaOrdenLectura = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 1\nif (ordenLectura === 1) {\n    // Si ORDEN_LECTURA_general es 1, verificar la latencia\n    if (latenciaOrdenLectura === 1) {\n        // Si la latencia es 1, bloquear la ejecución\n        node.error(\"LATENCIA_ORDEN_LECTURA_general es 1, bloqueo de flujo\", msg);\n        return null; // Detener el flujo\n    } else {\n        // Si la latencia no es 1 (Es = 0), continuar el flujo\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n        return msg;\n    }\n} else {\n    // Si ORDEN_LECTURA_general no es 1, bloquear la ejecución\n    node.error(\"ORDEN_LECTURA_general no es 1, bloqueo de flujo\", msg);\n    return null; // Detener el flujo\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 860,
        "wires": [
            [
                "698ebe6bdf14da3b"
            ]
        ]
    },
    {
        "id": "d6ab34c82deea676",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Check Latencia",
        "func": "// Obtener el valor de ORDEN_LECTURA_general\nvar ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 0 o 2\nif (ordenLectura === 0 || ordenLectura === 2) {\n    // Si es 0 o 2, establecer la latencia en el valor actual de ORDEN_LECTURA_general\n    flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 0);\n    return msg;\n}else{\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 860,
        "wires": [
            [
                "60b2df78670e66c7"
            ]
        ]
    },
    {
        "id": "f5aabf7a18795ebd",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "------------------------------------------------------------------------*GESTION DE TABLA DE LOTES*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2080,
        "y": 2800,
        "wires": []
    },
    {
        "id": "5247cdd7cd5feeaf",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "--------------------------------------------------------------------OVERRIDES------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 40,
        "wires": []
    },
    {
        "id": "acb00399242e1fb3",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "ENVÍO Y CONFIRMACIÓN",
        "info": "",
        "x": 5390,
        "y": 120,
        "wires": []
    },
    {
        "id": "7b339c626f2c761a",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "ACTIVACIÓN DE ENVÍO DE NOTIFICACIONES",
        "info": "",
        "x": 3680,
        "y": 420,
        "wires": []
    },
    {
        "id": "9d8e209a0bb6bf11",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "-------------------------DECLARACIÓN DE ADICIONALES GENERALES---------------------------------",
        "info": "",
        "x": 840,
        "y": 580,
        "wires": []
    },
    {
        "id": "d652521f8784b32f",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1020,
        "wires": []
    },
    {
        "id": "6a1b66e0c0f73488",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1140,
        "wires": []
    },
    {
        "id": "3e69e26e91be20b7",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1320,
        "wires": []
    },
    {
        "id": "7575363f27a3dd22",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1460,
        "wires": []
    },
    {
        "id": "1b8c754fe54c2b09",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1900,
        "wires": []
    },
    {
        "id": "2be9feb687c885af",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 2020,
        "wires": []
    },
    {
        "id": "d330d85862b015ae",
        "type": "switch",
        "z": "d86c19fe420220cb",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 2280,
        "wires": [
            [
                "d49413fe745d3633"
            ],
            [
                "c65de44c53e2febc"
            ]
        ]
    },
    {
        "id": "165ec2d090d2a801",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Escritura en Tabla de Sensor",
        "func": "/*Este nodo prepara el Query para almacenar la información\ndel sensor proveniente del PLC en su lugar correspondiente.\nEsto solo se procesa si la orden de lectura de este sensor\nse encuentra activa\n*/\nmsg.payload = flow.get('Objeto');\n\nif (flow.get('NumSensor') <= flow.get('MaxSensor') && msg.payload[ + flow.get('Sensor' + flow.get('NumSensor'))] == true) {\n    var tableName = flow.get('Sensor' + flow.get('NumSensor'));\n    var datetime = flow.get('FechaHora');\n    var value = msg.payload[flow.get('NumSensor')];\n    var dbName = flow.get('DBname');\n      \n   var topic = \"INSERT INTO \" + dbName + \".\" + tableName + \" (FechaHora, Unidad) VALUES ('\" + datetime + \"', '\" + value + \"');\";\n   \n\n    msg.queryCompresion = \"SELECT Valor FROM \" + flow.get('DBname') + \".\" + tableName + \" ORDER BY FechaHora DESC LIMIT 1;\";\n\n    msg.topic = topic;\n    flow.set(\"queryValor\", msg.topic);\n    msg.payload = 0;\n    return msg;\n} else {\n    msg.payload = 1;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 2240,
        "wires": [
            [
                "ed334c3ad5358006",
                "3bbdde44352e5a21",
                "a4052f0b9d088b61"
            ]
        ]
    },
    {
        "id": "3bbdde44352e5a21",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "a3fc4de30be58aa8",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Inicializacion del loop",
        "func": "/*Este nodo inicializa las variables necesarias para ciclar\nla información de cada uno de los sensores y escribirla en \nla tabla correspondiente en la BD de la máquina\n*/\n\nflow.set('NumSensor',1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2200,
        "wires": [
            [
                "165ec2d090d2a801",
                "583e1f70238fe91d"
            ]
        ]
    },
    {
        "id": "ed334c3ad5358006",
        "type": "switch",
        "z": "d86c19fe420220cb",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 2380,
        "wires": [
            [
                "d687abe965566b9c"
            ],
            [
                "c65de44c53e2febc"
            ]
        ]
    },
    {
        "id": "c65de44c53e2febc",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "loop",
        "func": "if(flow.get('NumSensor')<flow.get('MaxSensor')){\n    flow.set('NumSensor',flow.get('NumSensor')+1);\n    msg.payload = flow.get('NumSensor');\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 2380,
        "wires": [
            [
                "165ec2d090d2a801"
            ]
        ]
    },
    {
        "id": "c457a0148cc46c9b",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "------------------------------------------------------------------------*ESCRITURA EN LAS TABLAS DE SENSOR Y ASIGNACIÓN DE ID*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "75dc41e06d1a6e83",
        "type": "delay",
        "z": "d86c19fe420220cb",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 2200,
        "wires": [
            [
                "a3fc4de30be58aa8"
            ]
        ]
    },
    {
        "id": "a4052f0b9d088b61",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "5178fa73a29e5d21",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Check Valores iguales",
        "func": "//recuperamos el valor de la ultima medida del sensor y lo comparamos con el que estamos a punto de introducir\n//si estos valores coinciden, en lugar de seguir con la escritura saltamos una iteracion en el loop\nmsg.payload = msg.payload[0];\nmsg.payload = msg.payload[\"Valor\"];\nflow.set(\"ValorPrevio\", msg.payload);\n\nmsg.payload = flow.get(\"Objeto\");\nvar sensorKey = 'Sensor' + flow.get('NumSensor');\nmsg.payload = msg.payload[sensorKey];\nflow.set(\"ValorActual\", msg.payload);\n\nif (flow.get(\"ValorPrevio\") !== flow.get(\"ValorActual\")) {\n    msg.topic = \"INSERT INTO \" + flow.get(\"DBname\") + \".Tabla (Valor) VALUES ('\" + flow.get(\"ValorActual\") + \"');\";\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 2220,
        "wires": [
            [
                "d330d85862b015ae",
                "619d931c8dc84e82"
            ]
        ]
    },
    {
        "id": "d687abe965566b9c",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Bypass compresion",
        "func": "if (flow.get(\"ModoCompresion\") == 1) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2380,
        "wires": [
            [
                "3d38cf54f511a866"
            ]
        ]
    },
    {
        "id": "3d38cf54f511a866",
        "type": "switch",
        "z": "d86c19fe420220cb",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2430,
        "y": 2380,
        "wires": [
            [
                "ee1988c44992eabb"
            ],
            [
                "d49413fe745d3633"
            ]
        ]
    },
    {
        "id": "619d931c8dc84e82",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "COMPRESSION",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 2220,
        "wires": []
    },
    {
        "id": "583e1f70238fe91d",
        "type": "link out",
        "z": "d86c19fe420220cb",
        "name": "INFO SENSOR TEXT",
        "mode": "link",
        "links": [],
        "x": 2215,
        "y": 2200,
        "wires": []
    },
    {
        "id": "ca1adcbbb8c9198b",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 730,
        "y": 1240,
        "wires": [
            [
                "db77952acccb41b9"
            ]
        ]
    },
    {
        "id": "db77952acccb41b9",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"ORDEN_LECTURA_general\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "dddcc0aff90b7efb",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1030,
        "y": 1320,
        "wires": [
            [
                "e31fc5a99dd3fe5c"
            ]
        ]
    },
    {
        "id": "e31fc5a99dd3fe5c",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"CONTROL_EMAIL\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "ba1945f4c07eda4b",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "POR FASE",
        "func": "// Obtener el estado de la variable '4FASE' del flow\nvar estado = flow.get(\"4FASE\");\n\n// Obtener el estado previo del bloqueo (si ya fue detectado)\nvar Latencia = flow.get(\"bloqueado\") || false;\n\nif (estado === \"Preparacion a reposo\" && !Latencia) {\n    // Si se encuentra \"Preparacion a reposo\" y no está bloqueado, enviar msg.payload\n    msg.payload = \"Estado detectado: Preparacion a reposo\";\n    \n    // Bloquear el envío de más mensajes\n    flow.set(\"bloqueado\", true);\n    \n    return msg;\n} else if (estado !== \"Preparacion a reposo\" && Latencia) {\n    // Si el estado ya no es \"Preparacion a reposo\", desbloquear el envío\n    flow.set(\"bloqueado\", false);\n}\n\nreturn null; // No se envía ningún mensaje si no cumple las condiciones\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3650,
        "y": 620,
        "wires": [
            [
                "db868f66cadd9f2c"
            ]
        ]
    },
    {
        "id": "d53909d10a38ad04",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3400,
        "y": 480,
        "wires": [
            [
                "ba1945f4c07eda4b",
                "297f4616e30e257a"
            ]
        ]
    },
    {
        "id": "297f4616e30e257a",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "function 99",
        "func": "flow.set(\"bloqueado\", false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3390,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "dd1f9e15c8f6b8b5",
        "type": "comment",
        "z": "d86c19fe420220cb",
        "name": "------------------------------------------------------------------------RESPUESTA ERROR DE CICLO--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2070,
        "y": 2580,
        "wires": []
    },
    {
        "id": "207352aa1f043dc5",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "COMPROBACIÓN DE ERROR DE CICLO",
        "func": "// Aqui se revisa si el error de ciclo e encuentra activo cuando no se está leyendo y se pone a 0 en el PLC.\nvar errorciclo = flow.get(\"zerror_ciclo\");\nvar OL = flow.get(\"ORDEN_LECTURA_general\");\nif(errorciclo === 1 && OL === 0 ){\nmsg.payload = 1\n}else{\nreturn msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 2660,
        "wires": [
            [
                "b542ca80769193d6"
            ]
        ]
    },
    {
        "id": "969e75a6979c5c1f",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "Modo Compresion",
        "func": "flow.set(\"ModoCompresion\",msg.payload);\nmsg.payload = \"Modo Compresion Status=\"+flow.get(\"ModoCompresion\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2480,
        "wires": [
            [
                "a77662dac3828790"
            ]
        ]
    },
    {
        "id": "6f4985b7b23c8fc5",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1670,
        "y": 2460,
        "wires": [
            [
                "969e75a6979c5c1f"
            ]
        ]
    },
    {
        "id": "dc9f0dc0d2c615af",
        "type": "inject",
        "z": "d86c19fe420220cb",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1670,
        "y": 2500,
        "wires": [
            [
                "969e75a6979c5c1f"
            ]
        ]
    },
    {
        "id": "a77662dac3828790",
        "type": "debug",
        "z": "d86c19fe420220cb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 2480,
        "wires": []
    },
    {
        "id": "9390ac39726b9129",
        "type": "function",
        "z": "d86c19fe420220cb",
        "name": "ORDEN_LECTURA_LOTE(ok)",
        "func": "// Obtener las variables necesarias de flujo\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\nvar OPERARIO = flow.get(\"5OPERARIO\"); // Asegurarse de que \"5OPERARIO\" es una variable válida de flujo\nvar LOTEC = flow.get(\"LOTEC\");\n\n// Reset de latencia si LOTEC es 0, 2 o 4\nif (LOTEC === 0 || LOTEC === 2 || LOTEC === 4) {  \n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 0);\n    latencia = 0;  // Actualizamos la latencia para asegurarnos de que el cambio se refleje\n}\n\n// Orden para iniciar el lote (LOTEC = 1)\nif (LOTEC === 0 && latencia === 0) {\n    msg.payload = 2;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de inicio del lote y el operario\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET FechaInicioLote = CURRENT_TIMESTAMP, \n                     5OPERARIO = '${OPERARIO}' \n                 ORDER BY FechaInicioLote DESC \n                 LIMIT 1;`;\n}\n\n// Orden para finalizar el lote (LOTEC = 3)\nif (LOTEC === 3 && latencia === 0) {\n    msg.payload = 4;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de finalización del lote\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET FechaFinLote = CURRENT_TIMESTAMP \n                 ORDER BY FechaInicioLote DESC \n                 LIMIT 1;`;\n}\n\n// Devolver el mensaje con el payload y el topic\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2880,
        "wires": [
            [
                "414ed1e67ee2a5a8"
            ]
        ]
    },
    {
        "id": "06286de207e15cbf",
        "type": "s7 in",
        "z": "d86c19fe420220cb",
        "endpoint": "",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "afbe817c6218451e",
                "207352aa1f043dc5"
            ]
        ]
    },
    {
        "id": "2b4ef1350ae33910",
        "type": "s7 in",
        "z": "d86c19fe420220cb",
        "endpoint": "",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 170,
        "y": 1380,
        "wires": [
            [
                "47a81bd9b4f2145d"
            ]
        ]
    },
    {
        "id": "89ec2b5ab5038fdc",
        "type": "s7 in",
        "z": "d86c19fe420220cb",
        "endpoint": "",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1960,
        "wires": [
            [
                "ae56d953c54f96c1"
            ]
        ]
    },
    {
        "id": "9b1220e380db6410",
        "type": "s7 out",
        "z": "d86c19fe420220cb",
        "endpoint": "",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 3820,
        "y": 1200,
        "wires": []
    },
    {
        "id": "d75faff528b66fdf",
        "type": "s7 out",
        "z": "d86c19fe420220cb",
        "endpoint": "",
        "variable": "CONTROL_EMAIL",
        "name": "",
        "x": 5410,
        "y": 240,
        "wires": []
    },
    {
        "id": "df7f04f830629810",
        "type": "s7 out",
        "z": "d86c19fe420220cb",
        "endpoint": "",
        "variable": "LOTEC",
        "name": "",
        "x": 2380,
        "y": 2940,
        "wires": []
    },
    {
        "id": "b542ca80769193d6",
        "type": "s7 out",
        "z": "d86c19fe420220cb",
        "endpoint": "",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 2180,
        "y": 2660,
        "wires": []
    },
    {
        "id": "c4ac104d560818c2",
        "type": "e-mail",
        "z": "d86c19fe420220cb",
        "server": "grupointegra-com-es.correoseguro.dinaserver.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Envio Email",
        "x": 5390,
        "y": 200,
        "wires": []
    },
    {
        "id": "ec96474d88fc3d2a",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 460,
        "wires": [
            [
                "f6de6eacf96c60a9",
                "32c3300027087d2e"
            ]
        ]
    },
    {
        "id": "c322ad98c374b70b",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 520,
        "wires": [
            [
                "551fe99315c89516"
            ]
        ]
    },
    {
        "id": "7df4c4327d62a5f3",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 920,
        "wires": [
            [
                "698ebe6bdf14da3b"
            ]
        ]
    },
    {
        "id": "904e96e87d43c536",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 1040,
        "wires": [
            [
                "faf5132eee5eccdc"
            ]
        ]
    },
    {
        "id": "d924975f22b7aa25",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1160,
        "wires": [
            [
                "1bd8eb0afc5bf26c"
            ]
        ]
    },
    {
        "id": "fedb02092c1f2608",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1280,
        "wires": [
            [
                "872ba245df625682"
            ]
        ]
    },
    {
        "id": "e06ff5f002d48b63",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1900,
        "y": 1540,
        "wires": [
            [
                "928d05e63ff36279"
            ]
        ]
    },
    {
        "id": "e8e2de947bf045f4",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "4956bc648921bcc1",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1500,
        "wires": [
            [
                "c62f12f7da5c0baa"
            ]
        ]
    },
    {
        "id": "81ab077b4b428f90",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1940,
        "y": 980,
        "wires": [
            [
                "f7761a4e250bf402",
                "2c006839a05fe297"
            ]
        ]
    },
    {
        "id": "0f4ef45bc3e28e6b",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2160,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "acd8343f59194c33",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2680,
        "y": 1860,
        "wires": [
            [
                "5e39b64dd4524822"
            ]
        ]
    },
    {
        "id": "a234b213c7f26767",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2500,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "414ed1e67ee2a5a8",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2400,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "654dce68dcd72071",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4620,
        "y": 200,
        "wires": [
            [
                "316f83072b2609f6"
            ]
        ]
    },
    {
        "id": "d49413fe745d3633",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2970,
        "y": 2380,
        "wires": [
            [
                "c65de44c53e2febc"
            ]
        ]
    },
    {
        "id": "ee1988c44992eabb",
        "type": "mysql",
        "z": "d86c19fe420220cb",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2570,
        "y": 2260,
        "wires": [
            [
                "5178fa73a29e5d21"
            ]
        ]
    },
    
{
  "id": "7f5b1a70987f45d8",
  "type": "function",
  "z": "d306f8b3fbbeafc0",
  "name": "Generar respuesta",
  "func": "msg.payload = {\n    status: \"OK\",\n    received: msg.payload\n};\nreturn msg;",
  "outputs": 1,
  "timeout": 0,
  "noerr": 0,
  "initialize": "",
  "finalize": "",
  "libs": [],
  "x": 620,
  "y": 1740,
  "wires": [
    [ "f09184214d99cdef" ]
  ]
},
{
  "id": "f09184214d99cdef",
  "type": "http response",
  "z": "d306f8b3fbbeafc0",
  "name": "",
  "statusCode": "",
  "headers": {},
  "x": 840,
  "y": 1740,
  "wires": []
}

]